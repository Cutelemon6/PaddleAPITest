paddle.abs(Tensor([0, 1, 32, 32],"float32"), )
paddle.abs(Tensor([1, 0, 32, 32],"float32"), )
paddle.abs(Tensor([1, 1, 0, 32],"float32"), )
paddle.abs(Tensor([1, 1, 32, 0],"float32"), )
paddle.abs(Tensor([0, 1],"float64"), )
paddle.abs(Tensor([1, 0],"float64"), )
paddle.abs(Tensor([0, 100],"float64"), )
paddle.abs(Tensor([0, 1025, 105],"complex64"), )
paddle.abs(Tensor([1, 0, 105],"complex64"), )
paddle.abs(Tensor([1, 1025, 0],"complex64"), )
paddle.abs(Tensor([0, 1025, 112],"complex64"), )
paddle.abs(Tensor([1, 0, 112],"complex64"), )
paddle.abs(Tensor([0, 1025, 120],"complex64"), )
paddle.abs(Tensor([1, 0, 120],"complex64"), )
paddle.abs(Tensor([0, 1025, 431],"complex64"), )
paddle.abs(Tensor([1, 0, 431],"complex64"), )
paddle.abs(Tensor([0, 1025, 74],"complex64"), )
paddle.abs(Tensor([1, 0, 74],"complex64"), )
paddle.abs(Tensor([0, 120],"float32"), )
paddle.abs(Tensor([1, 0],"float32"), )
paddle.abs(Tensor([0, 14, 5, 14],"complex128"), )
paddle.abs(Tensor([1, 0, 5, 14],"complex128"), )
paddle.abs(Tensor([1, 14, 0, 14],"complex128"), )
paddle.abs(Tensor([1, 14, 5, 0],"complex128"), )
paddle.abs(Tensor([0, 16, 12, 12],"float32"), )
paddle.abs(Tensor([1, 0, 12, 12],"float32"), )
paddle.abs(Tensor([1, 16, 0, 12],"float32"), )
paddle.abs(Tensor([1, 16, 12, 0],"float32"), )
paddle.abs(Tensor([0, 2, 3, 4],"float32"), )
paddle.abs(Tensor([1, 0, 3, 4],"float32"), )
paddle.abs(Tensor([1, 2, 0, 4],"float32"), )
paddle.abs(Tensor([1, 2, 3, 0],"float32"), )
paddle.abs(Tensor([0, 2, 3, 4],"float64"), )
paddle.abs(Tensor([1, 0, 3, 4],"float64"), )
paddle.abs(Tensor([1, 2, 0, 4],"float64"), )
paddle.abs(Tensor([1, 2, 3, 0],"float64"), )
paddle.abs(Tensor([0, 21, 120],"complex64"), )
paddle.abs(Tensor([1, 21, 0],"complex64"), )
paddle.abs(Tensor([0, 21, 124],"complex64"), )
paddle.abs(Tensor([1, 0, 124],"complex64"), )
paddle.abs(Tensor([0, 21, 431],"complex64"), )
paddle.abs(Tensor([0, 257, 1723],"complex64"), )
paddle.abs(Tensor([1, 0, 1723],"complex64"), )
paddle.abs(Tensor([1, 257, 0],"complex64"), )
paddle.abs(Tensor([0, 257, 294],"complex64"), )
paddle.abs(Tensor([1, 0, 294],"complex64"), )
paddle.abs(Tensor([0, 257, 419],"complex64"), )
paddle.abs(Tensor([1, 0, 419],"complex64"), )
paddle.abs(Tensor([0, 257, 448],"complex64"), )
paddle.abs(Tensor([1, 0, 448],"complex64"), )
paddle.abs(Tensor([0, 257, 480],"complex64"), )
paddle.abs(Tensor([1, 0, 480],"complex64"), )
paddle.abs(Tensor([0, 257, 493],"complex64"), )
paddle.abs(Tensor([1, 0, 493],"complex64"), )
paddle.abs(Tensor([0, 257, 530],"complex64"), )
paddle.abs(Tensor([1, 0, 530],"complex64"), )
paddle.abs(Tensor([0, 3, 256, 256],"float32"), )
paddle.abs(Tensor([1, 0, 256, 256],"float32"), )
paddle.abs(Tensor([1, 3, 0, 256],"float32"), )
paddle.abs(Tensor([1, 3, 256, 0],"float32"), )
paddle.abs(Tensor([0, 3, 32, 32],"float32"), )
paddle.abs(Tensor([1, 3, 0, 32],"float32"), )
paddle.abs(Tensor([1, 3, 32, 0],"float32"), )
paddle.abs(Tensor([0, 33, 112],"complex64"), )
paddle.abs(Tensor([1, 33, 0],"complex64"), )
paddle.abs(Tensor([0, 33, 133],"complex64"), )
paddle.abs(Tensor([1, 0, 133],"complex64"), )
paddle.abs(Tensor([0, 33, 431],"complex64"), )
paddle.abs(Tensor([0, 576],"float32"), )
paddle.abs(Tensor([0, 6, 16, 16],"float32"), )
paddle.abs(Tensor([1, 0, 16, 16],"float32"), )
paddle.abs(Tensor([1, 6, 0, 16],"float32"), )
paddle.abs(Tensor([1, 6, 16, 0],"float32"), )
paddle.abs(Tensor([0, 6, 32, 32],"float32"), )
paddle.abs(Tensor([1, 6, 0, 32],"float32"), )
paddle.abs(Tensor([1, 6, 32, 0],"float32"), )
paddle.abs(Tensor([0, 84],"float32"), )
paddle.abs(Tensor([0],"float32"), )
paddle.abs(Tensor([0],"float64"), )
paddle.abs(Tensor([0],"int64"), )
paddle.abs(Tensor([0, 10],"float32"), )
paddle.abs(Tensor([10, 0],"float32"), )
paddle.abs(Tensor([0, 12],"float32"), )
paddle.abs(Tensor([0, 12],"float64"), )
paddle.abs(Tensor([10, 0],"float64"), )
paddle.abs(Tensor([0, 16],"float32"), )
paddle.abs(Tensor([0, 2, 5],"float32"), )
paddle.abs(Tensor([10, 0, 5],"float32"), )
paddle.abs(Tensor([10, 2, 0],"float32"), )
paddle.abs(Tensor([0, 20, 1],"float32"), )
paddle.abs(Tensor([10, 0, 1],"float32"), )
paddle.abs(Tensor([10, 20, 0],"float32"), )
paddle.abs(Tensor([0, 20],"float64"), )
paddle.abs(Tensor([0, 20],"int32"), )
paddle.abs(Tensor([10, 0],"int32"), )
paddle.abs(Tensor([0, 200, 300],"float32"), )
paddle.abs(Tensor([10, 0, 300],"float32"), )
paddle.abs(Tensor([10, 200, 0],"float32"), )
paddle.abs(Tensor([0, 200, 300],"int32"), )
paddle.abs(Tensor([10, 0, 300],"int32"), )
paddle.abs(Tensor([10, 200, 0],"int32"), )
paddle.abs(Tensor([0, 200, 300],"int64"), )
paddle.abs(Tensor([10, 0, 300],"int64"), )
paddle.abs(Tensor([10, 200, 0],"int64"), )
paddle.abs(Tensor([100, 0],"float64"), )
paddle.abs(Tensor([120, 0],"float32"), )
paddle.abs(Tensor([0, 1, 128],"float32"), )
paddle.abs(Tensor([128, 0, 128],"float32"), )
paddle.abs(Tensor([128, 1, 0],"float32"), )
paddle.abs(Tensor([0, 128],"float32"), )
paddle.abs(Tensor([128, 0],"float32"), )
paddle.abs(Tensor([0, 3, 3],"float32"), )
paddle.abs(Tensor([13, 0, 3],"float32"), )
paddle.abs(Tensor([13, 3, 0],"float32"), )
paddle.abs(Tensor([0, 3, 3],"float64"), )
paddle.abs(Tensor([13, 0, 3],"float64"), )
paddle.abs(Tensor([13, 3, 0],"float64"), )
paddle.abs(Tensor([150, 0],"float32"), )
paddle.abs(Tensor([0, 1, 28, 28],"float32"), )
paddle.abs(Tensor([16, 0, 28, 28],"float32"), )
paddle.abs(Tensor([16, 1, 0, 28],"float32"), )
paddle.abs(Tensor([16, 1, 28, 0],"float32"), )
paddle.abs(Tensor([16, 0],"float32"), )
paddle.abs(Tensor([0, 400],"float32"), )
paddle.abs(Tensor([0, 6, 14, 14],"float32"), )
paddle.abs(Tensor([16, 0, 14, 14],"float32"), )
paddle.abs(Tensor([16, 6, 0, 14],"float32"), )
paddle.abs(Tensor([16, 6, 14, 0],"float32"), )
paddle.abs(Tensor([0, 6, 5, 5],"float32"), )
paddle.abs(Tensor([16, 0, 5, 5],"float32"), )
paddle.abs(Tensor([16, 6, 0, 5],"float32"), )
paddle.abs(Tensor([16, 6, 5, 0],"float32"), )
paddle.abs(Tensor([0, 2],"float64"), )
paddle.abs(Tensor([2, 0],"float64"), )
paddle.abs(Tensor([0, 3, 4],"float32"), )
paddle.abs(Tensor([2, 0, 4],"float32"), )
paddle.abs(Tensor([2, 3, 0],"float32"), )
paddle.abs(Tensor([0, 3],"float32"), )
paddle.abs(Tensor([2, 0],"float32"), )
paddle.abs(Tensor([0, 3],"float64"), )
paddle.abs(Tensor([0, 4],"complex128"), )
paddle.abs(Tensor([2, 0],"complex128"), )
paddle.abs(Tensor([0, 4],"complex64"), )
paddle.abs(Tensor([2, 0],"complex64"), )
paddle.abs(Tensor([0, 5, 5],"complex64"), )
paddle.abs(Tensor([2, 0, 5],"complex64"), )
paddle.abs(Tensor([2, 5, 0],"complex64"), )
paddle.abs(Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.abs(Tensor([3, 0, 3, 3, 3],"float32"), )
paddle.abs(Tensor([3, 3, 0, 3, 3],"float32"), )
paddle.abs(Tensor([3, 3, 3, 0, 3],"float32"), )
paddle.abs(Tensor([3, 3, 3, 3, 0],"float32"), )
paddle.abs(Tensor([0, 5],"float32"), )
paddle.abs(Tensor([3, 0],"float32"), )
paddle.abs(Tensor([0, 5],"float64"), )
paddle.abs(Tensor([3, 0],"float64"), )
paddle.abs(Tensor([0, 6],"float64"), )
paddle.abs(Tensor([32, 0, 28, 28],"float32"), )
paddle.abs(Tensor([32, 1, 0, 28],"float32"), )
paddle.abs(Tensor([32, 1, 28, 0],"float32"), )
paddle.abs(Tensor([32, 0],"float32"), )
paddle.abs(Tensor([32, 0, 14, 14],"float32"), )
paddle.abs(Tensor([32, 6, 0, 14],"float32"), )
paddle.abs(Tensor([32, 6, 14, 0],"float32"), )
paddle.abs(Tensor([0, 3, 2],"float32"), )
paddle.abs(Tensor([4, 0, 2],"float32"), )
paddle.abs(Tensor([4, 3, 0],"float32"), )
paddle.abs(Tensor([0, 3, 2],"float64"), )
paddle.abs(Tensor([4, 0, 2],"float64"), )
paddle.abs(Tensor([4, 3, 0],"float64"), )
paddle.abs(Tensor([0, 5, 2],"float32"), )
paddle.abs(Tensor([4, 5, 0],"float32"), )
paddle.abs(Tensor([0, 5, 2],"float64"), )
paddle.abs(Tensor([4, 5, 0],"float64"), )
paddle.abs(Tensor([0, 8],"float32"), )
paddle.abs(Tensor([4, 0],"float32"), )
paddle.abs(Tensor([400, 0],"float32"), )
paddle.abs(Tensor([0, 5],"complex64"), )
paddle.abs(Tensor([5, 0],"complex64"), )
paddle.abs(Tensor([5, 0],"float64"), )
paddle.abs(Tensor([576, 0],"float32"), )
paddle.abs(Tensor([0, 1, 3, 3],"float32"), )
paddle.abs(Tensor([6, 0, 3, 3],"float32"), )
paddle.abs(Tensor([6, 1, 0, 3],"float32"), )
paddle.abs(Tensor([6, 1, 3, 0],"float32"), )
paddle.abs(Tensor([6, 0],"float64"), )
paddle.abs(Tensor([0],"int32"), )
paddle.abs(Tensor([64, 0, 28, 28],"float32"), )
paddle.abs(Tensor([64, 1, 0, 28],"float32"), )
paddle.abs(Tensor([64, 1, 28, 0],"float32"), )
paddle.abs(Tensor([64, 0],"float32"), )
paddle.abs(Tensor([64, 0, 14, 14],"float32"), )
paddle.abs(Tensor([64, 6, 0, 14],"float32"), )
paddle.abs(Tensor([64, 6, 14, 0],"float32"), )
paddle.abs(Tensor([0, 10],"float64"), )
paddle.abs(Tensor([8, 0],"float64"), )
paddle.abs(Tensor([0, 16, 32],"complex128"), )
paddle.abs(Tensor([8, 0, 32],"complex128"), )
paddle.abs(Tensor([8, 16, 0],"complex128"), )
paddle.abs(Tensor([0, 16, 32],"complex64"), )
paddle.abs(Tensor([8, 0, 32],"complex64"), )
paddle.abs(Tensor([8, 16, 0],"complex64"), )
paddle.abs(Tensor([0, 16, 32],"float16"), )
paddle.abs(Tensor([8, 0, 32],"float16"), )
paddle.abs(Tensor([8, 16, 0],"float16"), )
paddle.abs(Tensor([0, 16, 32],"float32"), )
paddle.abs(Tensor([8, 0, 32],"float32"), )
paddle.abs(Tensor([8, 16, 0],"float32"), )
paddle.abs(Tensor([0, 16, 32],"float64"), )
paddle.abs(Tensor([8, 0, 32],"float64"), )
paddle.abs(Tensor([8, 16, 0],"float64"), )
paddle.abs(Tensor([84, 0],"float32"), )
paddle.abs(Tensor([0, 6],"float32"), )
paddle.abs(Tensor([9, 0],"float32"), )
paddle.abs_(Tensor([0, 20, 1],"float32"), )
paddle.abs_(Tensor([10, 0, 1],"float32"), )
paddle.abs_(Tensor([10, 20, 0],"float32"), )
paddle.abs_(Tensor([0, 20],"int32"), )
paddle.abs_(Tensor([10, 0],"int32"), )
paddle.acos(Tensor([0, 10],"float32"), )
paddle.acos(Tensor([10, 0],"float32"), )
paddle.acos(Tensor([0, 20, 1],"float32"), )
paddle.acos(Tensor([10, 0, 1],"float32"), )
paddle.acos(Tensor([10, 20, 0],"float32"), )
paddle.acos(Tensor([0, 3],"float32"), )
paddle.acos(Tensor([2, 0],"float32"), )
paddle.acosh(Tensor([0, 20, 1],"float32"), )
paddle.acosh(Tensor([10, 0, 1],"float32"), )
paddle.acosh(Tensor([10, 20, 0],"float32"), )
paddle.acosh(Tensor([0, 3],"float32"), )
paddle.acosh(Tensor([2, 0],"float32"), )
paddle.addmm(Tensor([0, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 0],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([0, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 0],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([0, 10],"float32"), )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 0],"float32"), )
paddle.addmm(Tensor([0, 10],"float32"), x=Tensor([0, 10],"float32"), y=Tensor([0, 10],"float32"), )
paddle.addmm(Tensor([10, 0],"float32"), x=Tensor([10, 0],"float32"), y=Tensor([10, 0],"float32"), )
paddle.addmm(Tensor([0, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 0],"float32"), Tensor([30, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([0, 80],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 0],"float32"), Tensor([80, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([0, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 50],"float32"), Tensor([30, 80],"float32"), Tensor([80, 0],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([0, 50],"float32"), Tensor([0, 80],"float32"), Tensor([0, 50],"float32"), alpha=1.0, beta=2.0, )
paddle.addmm(Tensor([30, 0],"float32"), Tensor([30, 0],"float32"), Tensor([80, 0],"float32"), alpha=1.0, beta=2.0, )
paddle.all(Tensor([0],"bool"), )
paddle.all(Tensor([0, 10],"bool"), )
paddle.all(Tensor([12, 0],"bool"), )
paddle.all(Tensor([0, 10],"bool"), axis=0, )
paddle.all(Tensor([12, 0],"bool"), axis=0, )
paddle.all(Tensor([0, 10],"bool"), axis=-1, )
paddle.all(Tensor([12, 0],"bool"), axis=-1, )
paddle.all(Tensor([0, 10],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([12, 0],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([0, 10],"float64"), )
paddle.all(Tensor([12, 0],"float64"), )
paddle.all(Tensor([0, 10],"int64"), )
paddle.all(Tensor([12, 0],"int64"), )
paddle.all(Tensor([0, 1],"bool"), )
paddle.all(Tensor([2, 0],"bool"), )
paddle.all(Tensor([0, 2],"bool"), )
paddle.all(Tensor([0, 3, 4, 5],"bool"), )
paddle.all(Tensor([2, 0, 4, 5],"bool"), )
paddle.all(Tensor([2, 3, 0, 5],"bool"), )
paddle.all(Tensor([2, 3, 4, 0],"bool"), )
paddle.all(Tensor([0],"bool"), axis=-1, )
paddle.all(Tensor([0, 40],"bool"), )
paddle.all(Tensor([3, 0],"bool"), )
paddle.all(Tensor([0, 5],"bool"), axis=None, )
paddle.all(Tensor([3, 0],"bool"), axis=None, )
paddle.all(Tensor([0, 5],"bool"), keepdim=True, )
paddle.all(Tensor([3, 0],"bool"), keepdim=True, )
paddle.all(Tensor([0, 6, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 0, 10],"bool"), None, False, None, )
paddle.all(Tensor([5, 6, 0],"bool"), None, False, None, )
paddle.all(Tensor([0, 6, 10],"float64"), None, False, None, )
paddle.all(Tensor([5, 0, 10],"float64"), None, False, None, )
paddle.all(Tensor([5, 6, 0],"float64"), None, False, None, )
paddle.all(Tensor([0, 6, 10],"int64"), None, False, None, )
paddle.all(Tensor([5, 0, 10],"int64"), None, False, None, )
paddle.all(Tensor([5, 6, 0],"int64"), None, False, None, )
paddle.all(Tensor([0],"bool"), axis=0, )
paddle.all(Tensor([0, 4],"bool"), )
paddle.all(Tensor([8, 0],"bool"), )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), keepdim=False, )
paddle.amax(Tensor([10, 0, 10],"float32"), keepdim=False, )
paddle.amax(Tensor([10, 10, 0],"float32"), keepdim=False, )
paddle.amax(Tensor([0, 10, 10],"float32"), keepdim=True, )
paddle.amax(Tensor([10, 0, 10],"float32"), keepdim=True, )
paddle.amax(Tensor([10, 10, 0],"float32"), keepdim=True, )
paddle.amax(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([0, 4],"float64"), 0, False, )
paddle.amax(Tensor([2, 0],"float64"), 0, False, )
paddle.amax(Tensor([0, 4],"float64"), 1, True, )
paddle.amax(Tensor([2, 0],"float64"), 1, True, )
paddle.amax(Tensor([0, 4],"float64"), None, False, )
paddle.amax(Tensor([2, 0],"float64"), None, False, )
paddle.amax(Tensor([0, 5],"float32"), axis=None, )
paddle.amax(Tensor([3, 0],"float32"), axis=None, )
paddle.amax(Tensor([0, 5],"float32"), keepdim=True, )
paddle.amax(Tensor([3, 0],"float32"), keepdim=True, )
paddle.amax(Tensor([0],"float32"), keepdim=True, )
paddle.amax(Tensor([0],"float32"), axis=0, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[0,1,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[-1,0,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), axis=list[-1,-2,], keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), keepdim=False, )
paddle.amin(Tensor([10, 0, 10],"float32"), keepdim=False, )
paddle.amin(Tensor([10, 10, 0],"float32"), keepdim=False, )
paddle.amin(Tensor([0, 10, 10],"float32"), keepdim=True, )
paddle.amin(Tensor([10, 0, 10],"float32"), keepdim=True, )
paddle.amin(Tensor([10, 10, 0],"float32"), keepdim=True, )
paddle.amin(Tensor([0, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([2, 0, 2],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([2, 2, 0],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([0, 4],"float64"), 0, False, )
paddle.amin(Tensor([2, 0],"float64"), 0, False, )
paddle.amin(Tensor([0, 4],"float64"), 1, True, )
paddle.amin(Tensor([2, 0],"float64"), 1, True, )
paddle.amin(Tensor([0, 4],"float64"), None, False, )
paddle.amin(Tensor([2, 0],"float64"), None, False, )
paddle.amin(Tensor([0, 5],"float32"), axis=None, )
paddle.amin(Tensor([3, 0],"float32"), axis=None, )
paddle.amin(Tensor([0, 5],"float32"), keepdim=True, )
paddle.amin(Tensor([3, 0],"float32"), keepdim=True, )
paddle.amin(Tensor([0],"float32"), keepdim=True, )
paddle.amin(Tensor([0],"float32"), axis=0, )
paddle.angle(Tensor([0, 3],"complex128"), )
paddle.angle(Tensor([2, 0],"complex128"), )
paddle.any(Tensor([0, 300, 4096],"bool"), )
paddle.any(Tensor([1, 0, 4096],"bool"), )
paddle.any(Tensor([1, 300, 0],"bool"), )
paddle.any(Tensor([0],"bool"), )
paddle.any(Tensor([0, 2, 1],"bool"), )
paddle.any(Tensor([10, 0, 1],"bool"), )
paddle.any(Tensor([10, 2, 0],"bool"), )
paddle.any(Tensor([0, 2],"bool"), )
paddle.any(Tensor([10, 0],"bool"), )
paddle.any(Tensor([0, 20],"bool"), )
paddle.any(Tensor([0, 10],"bool"), )
paddle.any(Tensor([12, 0],"bool"), )
paddle.any(Tensor([0, 10],"bool"), axis=0, )
paddle.any(Tensor([12, 0],"bool"), axis=0, )
paddle.any(Tensor([0, 10],"bool"), axis=-1, )
paddle.any(Tensor([12, 0],"bool"), axis=-1, )
paddle.any(Tensor([0, 10],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([12, 0],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([0, 10],"float32"), )
paddle.any(Tensor([12, 0],"float32"), )
paddle.any(Tensor([0, 10],"int64"), )
paddle.any(Tensor([12, 0],"int64"), )
paddle.any(Tensor([0, 2],"bool"), list[0,], )
paddle.any(Tensor([2, 0],"bool"), list[0,], )
paddle.any(Tensor([0, 5],"bool"), axis=None, )
paddle.any(Tensor([3, 0],"bool"), axis=None, )
paddle.any(Tensor([0, 5],"bool"), keepdim=True, )
paddle.any(Tensor([3, 0],"bool"), keepdim=True, )
paddle.any(Tensor([0, 6, 10],"bool"), None, False, None, )
paddle.any(Tensor([5, 0, 10],"bool"), None, False, None, )
paddle.any(Tensor([5, 6, 0],"bool"), None, False, None, )
paddle.any(Tensor([0, 6, 10],"float64"), None, False, None, )
paddle.any(Tensor([5, 0, 10],"float64"), None, False, None, )
paddle.any(Tensor([5, 6, 0],"float64"), None, False, None, )
paddle.any(Tensor([0, 6, 10],"int64"), None, False, None, )
paddle.any(Tensor([5, 0, 10],"int64"), None, False, None, )
paddle.any(Tensor([5, 6, 0],"int64"), None, False, None, )
paddle.any(Tensor([0],"bool"), axis=0, )
paddle.argmax(Tensor([0, 1000],"float32"), axis=1, )
paddle.argmax(Tensor([1, 0],"float32"), axis=1, )
paddle.argmax(Tensor([0, 32],"float64"), axis=-1, )
paddle.argmax(Tensor([1, 0],"float64"), axis=-1, )
paddle.argmax(Tensor([0, 8, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 0, 14, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 0, 12],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([1, 8, 14, 0],"float32"), axis=1, keepdim=True, )
paddle.argmax(Tensor([0, 10],"float32"), )
paddle.argmax(Tensor([10, 0],"float32"), )
paddle.argmax(Tensor([0, 10],"float32"), axis=1, )
paddle.argmax(Tensor([10, 0],"float32"), axis=1, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, )
paddle.argmax(Tensor([10, 0],"float32"), axis=-1, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([10, 0],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([0, 3, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([2, 0, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([2, 3, 0],"float64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmax(Tensor([0, 5],"float32"), )
paddle.argmax(Tensor([3, 0],"float32"), )
paddle.argmax(Tensor([0, 5],"float32"), keepdim=True, )
paddle.argmax(Tensor([3, 0],"float32"), keepdim=True, )
paddle.argmax(Tensor([0, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmax(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmax(Tensor([0, 6],"float32"), axis=1, )
paddle.argmax(Tensor([4, 0],"float32"), axis=1, )
paddle.argmax(Tensor([0, 5, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmax(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmax(Tensor([0],"float32"), 0, )
paddle.argmin(Tensor([0, 10],"float32"), )
paddle.argmin(Tensor([10, 0],"float32"), )
paddle.argmin(Tensor([0, 10],"float32"), axis=1, )
paddle.argmin(Tensor([10, 0],"float32"), axis=1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([0, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([10, 0],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([0, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 0, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 0, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 0, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 0, 3],"float64"), axis=0, )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 0],"float64"), axis=0, )
paddle.argmin(Tensor([0, 5],"float32"), )
paddle.argmin(Tensor([3, 0],"float32"), )
paddle.argmin(Tensor([0, 5],"float32"), keepdim=True, )
paddle.argmin(Tensor([3, 0],"float32"), keepdim=True, )
paddle.argmin(Tensor([0, 4, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 0, 4, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 0, 4, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 0, 4],"float64"), axis=0, )
paddle.argmin(Tensor([4, 4, 4, 4, 0],"float64"), axis=0, )
paddle.argmin(Tensor([0, 5, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 0, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 0, 5],"float64"), axis=0, )
paddle.argmin(Tensor([5, 5, 5, 0],"float64"), axis=0, )
paddle.argmin(Tensor([0],"float32"), 0, )
paddle.argsort(Tensor([0, 10000],"float64"), axis=1, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, )
paddle.argsort(Tensor([0, 10000],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([0, 30],"float64"), axis=1, descending=True, stable=True, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, descending=True, stable=True, )
paddle.argsort(Tensor([0, 30],"float64"), axis=1, stable=True, )
paddle.argsort(Tensor([1, 0],"float64"), axis=1, stable=True, )
paddle.argsort(Tensor([0],"int64"), )
paddle.argsort(Tensor([0, 10],"float32"), descending=True, )
paddle.argsort(Tensor([1000, 0],"float32"), descending=True, )
paddle.argsort(Tensor([0, 5],"float32"), descending=True, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, )
paddle.argsort(Tensor([10000, 0],"float64"), axis=0, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([10000, 0],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, )
paddle.argsort(Tensor([0],"float64"), axis=0, descending=True, )
paddle.argsort(Tensor([0],"float32"), descending=True, )
paddle.argsort(Tensor([0],"float16"), stable=True, )
paddle.argsort(Tensor([0],"float32"), stable=True, )
paddle.argsort(Tensor([0],"float64"), stable=True, )
paddle.argsort(Tensor([0],"int32"), stable=True, )
paddle.argsort(Tensor([0],"int64"), stable=True, )
paddle.argsort(Tensor([0, 100],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([2, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=1, )
paddle.argsort(Tensor([2, 0, 4],"float64"), axis=1, )
paddle.argsort(Tensor([2, 3, 0],"float64"), axis=1, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([2, 0, 4],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([2, 3, 0],"float64"), axis=1, descending=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), descending=True, )
paddle.argsort(Tensor([2, 0, 4],"float64"), descending=True, )
paddle.argsort(Tensor([2, 3, 0],"float64"), descending=True, )
paddle.argsort(Tensor([0],"bfloat16"), stable=True, )
paddle.argsort(Tensor([0, 10],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 10000],"float32"), descending=True, )
paddle.argsort(Tensor([3, 0],"float32"), descending=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 4, 2],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([3, 0, 2],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([3, 4, 0],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([0, 4],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 0],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([0, 4],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([30, 0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0, 1],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([30, 0],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([36, 0],"float32"), descending=True, )
paddle.argsort(Tensor([0, 4],"float64"), descending=True, )
paddle.argsort(Tensor([4, 0],"float64"), descending=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([40, 0, 4],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([40, 3, 0],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([0, 3, 4],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([40, 0, 4],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([40, 3, 0],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([5, 0],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([5, 0],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([64, 0],"float32"), descending=True, )
paddle.argsort(Tensor([8, 0],"float32"), descending=True, )
paddle.as_complex(Tensor([0, 10, 10, 2],"float32"), )
paddle.as_complex(Tensor([10, 0, 10, 2],"float32"), )
paddle.as_complex(Tensor([10, 10, 0, 2],"float32"), )
paddle.as_complex(Tensor([10, 10, 10, 0],"float32"), )
paddle.as_complex(Tensor([0, 10, 2],"float64"), )
paddle.as_complex(Tensor([10, 0, 2],"float64"), )
paddle.as_complex(Tensor([10, 10, 0],"float64"), )
paddle.as_complex(Tensor([0, 4, 2],"float32"), )
paddle.as_complex(Tensor([2, 0, 2],"float32"), )
paddle.as_complex(Tensor([2, 4, 0],"float32"), )
paddle.as_complex(Tensor([0, 4, 2],"float64"), )
paddle.as_complex(Tensor([2, 0, 2],"float64"), )
paddle.as_complex(Tensor([2, 4, 0],"float64"), )
paddle.as_complex(Tensor([0],"float32"), )
paddle.as_real(Tensor([0, 10, 10, 20],"complex128"), )
paddle.as_real(Tensor([10, 0, 10, 20],"complex128"), )
paddle.as_real(Tensor([10, 10, 0, 20],"complex128"), )
paddle.as_real(Tensor([10, 10, 10, 0],"complex128"), )
paddle.as_real(Tensor([0, 10],"complex128"), )
paddle.as_real(Tensor([10, 0],"complex128"), )
paddle.as_real(Tensor([0, 4],"complex128"), )
paddle.as_real(Tensor([2, 0],"complex128"), )
paddle.as_real(Tensor([0, 4],"complex64"), )
paddle.as_real(Tensor([2, 0],"complex64"), )
paddle.as_real(Tensor([0, 45],"complex64"), )
paddle.as_real(Tensor([201, 0],"complex64"), )
paddle.as_strided(Tensor([0, 3],"float32"), list[15,3,], list[2,], 0, )
paddle.as_strided(Tensor([15, 0],"float32"), list[15,3,], list[2,], 0, )
paddle.as_strided(Tensor([0, 3],"float32"), list[15,3,], list[3,1,], 0, )
paddle.as_strided(Tensor([15, 0],"float32"), list[15,3,], list[3,1,], 0, )
paddle.as_strided(Tensor([0, 3],"float32"), list[20,], list[1,], 0, )
paddle.as_strided(Tensor([15, 0],"float32"), list[20,], list[1,], 0, )
paddle.as_strided(Tensor([0, 3],"float32"), list[20,], list[2,], 0, )
paddle.as_strided(Tensor([15, 0],"float32"), list[20,], list[2,], 0, )
paddle.as_strided(Tensor([0, 4, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([2, 0, 6],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([2, 4, 0],"float32"), list[8,6,], list[6,1,], )
paddle.as_strided(Tensor([0, 32],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"float16"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"float16"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 32],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"float32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"float32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 32],"float64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"float64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"float64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"float64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 32],"int32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"int32"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"int32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"int32"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 32],"int64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([32, 0],"int64"), shape=tuple(3,), stride=tuple(1,), )
paddle.as_strided(Tensor([0, 32],"int64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([32, 0],"int64"), shape=tuple(3,4,), stride=tuple(32,1,), )
paddle.as_strided(Tensor([0, 3],"float16"), list[3,8,], list[2,2,], 0, )
paddle.as_strided(Tensor([6, 0],"float16"), list[3,8,], list[2,2,], 0, )
paddle.as_strided(Tensor([0, 3],"float16"), list[3,8,], list[8,1,], 0, )
paddle.as_strided(Tensor([6, 0],"float16"), list[3,8,], list[8,1,], 0, )
paddle.as_strided(Tensor([0, 3],"float16"), list[6,3,], list[2,2,], 0, )
paddle.as_strided(Tensor([6, 0],"float16"), list[6,3,], list[2,2,], 0, )
paddle.as_strided(Tensor([0, 3],"float16"), list[6,3,], list[3,1,], 0, )
paddle.as_strided(Tensor([6, 0],"float16"), list[6,3,], list[3,1,], 0, )
paddle.asin(Tensor([0, 20, 1],"float32"), )
paddle.asin(Tensor([10, 0, 1],"float32"), )
paddle.asin(Tensor([10, 20, 0],"float32"), )
paddle.asin(Tensor([0, 3],"float32"), )
paddle.asin(Tensor([2, 0],"float32"), )
paddle.asin(Tensor([0, 16, 32],"complex128"), )
paddle.asin(Tensor([8, 0, 32],"complex128"), )
paddle.asin(Tensor([8, 16, 0],"complex128"), )
paddle.asin(Tensor([0, 16, 32],"complex64"), )
paddle.asin(Tensor([8, 0, 32],"complex64"), )
paddle.asin(Tensor([8, 16, 0],"complex64"), )
paddle.asin(Tensor([0, 16, 32],"float16"), )
paddle.asin(Tensor([8, 0, 32],"float16"), )
paddle.asin(Tensor([8, 16, 0],"float16"), )
paddle.asin(Tensor([0, 16, 32],"float32"), )
paddle.asin(Tensor([8, 0, 32],"float32"), )
paddle.asin(Tensor([8, 16, 0],"float32"), )
paddle.asin(Tensor([0, 16, 32],"float64"), )
paddle.asin(Tensor([8, 0, 32],"float64"), )
paddle.asin(Tensor([8, 16, 0],"float64"), )
paddle.asinh(Tensor([0, 20, 1],"float32"), )
paddle.asinh(Tensor([10, 0, 1],"float32"), )
paddle.asinh(Tensor([10, 20, 0],"float32"), )
paddle.asinh(Tensor([0, 3],"float32"), )
paddle.asinh(Tensor([2, 0],"float32"), )
paddle.asinh(Tensor([0, 16, 32],"complex128"), )
paddle.asinh(Tensor([8, 0, 32],"complex128"), )
paddle.asinh(Tensor([8, 16, 0],"complex128"), )
paddle.asinh(Tensor([0, 16, 32],"complex64"), )
paddle.asinh(Tensor([8, 0, 32],"complex64"), )
paddle.asinh(Tensor([8, 16, 0],"complex64"), )
paddle.asinh(Tensor([0, 16, 32],"float16"), )
paddle.asinh(Tensor([8, 0, 32],"float16"), )
paddle.asinh(Tensor([8, 16, 0],"float16"), )
paddle.asinh(Tensor([0, 16, 32],"float32"), )
paddle.asinh(Tensor([8, 0, 32],"float32"), )
paddle.asinh(Tensor([8, 16, 0],"float32"), )
paddle.asinh(Tensor([0, 16, 32],"float64"), )
paddle.asinh(Tensor([8, 0, 32],"float64"), )
paddle.asinh(Tensor([8, 16, 0],"float64"), )
paddle.atan(Tensor([0],"float32"), name="Cauchy_cdf", )
paddle.atan(Tensor([0],"float64"), name="Cauchy_cdf", )
paddle.atan(Tensor([0, 20, 1],"float32"), )
paddle.atan(Tensor([10, 0, 1],"float32"), )
paddle.atan(Tensor([10, 20, 0],"float32"), )
paddle.atan(Tensor([0, 3],"float32"), )
paddle.atan(Tensor([2, 0],"float32"), )
paddle.atan(Tensor([0, 16, 32],"complex128"), )
paddle.atan(Tensor([8, 0, 32],"complex128"), )
paddle.atan(Tensor([8, 16, 0],"complex128"), )
paddle.atan(Tensor([0, 16, 32],"complex64"), )
paddle.atan(Tensor([8, 0, 32],"complex64"), )
paddle.atan(Tensor([8, 16, 0],"complex64"), )
paddle.atan(Tensor([0, 16, 32],"float16"), )
paddle.atan(Tensor([8, 0, 32],"float16"), )
paddle.atan(Tensor([8, 16, 0],"float16"), )
paddle.atan(Tensor([0, 16, 32],"float32"), )
paddle.atan(Tensor([8, 0, 32],"float32"), )
paddle.atan(Tensor([8, 16, 0],"float32"), )
paddle.atan(Tensor([0, 16, 32],"float64"), )
paddle.atan(Tensor([8, 0, 32],"float64"), )
paddle.atan(Tensor([8, 16, 0],"float64"), )
paddle.atan2(Tensor([0],"float64"), Tensor([100, 100],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([0, 100],"float64"), )
paddle.atan2(Tensor([100],"float64"), Tensor([100, 0],"float64"), )
paddle.atan2(Tensor([0, 17],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(Tensor([11, 0],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([11, 0],"float64"), )
paddle.atan2(Tensor([0, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.atan2(Tensor([11, 0],"float64"), Tensor([11, 0],"float64"), )
paddle.atan2(Tensor([0, 222, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([111, 0, 333],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 0],"float64"), Tensor([222, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([0, 333],"float64"), )
paddle.atan2(Tensor([111, 222, 333],"float64"), Tensor([222, 0],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.atan2(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.atan2(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.atan2(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.atan2(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.atan2(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.atan2(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.atan2(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.atan2(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.atanh(Tensor([0, 20, 1],"float32"), )
paddle.atanh(Tensor([10, 0, 1],"float32"), )
paddle.atanh(Tensor([10, 20, 0],"float32"), )
paddle.atanh(Tensor([0, 3],"float32"), )
paddle.atanh(Tensor([2, 0],"float32"), )
paddle.atanh(Tensor([0, 16, 32],"complex128"), )
paddle.atanh(Tensor([8, 0, 32],"complex128"), )
paddle.atanh(Tensor([8, 16, 0],"complex128"), )
paddle.atanh(Tensor([0, 16, 32],"complex64"), )
paddle.atanh(Tensor([8, 0, 32],"complex64"), )
paddle.atanh(Tensor([8, 16, 0],"complex64"), )
paddle.atanh(Tensor([0, 16, 32],"float16"), )
paddle.atanh(Tensor([8, 0, 32],"float16"), )
paddle.atanh(Tensor([8, 16, 0],"float16"), )
paddle.atanh(Tensor([0, 16, 32],"float32"), )
paddle.atanh(Tensor([8, 0, 32],"float32"), )
paddle.atanh(Tensor([8, 16, 0],"float32"), )
paddle.atanh(Tensor([0, 16, 32],"float64"), )
paddle.atanh(Tensor([8, 0, 32],"float64"), )
paddle.atanh(Tensor([8, 16, 0],"float64"), )
paddle.bernoulli(Tensor([0, 1000],"float32"), )
paddle.bernoulli(Tensor([100, 0],"float32"), )
paddle.bernoulli(Tensor([0, 1024],"float32"), )
paddle.bernoulli(Tensor([1024, 0],"float32"), )
paddle.bernoulli(Tensor([0, 1024],"float32"), p=0.3917133774091194, )
paddle.bernoulli(Tensor([1024, 0],"float32"), p=0.3917133774091194, )
paddle.bernoulli(Tensor([0, 1024, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 0, 1024],"float32"), )
paddle.bernoulli(Tensor([32, 1024, 0],"float32"), )
paddle.bernoulli(Tensor([0, 1024, 1024],"float64"), )
paddle.bernoulli(Tensor([32, 0, 1024],"float64"), )
paddle.bernoulli(Tensor([32, 1024, 0],"float64"), )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(Tensor([16],"int32"), weights=Tensor([0],"float32"), )
paddle.bincount(Tensor([0],"int32"), weights=Tensor([0],"float32"), )
paddle.bincount(Tensor([0],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([0],"int32"), )
paddle.bincount(Tensor([0],"int64"), minlength=Tensor([0],"int32"), )
paddle.bincount(Tensor([0],"int64"), )
paddle.bitwise_and(Tensor([0, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 0, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_and(Tensor([0, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_and(Tensor([0, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 0, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_and(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([1],"int16"), )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([1],"int16"), False, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([300],"int64"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([0],"int64"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int64"), Tensor([0],"int64"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([300],"int8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([0],"int8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([300],"uint8"), )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0, 300],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 0],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([200, 300],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 0, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 0, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 0, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 0],"int32"), True, )
paddle.bitwise_left_shift(Tensor([0, 4, 5],"int32"), Tensor([0, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 0, 5],"int32"), Tensor([3, 0, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), True, )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_left_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_left_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_left_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_left_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_left_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_left_shift(Tensor([0],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_left_shift(Tensor([300],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_left_shift(Tensor([0],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_left_shift(Tensor([300],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_left_shift(Tensor([0],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_left_shift(Tensor([300],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_left_shift(Tensor([0],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_left_shift(Tensor([300],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_left_shift(Tensor([300],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_left_shift(Tensor([0],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([300],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_not(Tensor([0, 3, 5],"int32"), )
paddle.bitwise_not(Tensor([2, 0, 5],"int32"), )
paddle.bitwise_not(Tensor([2, 3, 0],"int32"), )
paddle.bitwise_not(Tensor([0, 4, 1],"int32"), )
paddle.bitwise_not(Tensor([3, 0, 1],"int32"), )
paddle.bitwise_not(Tensor([3, 4, 0],"int32"), )
paddle.bitwise_or(Tensor([0, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 0, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_or(Tensor([0, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_or(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_or(Tensor([0, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 0, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([1],"int8"), )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([0],"int8"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([0],"int8"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([1],"int8"), False, )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int16"), Tensor([300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int16"), Tensor([0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int32"), Tensor([300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int32"), Tensor([0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([300],"int64"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([0],"int64"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int64"), Tensor([300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int64"), Tensor([0],"int64"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([300],"int8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([0],"int8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"int8"), Tensor([300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"int8"), Tensor([0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([300],"uint8"), )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0, 300],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 0],"uint8"), Tensor([300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([200, 300],"uint8"), Tensor([0],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), )
paddle.bitwise_right_shift(Tensor([0],"int16"), Tensor([200, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([0, 300],"int16"), False, )
paddle.bitwise_right_shift(Tensor([300],"int16"), Tensor([200, 0],"int16"), False, )
paddle.bitwise_right_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), )
paddle.bitwise_right_shift(Tensor([0],"int32"), Tensor([200, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([0, 300],"int32"), False, )
paddle.bitwise_right_shift(Tensor([300],"int32"), Tensor([200, 0],"int32"), False, )
paddle.bitwise_right_shift(Tensor([0],"int64"), Tensor([200, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([0, 300],"int64"), )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([200, 0],"int64"), )
paddle.bitwise_right_shift(Tensor([0],"int64"), Tensor([200, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([0, 300],"int64"), False, )
paddle.bitwise_right_shift(Tensor([300],"int64"), Tensor([200, 0],"int64"), False, )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([200, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([0, 300],"int8"), )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([200, 0],"int8"), )
paddle.bitwise_right_shift(Tensor([0],"int8"), Tensor([200, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([0, 300],"int8"), False, )
paddle.bitwise_right_shift(Tensor([300],"int8"), Tensor([200, 0],"int8"), False, )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([200, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([300],"uint8"), Tensor([0, 300],"uint8"), )
paddle.bitwise_right_shift(Tensor([300],"uint8"), Tensor([200, 0],"uint8"), )
paddle.bitwise_right_shift(Tensor([0],"uint8"), Tensor([200, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([300],"uint8"), Tensor([0, 300],"uint8"), False, )
paddle.bitwise_right_shift(Tensor([300],"uint8"), Tensor([200, 0],"uint8"), False, )
paddle.bitwise_xor(Tensor([0, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 0, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_xor(Tensor([0, 3, 5],"int32"), Tensor([0, 3, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 0, 5],"int32"), Tensor([2, 0, 5],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 0],"int32"), Tensor([2, 3, 0],"int32"), )
paddle.bitwise_xor(Tensor([0, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 0, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bitwise_xor(Tensor([0, 4, 1],"int32"), Tensor([0, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 0, 1],"int32"), Tensor([3, 0, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 0],"int32"), Tensor([3, 4, 0],"int32"), )
paddle.bmm(Tensor([0, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), )
paddle.bmm(Tensor([2, 0, 3],"float32"), Tensor([2, 3, 2],"float32"), )
paddle.bmm(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 2],"float32"), )
paddle.bmm(Tensor([2, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.bmm(Tensor([2, 2, 3],"float32"), Tensor([2, 0, 2],"float32"), )
paddle.bmm(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.bmm(Tensor([0, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), )
paddle.bmm(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 2],"float32"), )
paddle.bmm(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.bmm(Tensor([0, 40, 50],"float32"), Tensor([30, 50, 60],"float32"), )
paddle.bmm(Tensor([30, 0, 50],"float32"), Tensor([30, 50, 60],"float32"), )
paddle.bmm(Tensor([30, 40, 0],"float32"), Tensor([30, 50, 60],"float32"), )
paddle.bmm(Tensor([30, 40, 50],"float32"), Tensor([0, 50, 60],"float32"), )
paddle.bmm(Tensor([30, 40, 50],"float32"), Tensor([30, 0, 60],"float32"), )
paddle.bmm(Tensor([30, 40, 50],"float32"), Tensor([30, 50, 0],"float32"), )
paddle.bmm(Tensor([0, 40, 50],"float32"), Tensor([0, 50, 60],"float32"), )
paddle.bmm(Tensor([30, 0, 50],"float32"), Tensor([30, 0, 60],"float32"), )
paddle.bmm(Tensor([30, 40, 0],"float32"), Tensor([30, 50, 0],"float32"), )
paddle.broadcast_to(Tensor([0, 1, 1, 1],"int32"), tuple(10,10,1,10,), )
paddle.broadcast_to(Tensor([1, 0, 1, 1],"int32"), tuple(10,10,1,10,), )
paddle.broadcast_to(Tensor([1, 1, 0, 1],"int32"), tuple(10,10,1,10,), )
paddle.broadcast_to(Tensor([1, 1, 1, 0],"int32"), tuple(10,10,1,10,), )
paddle.broadcast_to(Tensor([0, 1, 3],"int64"), tuple(3,2,3,), )
paddle.broadcast_to(Tensor([1, 0, 3],"int64"), tuple(3,2,3,), )
paddle.broadcast_to(Tensor([1, 1, 0],"int64"), tuple(3,2,3,), )
paddle.broadcast_to(Tensor([0, 1, 6],"bool"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 0, 6],"bool"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 1, 0],"bool"), list[4,5,6,], )
paddle.broadcast_to(Tensor([0, 1, 6],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 0, 6],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 1, 0],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(1,3,), )
paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(1,3,), )
paddle.broadcast_to(Tensor([0, 3, 2],"int64"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([1, 0, 2],"int64"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([1, 3, 0],"int64"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([0, 3, 4],"int32"), tuple(1,3,4,), )
paddle.broadcast_to(Tensor([1, 0, 4],"int32"), tuple(1,3,4,), )
paddle.broadcast_to(Tensor([1, 3, 0],"int32"), tuple(1,3,4,), )
paddle.broadcast_to(Tensor([0, 3],"bool"), list[3,3,], )
paddle.broadcast_to(Tensor([1, 0],"bool"), list[3,3,], )
paddle.broadcast_to(Tensor([0, 3],"float32"), tuple(1,3,), )
paddle.broadcast_to(Tensor([1, 0],"float32"), tuple(1,3,), )
paddle.broadcast_to(Tensor([0, 3],"int32"), tuple(1,3,), )
paddle.broadcast_to(Tensor([1, 0],"int32"), tuple(1,3,), )
paddle.broadcast_to(Tensor([0, 3],"int64"), tuple(1,3,), )
paddle.broadcast_to(Tensor([0, 3],"int64"), tuple(3,3,), )
paddle.broadcast_to(Tensor([1, 0],"int64"), tuple(3,3,), )
paddle.broadcast_to(Tensor([0, 5, 1],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 0, 1],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([1, 5, 0],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([0, 5, 5],"int32"), tuple(1,5,5,), )
paddle.broadcast_to(Tensor([1, 0, 5],"int32"), tuple(1,5,5,), )
paddle.broadcast_to(Tensor([1, 5, 0],"int32"), tuple(1,5,5,), )
paddle.broadcast_to(Tensor([0, 5, 6],"float64"), list[4,5,6,], )
paddle.broadcast_to(Tensor([0],"float16"), list[168,], )
paddle.broadcast_to(Tensor([0],"float16"), list[3,40,], )
paddle.broadcast_to(Tensor([0],"float16"), list[300,40,], )
paddle.broadcast_to(Tensor([0],"float16"), list[6,8,9,18,], )
paddle.broadcast_to(Tensor([0],"float32"), list[1,1,], )
paddle.broadcast_to(Tensor([0],"float32"), list[128,1,], )
paddle.broadcast_to(Tensor([0],"float32"), list[168,], )
paddle.broadcast_to(Tensor([0],"float32"), list[3,3,], )
paddle.broadcast_to(Tensor([0],"float32"), list[3,40,], )
paddle.broadcast_to(Tensor([0],"float32"), list[300,120,], )
paddle.broadcast_to(Tensor([0],"float32"), list[300,40,], )
paddle.broadcast_to(Tensor([0],"float32"), list[50,3,], )
paddle.broadcast_to(Tensor([0],"float32"), list[6,8,9,18,], )
paddle.broadcast_to(Tensor([0],"float32"), tuple(1,), )
paddle.broadcast_to(Tensor([0],"float64"), list[1,1,2048,2048,], )
paddle.broadcast_to(Tensor([0],"float64"), list[10,10,5,], )
paddle.broadcast_to(Tensor([0],"float64"), list[4,], )
paddle.broadcast_to(Tensor([0],"float64"), shape=tuple(1,), )
paddle.broadcast_to(Tensor([0],"float64"), shape=tuple(5000,1,), )
paddle.broadcast_to(Tensor([0],"int32"), list[6,], )
paddle.broadcast_to(Tensor([0],"int32"), tuple(1,), )
paddle.broadcast_to(Tensor([0],"int64"), list[1,], )
paddle.broadcast_to(Tensor([0],"int64"), list[2,100,], )
paddle.broadcast_to(Tensor([0],"int64"), list[3,10,], )
paddle.broadcast_to(Tensor([0],"int64"), list[3,4,], )
paddle.broadcast_to(Tensor([0],"int64"), list[3,4,2,], )
paddle.broadcast_to(Tensor([0],"int64"), list[5,4,], )
paddle.broadcast_to(Tensor([0, 1, 1],"float32"), list[10,20,1,], )
paddle.broadcast_to(Tensor([10, 0, 1],"float32"), list[10,20,1,], )
paddle.broadcast_to(Tensor([10, 1, 0],"float32"), list[10,20,1,], )
paddle.broadcast_to(Tensor([0, 1, 10],"float16"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 0, 10],"float16"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 1, 0],"float16"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([0, 1, 10],"float32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 0, 10],"float32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 1, 0],"float32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([0, 1, 10],"float64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 0, 10],"float64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 1, 0],"float64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([0, 1, 10],"int32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 0, 10],"int32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 1, 0],"int32"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([0, 1, 10],"int64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 0, 10],"int64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([10, 1, 0],"int64"), tuple(10,1,10,), )
paddle.broadcast_to(Tensor([0, 20],"int32"), list[10,20,], )
paddle.broadcast_to(Tensor([10, 0],"int32"), list[10,20,], )
paddle.broadcast_to(Tensor([0],"float32"), list[84,10,], )
paddle.broadcast_to(Tensor([0, 100],"float64"), list[100,100,], )
paddle.broadcast_to(Tensor([100, 0],"float64"), list[100,100,], )
paddle.broadcast_to(Tensor([0],"float64"), list[100,100,], )
paddle.broadcast_to(Tensor([0, 222, 333],"float64"), list[111,222,333,], )
paddle.broadcast_to(Tensor([111, 0, 333],"float64"), list[111,222,333,], )
paddle.broadcast_to(Tensor([111, 222, 0],"float64"), list[111,222,333,], )
paddle.broadcast_to(Tensor([0],"float32"), list[400,120,], )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(128,1,), )
paddle.broadcast_to(Tensor([128, 0],"int64"), tuple(128,1,), )
paddle.broadcast_to(Tensor([0, 8],"float32"), tuple(128,8,), )
paddle.broadcast_to(Tensor([128, 0],"float32"), tuple(128,8,), )
paddle.broadcast_to(Tensor([0],"float32"), list[150,16,], )
paddle.broadcast_to(Tensor([0],"float64"), tuple(168,), )
paddle.broadcast_to(Tensor([0, 1, 4],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 4],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 1, 0],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0, 1, 4],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 4],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 1, 0],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0, 1],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 0],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0, 1],"int32"), tuple(2,1,), )
paddle.broadcast_to(Tensor([2, 0],"int32"), tuple(2,1,), )
paddle.broadcast_to(Tensor([0, 2, 1],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 1],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 2, 0],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0, 2, 1],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 1],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([2, 2, 0],"float32"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0, 2, 1],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 1],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([2, 2, 0],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([0, 2, 4],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([2, 0, 4],"float32"), list[3,2,2,4,], )
paddle.broadcast_to(Tensor([0, 2],"bool"), list[1,2,2,], )
paddle.broadcast_to(Tensor([2, 0],"bool"), list[1,2,2,], )
paddle.broadcast_to(Tensor([0, 2],"bool"), list[2,2,], )
paddle.broadcast_to(Tensor([2, 0],"bool"), list[2,2,], )
paddle.broadcast_to(Tensor([0, 2],"float32"), tuple(2,2,), )
paddle.broadcast_to(Tensor([2, 0],"float32"), tuple(2,2,), )
paddle.broadcast_to(Tensor([0, 2],"int64"), tuple(2,2,), )
paddle.broadcast_to(Tensor([2, 0],"int64"), tuple(2,2,), )
paddle.broadcast_to(Tensor([0, 3, 4],"float64"), tuple(2,3,4,), )
paddle.broadcast_to(Tensor([2, 0, 4],"float64"), tuple(2,3,4,), )
paddle.broadcast_to(Tensor([2, 3, 0],"float64"), tuple(2,3,4,), )
paddle.broadcast_to(Tensor([0, 3],"float32"), tuple(2,3,), )
paddle.broadcast_to(Tensor([2, 0],"float32"), tuple(2,3,), )
paddle.broadcast_to(Tensor([0, 3],"float64"), tuple(2,3,), )
paddle.broadcast_to(Tensor([2, 0],"float64"), tuple(2,3,), )
paddle.broadcast_to(Tensor([0, 4],"bool"), list[2,2,4,], )
paddle.broadcast_to(Tensor([0],"float32"), shape=tuple(2,), )
paddle.broadcast_to(Tensor([0],"float32"), shape=tuple(5000,2,), )
paddle.broadcast_to(Tensor([0, 333],"float64"), list[111,222,333,], )
paddle.broadcast_to(Tensor([222, 0],"float64"), list[111,222,333,], )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(28,1,), )
paddle.broadcast_to(Tensor([28, 0],"int64"), tuple(28,1,), )
paddle.broadcast_to(Tensor([0, 5],"float32"), tuple(28,5,), )
paddle.broadcast_to(Tensor([28, 0],"float32"), tuple(28,5,), )
paddle.broadcast_to(Tensor([0, 1],"bool"), list[3,40,], )
paddle.broadcast_to(Tensor([3, 0],"bool"), list[3,40,], )
paddle.broadcast_to(Tensor([0, 2, 5],"float32"), tuple(3,2,5,), )
paddle.broadcast_to(Tensor([3, 0, 5],"float32"), tuple(3,2,5,), )
paddle.broadcast_to(Tensor([3, 2, 0],"float32"), tuple(3,2,5,), )
paddle.broadcast_to(Tensor([0, 2],"int64"), tuple(3,2,), )
paddle.broadcast_to(Tensor([3, 0],"int64"), tuple(3,2,), )
paddle.broadcast_to(Tensor([0, 3],"float32"), tuple(3,3,), )
paddle.broadcast_to(Tensor([3, 0],"float32"), tuple(3,3,), )
paddle.broadcast_to(Tensor([0, 5],"float32"), tuple(3,5,), )
paddle.broadcast_to(Tensor([3, 0],"float32"), tuple(3,5,), )
paddle.broadcast_to(Tensor([0, 5],"float64"), tuple(3,5,), )
paddle.broadcast_to(Tensor([3, 0],"float64"), tuple(3,5,), )
paddle.broadcast_to(Tensor([0],"bool"), list[4,3,], )
paddle.broadcast_to(Tensor([0],"float32"), tuple(3,), )
paddle.broadcast_to(Tensor([0, 1],"bool"), list[30,3,], )
paddle.broadcast_to(Tensor([30, 0],"bool"), list[30,3,], )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(30,1,), )
paddle.broadcast_to(Tensor([30, 0],"int64"), tuple(30,1,), )
paddle.broadcast_to(Tensor([0, 5],"float32"), tuple(30,5,), )
paddle.broadcast_to(Tensor([30, 0],"float32"), tuple(30,5,), )
paddle.broadcast_to(Tensor([0, 1],"float16"), list[300,40,], )
paddle.broadcast_to(Tensor([300, 0],"float16"), list[300,40,], )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(38,1,), )
paddle.broadcast_to(Tensor([38, 0],"int64"), tuple(38,1,), )
paddle.broadcast_to(Tensor([0, 5],"float32"), tuple(38,5,), )
paddle.broadcast_to(Tensor([38, 0],"float32"), tuple(38,5,), )
paddle.broadcast_to(Tensor([0, 1, 6],"int32"), tuple(4,1,6,), )
paddle.broadcast_to(Tensor([4, 0, 6],"int32"), tuple(4,1,6,), )
paddle.broadcast_to(Tensor([4, 1, 0],"int32"), tuple(4,1,6,), )
paddle.broadcast_to(Tensor([0, 1],"int32"), tuple(4,1,), )
paddle.broadcast_to(Tensor([4, 0],"int32"), tuple(4,1,), )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(4,1,), )
paddle.broadcast_to(Tensor([4, 0],"int64"), tuple(4,1,), )
paddle.broadcast_to(Tensor([0, 2],"float32"), list[4,2,], )
paddle.broadcast_to(Tensor([4, 0],"float32"), list[4,2,], )
paddle.broadcast_to(Tensor([0, 2],"float32"), tuple(4,2,), )
paddle.broadcast_to(Tensor([4, 0],"float32"), tuple(4,2,), )
paddle.broadcast_to(Tensor([0, 2],"int64"), list[4,2,], )
paddle.broadcast_to(Tensor([4, 0],"int64"), list[4,2,], )
paddle.broadcast_to(Tensor([0, 3, 2],"float32"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([4, 0, 2],"float32"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([4, 3, 0],"float32"), tuple(4,3,2,), )
paddle.broadcast_to(Tensor([0, 3],"float32"), tuple(4,3,), )
paddle.broadcast_to(Tensor([4, 0],"float32"), tuple(4,3,), )
paddle.broadcast_to(Tensor([0, 42],"float64"), tuple(4,42,), )
paddle.broadcast_to(Tensor([4, 0],"float64"), tuple(4,42,), )
paddle.broadcast_to(Tensor([0, 7, 1],"int32"), tuple(4,7,1,), )
paddle.broadcast_to(Tensor([4, 0, 1],"int32"), tuple(4,7,1,), )
paddle.broadcast_to(Tensor([4, 7, 0],"int32"), tuple(4,7,1,), )
paddle.broadcast_to(Tensor([0, 7, 6],"float64"), tuple(4,7,6,), )
paddle.broadcast_to(Tensor([4, 0, 6],"float64"), tuple(4,7,6,), )
paddle.broadcast_to(Tensor([4, 7, 0],"float64"), tuple(4,7,6,), )
paddle.broadcast_to(Tensor([0, 7],"float32"), tuple(4,7,), )
paddle.broadcast_to(Tensor([4, 0],"float32"), tuple(4,7,), )
paddle.broadcast_to(Tensor([0, 7],"float64"), tuple(4,7,), )
paddle.broadcast_to(Tensor([4, 0],"float64"), tuple(4,7,), )
paddle.broadcast_to(Tensor([0],"bool"), list[300,40,], )
paddle.broadcast_to(Tensor([0, 1, 4],"int32"), tuple(5,1,4,), )
paddle.broadcast_to(Tensor([5, 0, 4],"int32"), tuple(5,1,4,), )
paddle.broadcast_to(Tensor([5, 1, 0],"int32"), tuple(5,1,4,), )
paddle.broadcast_to(Tensor([0, 1],"int32"), tuple(5,1,), )
paddle.broadcast_to(Tensor([5, 0],"int32"), tuple(5,1,), )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(5,1,), )
paddle.broadcast_to(Tensor([5, 0],"int64"), tuple(5,1,), )
paddle.broadcast_to(Tensor([0, 12],"float64"), tuple(5,12,), )
paddle.broadcast_to(Tensor([5, 0],"float64"), tuple(5,12,), )
paddle.broadcast_to(Tensor([0, 17, 1, 6],"float64"), list[5,17,0,6,], )
paddle.broadcast_to(Tensor([5, 0, 1, 6],"float64"), list[5,17,0,6,], )
paddle.broadcast_to(Tensor([5, 17, 0, 6],"float64"), list[5,17,0,6,], )
paddle.broadcast_to(Tensor([5, 17, 1, 0],"float64"), list[5,17,0,6,], )
paddle.broadcast_to(Tensor([0, 17, 6],"float64"), list[0,5,17,6,], )
paddle.broadcast_to(Tensor([5, 0, 6],"float64"), list[0,5,17,6,], )
paddle.broadcast_to(Tensor([5, 17, 0],"float64"), list[0,5,17,6,], )
paddle.broadcast_to(Tensor([0, 17, 6],"float64"), list[5,17,6,], )
paddle.broadcast_to(Tensor([5, 0, 6],"float64"), list[5,17,6,], )
paddle.broadcast_to(Tensor([5, 17, 0],"float64"), list[5,17,6,], )
paddle.broadcast_to(Tensor([0, 2],"float32"), tuple(5,2,), )
paddle.broadcast_to(Tensor([5, 0],"float32"), tuple(5,2,), )
paddle.broadcast_to(Tensor([0, 3, 4],"float64"), tuple(5,3,4,), )
paddle.broadcast_to(Tensor([5, 0, 4],"float64"), tuple(5,3,4,), )
paddle.broadcast_to(Tensor([5, 3, 0],"float64"), tuple(5,3,4,), )
paddle.broadcast_to(Tensor([0, 5, 1],"int32"), tuple(5,5,1,), )
paddle.broadcast_to(Tensor([5, 0, 1],"int32"), tuple(5,5,1,), )
paddle.broadcast_to(Tensor([5, 5, 0],"int32"), tuple(5,5,1,), )
paddle.broadcast_to(Tensor([0, 5, 5],"float16"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 0, 5],"float16"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 5, 0],"float16"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([0, 5, 5],"float32"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 0, 5],"float32"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 5, 0],"float32"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([0, 5, 5],"float64"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 0, 5],"float64"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([5, 5, 0],"float64"), tuple(5,5,5,), )
paddle.broadcast_to(Tensor([0, 6, 1],"int64"), tuple(5,6,1,), )
paddle.broadcast_to(Tensor([5, 0, 1],"int64"), tuple(5,6,1,), )
paddle.broadcast_to(Tensor([5, 6, 0],"int64"), tuple(5,6,1,), )
paddle.broadcast_to(Tensor([0, 6, 7],"float32"), tuple(5,6,7,), )
paddle.broadcast_to(Tensor([5, 0, 7],"float32"), tuple(5,6,7,), )
paddle.broadcast_to(Tensor([5, 6, 0],"float32"), tuple(5,6,7,), )
paddle.broadcast_to(Tensor([0],"float32"), list[9,6,], )
paddle.broadcast_to(Tensor([0],"float32"), tuple(6,), )
paddle.broadcast_to(Tensor([0, 1327104],"float32"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([64, 0],"float32"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([0, 1327104],"int64"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([64, 0],"int64"), tuple(64,1327104,), )
paddle.broadcast_to(Tensor([0, 1],"int32"), tuple(7,1,), )
paddle.broadcast_to(Tensor([7, 0],"int32"), tuple(7,1,), )
paddle.broadcast_to(Tensor([0, 24],"float64"), tuple(7,24,), )
paddle.broadcast_to(Tensor([7, 0],"float64"), tuple(7,24,), )
paddle.broadcast_to(Tensor([0, 1],"int64"), tuple(8,1,), )
paddle.broadcast_to(Tensor([8, 0],"int64"), tuple(8,1,), )
paddle.broadcast_to(Tensor([0, 3],"float32"), tuple(8,3,), )
paddle.broadcast_to(Tensor([8, 0],"float32"), tuple(8,3,), )
paddle.broadcast_to(Tensor([0],"float32"), tuple(8,), )
paddle.broadcast_to(Tensor([0],"float32"), list[120,84,], )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([0],"float64"), )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([0],"float64"), out_int32=True, )
paddle.bucketize(Tensor([0, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.bucketize(Tensor([2, 0],"float64"), Tensor([4],"float64"), right=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([0],"float64"), right=True, )
paddle.ceil(Tensor([0, 3, 4],"float64"), )
paddle.ceil(Tensor([1, 0, 4],"float64"), )
paddle.ceil(Tensor([1, 3, 0],"float64"), )
paddle.ceil(Tensor([0, 3],"float64"), )
paddle.ceil(Tensor([1, 0],"float64"), )
paddle.ceil(Tensor([0],"float32"), )
paddle.ceil(Tensor([0],"float64"), )
paddle.ceil(Tensor([0, 1],"float32"), )
paddle.ceil(Tensor([2, 0],"float32"), )
paddle.ceil(Tensor([0, 3],"float32"), )
paddle.ceil(Tensor([0, 32, 128],"float32"), )
paddle.ceil(Tensor([32, 0, 128],"float32"), )
paddle.ceil(Tensor([32, 32, 0],"float32"), )
paddle.ceil(Tensor([0, 1, 6],"float64"), )
paddle.ceil(Tensor([4, 0, 6],"float64"), )
paddle.ceil(Tensor([4, 1, 0],"float64"), )
paddle.ceil(Tensor([4, 0],"float32"), )
paddle.ceil(Tensor([0, 1],"float64"), )
paddle.ceil(Tensor([4, 0],"float64"), )
paddle.ceil(Tensor([0, 7, 1],"float64"), )
paddle.ceil(Tensor([4, 0, 1],"float64"), )
paddle.ceil(Tensor([4, 7, 0],"float64"), )
paddle.ceil(Tensor([0, 1, 4],"float64"), )
paddle.ceil(Tensor([5, 0, 4],"float64"), )
paddle.ceil(Tensor([5, 1, 0],"float64"), )
paddle.ceil(Tensor([5, 0],"float64"), )
paddle.ceil(Tensor([7, 0],"float64"), )
paddle.chunk(Tensor([0, 1, 1, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 0, 1, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 0, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 1, 0],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([0, 1, 64, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 0, 64, 64],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([1, 1, 64, 0],"float16"), 2, axis=-1, )
paddle.chunk(Tensor([0, 6, 6],"bool"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 0, 6],"bool"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 6, 0],"bool"), chunks=3, axis=1, )
paddle.chunk(Tensor([0, 6, 6],"int32"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 0, 6],"int32"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 6, 0],"int32"), chunks=3, axis=1, )
paddle.chunk(Tensor([0, 6, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.chunk(Tensor([4, 0, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.chunk(Tensor([4, 6, 0],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([0],"int32"), )
paddle.clip(Tensor([0, 2, 2],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([1, 0, 2],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([1, 2, 0],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([0, 2],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([1, 0],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([0, 300, 4096],"float32"), 0, 1, )
paddle.clip(Tensor([1, 0, 4096],"float32"), 0, 1, )
paddle.clip(Tensor([1, 300, 0],"float32"), 0, 1, )
paddle.clip(Tensor([0, 2, 1],"float32"), min=1e-06, )
paddle.clip(Tensor([10, 0, 1],"float32"), min=1e-06, )
paddle.clip(Tensor([10, 2, 0],"float32"), min=1e-06, )
paddle.clip(Tensor([0, 2],"float32"), min=1e-06, )
paddle.clip(Tensor([10, 0],"float32"), min=1e-06, )
paddle.clip(Tensor([0, 2],"float64"), min=1e-06, )
paddle.clip(Tensor([10, 0],"float64"), min=1e-06, )
paddle.clip(Tensor([0],"float32"), min=0, )
paddle.clip(Tensor([0],"int64"), min=0, )
paddle.clip(Tensor([0, 128],"float32"), -8, 7, )
paddle.clip(Tensor([128, 0],"float32"), -8, 7, )
paddle.clip(Tensor([0, 256],"float16"), -127, 127, )
paddle.clip(Tensor([16, 0],"float16"), -127, 127, )
paddle.clip(Tensor([0, 256],"float64"), -127, 127, )
paddle.clip(Tensor([16, 0],"float64"), -127, 127, )
paddle.clip(Tensor([2, 0, 2],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([2, 2, 0],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([2, 0],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([0, 4096],"float16"), -126, 126, )
paddle.clip(Tensor([2, 0],"float16"), -126, 126, )
paddle.clip(Tensor([0, 8, 8],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([2, 0, 8],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([2, 8, 0],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([0],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([0, 28],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([28, 0],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([32, 0],"float16"), -127, 127, )
paddle.clip(Tensor([0, 4],"float32"), -1, 1, )
paddle.clip(Tensor([4, 0],"float32"), -1, 1, )
paddle.clip(Tensor([0, 4],"float64"), -1, 1, )
paddle.clip(Tensor([4, 0],"float64"), -1, 1, )
paddle.clip(Tensor([0, 2],"float64"), min=0.0, )
paddle.clip(Tensor([5, 0],"float64"), min=0.0, )
paddle.clip(Tensor([0, 5],"float32"), -1, 1, )
paddle.clip(Tensor([5, 0],"float32"), -1, 1, )
paddle.clip(Tensor([0, 5],"float64"), -1, 1, )
paddle.clip(Tensor([5, 0],"float64"), -1, 1, )
paddle.clip(Tensor([0],"float64"), min=0, )
paddle.clip(Tensor([0],"float64"), min=0.0, )
paddle.clip(Tensor([0, 8],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([8, 0],"float32"), 0.0, 1.0, )
paddle.clip(x=Tensor([0, 10],"float32"), min=-0.1, max=0.8, )
paddle.clip(x=Tensor([10, 0],"float32"), min=-0.1, max=0.8, )
paddle.clip(x=Tensor([0, 10],"float32"), min=-0.6, max=0.6, )
paddle.clip(x=Tensor([10, 0],"float32"), min=-0.6, max=0.6, )
paddle.clip(x=Tensor([0],"float32"), min=-0.1, max=0.1, )
paddle.clip(x=Tensor([0, 16],"float32"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([16, 0],"float32"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([0, 8, 16],"float32"), min=0.0, max=0.0, )
paddle.clip(x=Tensor([4, 0, 16],"float32"), min=0.0, max=0.0, )
paddle.clip(x=Tensor([4, 8, 0],"float32"), min=0.0, max=0.0, )
paddle.clip(x=Tensor([0, 5],"float32"), min=0.1, max=0.2, )
paddle.clip(x=Tensor([5, 0],"float32"), min=0.1, max=0.2, )
paddle.clip(x=Tensor([0],"float32"), min=0.1, max=0.2, )
paddle.clone(Tensor([0, 100, 256],"float32"), )
paddle.clone(Tensor([1, 0, 256],"float32"), )
paddle.clone(Tensor([1, 100, 0],"float32"), )
paddle.clone(Tensor([0, 100, 4],"float32"), )
paddle.clone(Tensor([1, 0, 4],"float32"), )
paddle.clone(Tensor([0, 100, 80],"float32"), )
paddle.clone(Tensor([1, 0, 80],"float32"), )
paddle.clone(Tensor([0, 10000, 1],"float32"), )
paddle.clone(Tensor([1, 0, 1],"float32"), )
paddle.clone(Tensor([1, 10000, 0],"float32"), )
paddle.clone(Tensor([0, 10000, 4],"float32"), )
paddle.clone(Tensor([0, 10000, 80],"float32"), )
paddle.clone(Tensor([0, 1024, 48, 72],"float32"), )
paddle.clone(Tensor([1, 0, 48, 72],"float32"), )
paddle.clone(Tensor([1, 1024, 0, 72],"float32"), )
paddle.clone(Tensor([1, 1024, 48, 0],"float32"), )
paddle.clone(Tensor([0, 12, 1, 64],"float32"), )
paddle.clone(Tensor([1, 0, 1, 64],"float32"), )
paddle.clone(Tensor([1, 12, 0, 64],"float32"), )
paddle.clone(Tensor([1, 12, 1, 0],"float32"), )
paddle.clone(Tensor([0, 12, 11, 16],"float32"), )
paddle.clone(Tensor([1, 0, 11, 16],"float32"), )
paddle.clone(Tensor([1, 12, 0, 16],"float32"), )
paddle.clone(Tensor([1, 12, 11, 0],"float32"), )
paddle.clone(Tensor([0, 12, 168, 256],"float32"), )
paddle.clone(Tensor([1, 0, 168, 256],"float32"), )
paddle.clone(Tensor([1, 12, 0, 256],"float32"), )
paddle.clone(Tensor([1, 12, 168, 0],"float32"), )
paddle.clone(Tensor([0, 12, 21, 32],"float32"), )
paddle.clone(Tensor([1, 0, 21, 32],"float32"), )
paddle.clone(Tensor([1, 12, 0, 32],"float32"), )
paddle.clone(Tensor([1, 12, 21, 0],"float32"), )
paddle.clone(Tensor([0, 12, 42, 64],"float32"), )
paddle.clone(Tensor([1, 0, 42, 64],"float32"), )
paddle.clone(Tensor([1, 12, 42, 0],"float32"), )
paddle.clone(Tensor([0, 12, 84, 128],"float32"), )
paddle.clone(Tensor([1, 0, 84, 128],"float32"), )
paddle.clone(Tensor([1, 12, 0, 128],"float32"), )
paddle.clone(Tensor([1, 12, 84, 0],"float32"), )
paddle.clone(Tensor([0, 128, 152, 272],"float32"), )
paddle.clone(Tensor([1, 0, 152, 272],"float32"), )
paddle.clone(Tensor([1, 128, 0, 272],"float32"), )
paddle.clone(Tensor([1, 128, 152, 0],"float32"), )
paddle.clone(Tensor([0, 144, 21, 32],"float32"), )
paddle.clone(Tensor([1, 144, 0, 32],"float32"), )
paddle.clone(Tensor([1, 144, 21, 0],"float32"), )
paddle.clone(Tensor([0, 15, 64, 64],"float32"), )
paddle.clone(Tensor([1, 0, 64, 64],"float32"), )
paddle.clone(Tensor([1, 15, 0, 64],"float32"), )
paddle.clone(Tensor([1, 15, 64, 0],"float32"), )
paddle.clone(Tensor([0, 171888, 1],"float32"), )
paddle.clone(Tensor([1, 171888, 0],"float32"), )
paddle.clone(Tensor([0, 171888, 4],"float32"), )
paddle.clone(Tensor([0, 18, 168, 256],"float32"), )
paddle.clone(Tensor([1, 18, 0, 256],"float32"), )
paddle.clone(Tensor([1, 18, 168, 0],"float32"), )
paddle.clone(Tensor([0, 192, 32, 32],"float32"), )
paddle.clone(Tensor([1, 0, 32, 32],"float32"), )
paddle.clone(Tensor([1, 192, 0, 32],"float32"), )
paddle.clone(Tensor([1, 192, 32, 0],"float32"), )
paddle.clone(Tensor([0, 192, 44, 44],"float32"), )
paddle.clone(Tensor([1, 0, 44, 44],"float32"), )
paddle.clone(Tensor([1, 192, 0, 44],"float32"), )
paddle.clone(Tensor([1, 192, 44, 0],"float32"), )
paddle.clone(Tensor([0, 192, 64, 64],"float32"), )
paddle.clone(Tensor([1, 192, 0, 64],"float32"), )
paddle.clone(Tensor([1, 192, 64, 0],"float32"), )
paddle.clone(Tensor([0, 2048, 24, 36],"float32"), )
paddle.clone(Tensor([1, 0, 24, 36],"float32"), )
paddle.clone(Tensor([1, 2048, 0, 36],"float32"), )
paddle.clone(Tensor([1, 2048, 24, 0],"float32"), )
paddle.clone(Tensor([0, 21504, 1],"float32"), )
paddle.clone(Tensor([1, 21504, 0],"float32"), )
paddle.clone(Tensor([0, 21504, 15],"float32"), )
paddle.clone(Tensor([1, 0, 15],"float32"), )
paddle.clone(Tensor([0, 21504, 2],"float32"), )
paddle.clone(Tensor([1, 0, 2],"float32"), )
paddle.clone(Tensor([0, 21504, 4],"float32"), )
paddle.clone(Tensor([0, 21504, 91],"float32"), )
paddle.clone(Tensor([1, 0, 91],"float32"), )
paddle.clone(Tensor([0, 2500, 1],"float32"), )
paddle.clone(Tensor([1, 2500, 0],"float32"), )
paddle.clone(Tensor([0, 2500, 4],"float32"), )
paddle.clone(Tensor([0, 2500, 80],"float32"), )
paddle.clone(Tensor([0, 2541, 4],"float32"), )
paddle.clone(Tensor([1, 2541, 0],"float32"), )
paddle.clone(Tensor([0, 2541, 68],"float32"), )
paddle.clone(Tensor([1, 0, 68],"float32"), )
paddle.clone(Tensor([0, 2541, 80],"float32"), )
paddle.clone(Tensor([0, 2541],"bool"), )
paddle.clone(Tensor([1, 0],"bool"), )
paddle.clone(Tensor([0, 256, 168, 256],"float32"), )
paddle.clone(Tensor([1, 256, 0, 256],"float32"), )
paddle.clone(Tensor([1, 256, 168, 0],"float32"), )
paddle.clone(Tensor([0, 256, 192, 288],"float32"), )
paddle.clone(Tensor([1, 0, 192, 288],"float32"), )
paddle.clone(Tensor([1, 256, 0, 288],"float32"), )
paddle.clone(Tensor([1, 256, 192, 0],"float32"), )
paddle.clone(Tensor([0, 256, 21, 32],"float32"), )
paddle.clone(Tensor([1, 256, 0, 32],"float32"), )
paddle.clone(Tensor([1, 256, 21, 0],"float32"), )
paddle.clone(Tensor([0, 256, 24, 36],"float32"), )
paddle.clone(Tensor([1, 256, 0, 36],"float32"), )
paddle.clone(Tensor([1, 256, 24, 0],"float32"), )
paddle.clone(Tensor([0, 256, 42, 64],"float32"), )
paddle.clone(Tensor([1, 256, 0, 64],"float32"), )
paddle.clone(Tensor([1, 256, 42, 0],"float32"), )
paddle.clone(Tensor([0, 256, 48, 72],"float32"), )
paddle.clone(Tensor([1, 256, 0, 72],"float32"), )
paddle.clone(Tensor([1, 256, 48, 0],"float32"), )
paddle.clone(Tensor([0, 256, 84, 128],"float32"), )
paddle.clone(Tensor([1, 256, 0, 128],"float32"), )
paddle.clone(Tensor([1, 256, 84, 0],"float32"), )
paddle.clone(Tensor([0, 256, 96, 144],"float32"), )
paddle.clone(Tensor([1, 0, 96, 144],"float32"), )
paddle.clone(Tensor([1, 256, 0, 144],"float32"), )
paddle.clone(Tensor([1, 256, 96, 0],"float32"), )
paddle.clone(Tensor([0, 3, 11, 16],"float32"), )
paddle.clone(Tensor([1, 3, 0, 16],"float32"), )
paddle.clone(Tensor([1, 3, 11, 0],"float32"), )
paddle.clone(Tensor([0, 3, 168, 256],"float32"), )
paddle.clone(Tensor([1, 3, 0, 256],"float32"), )
paddle.clone(Tensor([1, 3, 168, 0],"float32"), )
paddle.clone(Tensor([0, 3, 21, 32],"float32"), )
paddle.clone(Tensor([1, 3, 0, 32],"float32"), )
paddle.clone(Tensor([1, 3, 21, 0],"float32"), )
paddle.clone(Tensor([0, 3, 42, 64],"float32"), )
paddle.clone(Tensor([1, 3, 0, 64],"float32"), )
paddle.clone(Tensor([1, 3, 42, 0],"float32"), )
paddle.clone(Tensor([0, 3, 544, 736],"float32"), )
paddle.clone(Tensor([1, 0, 544, 736],"float32"), )
paddle.clone(Tensor([1, 3, 0, 736],"float32"), )
paddle.clone(Tensor([1, 3, 544, 0],"float32"), )
paddle.clone(Tensor([0, 3, 84, 128],"float32"), )
paddle.clone(Tensor([1, 3, 0, 128],"float32"), )
paddle.clone(Tensor([1, 3, 84, 0],"float32"), )
paddle.clone(Tensor([0, 3, 96, 96, 1],"float32"), )
paddle.clone(Tensor([1, 0, 96, 96, 1],"float32"), )
paddle.clone(Tensor([1, 3, 0, 96, 1],"float32"), )
paddle.clone(Tensor([1, 3, 96, 0, 1],"float32"), )
paddle.clone(Tensor([1, 3, 96, 96, 0],"float32"), )
paddle.clone(Tensor([0, 36, 84, 128],"float32"), )
paddle.clone(Tensor([1, 36, 0, 128],"float32"), )
paddle.clone(Tensor([1, 36, 84, 0],"float32"), )
paddle.clone(Tensor([0, 384, 32, 32],"float32"), )
paddle.clone(Tensor([1, 384, 0, 32],"float32"), )
paddle.clone(Tensor([1, 384, 32, 0],"float32"), )
paddle.clone(Tensor([0, 4, 64, 64],"float32"), )
paddle.clone(Tensor([1, 4, 0, 64],"float32"), )
paddle.clone(Tensor([1, 4, 64, 0],"float32"), )
paddle.clone(Tensor([0, 4],"float32"), )
paddle.clone(Tensor([1, 0],"float32"), )
paddle.clone(Tensor([0, 5, 50, 50],"float32"), )
paddle.clone(Tensor([1, 0, 50, 50],"float32"), )
paddle.clone(Tensor([1, 5, 0, 50],"float32"), )
paddle.clone(Tensor([1, 5, 50, 0],"float32"), )
paddle.clone(Tensor([0, 500],"int32"), )
paddle.clone(Tensor([1, 0],"int32"), )
paddle.clone(Tensor([0, 500],"int64"), )
paddle.clone(Tensor([1, 0],"int64"), )
paddle.clone(Tensor([0, 512, 96, 144],"float32"), )
paddle.clone(Tensor([1, 512, 0, 144],"float32"), )
paddle.clone(Tensor([1, 512, 96, 0],"float32"), )
paddle.clone(Tensor([0, 625, 1],"float32"), )
paddle.clone(Tensor([1, 625, 0],"float32"), )
paddle.clone(Tensor([0, 625, 4],"float32"), )
paddle.clone(Tensor([0, 625, 80],"float32"), )
paddle.clone(Tensor([0, 72, 42, 64],"float32"), )
paddle.clone(Tensor([1, 72, 0, 64],"float32"), )
paddle.clone(Tensor([1, 72, 42, 0],"float32"), )
paddle.clone(Tensor([0, 80, 44, 44],"float32"), )
paddle.clone(Tensor([1, 80, 0, 44],"float32"), )
paddle.clone(Tensor([1, 80, 44, 0],"float32"), )
paddle.clone(Tensor([0, 80, 50, 50],"float32"), )
paddle.clone(Tensor([1, 80, 0, 50],"float32"), )
paddle.clone(Tensor([1, 80, 50, 0],"float32"), )
paddle.clone(Tensor([0, 96, 128, 128],"float32"), )
paddle.clone(Tensor([1, 0, 128, 128],"float32"), )
paddle.clone(Tensor([1, 96, 0, 128],"float32"), )
paddle.clone(Tensor([1, 96, 128, 0],"float32"), )
paddle.clone(Tensor([0],"float32"), )
paddle.clone(Tensor([0],"int32"), )
paddle.clone(Tensor([0, 122, 28, 28],"float32"), )
paddle.clone(Tensor([10, 0, 28, 28],"float32"), )
paddle.clone(Tensor([10, 122, 0, 28],"float32"), )
paddle.clone(Tensor([10, 122, 28, 0],"float32"), )
paddle.clone(Tensor([0, 1280, 1, 1],"float32"), )
paddle.clone(Tensor([10, 0, 1, 1],"float32"), )
paddle.clone(Tensor([10, 1280, 0, 1],"float32"), )
paddle.clone(Tensor([10, 1280, 1, 0],"float32"), )
paddle.clone(Tensor([0, 196, 640],"float32"), )
paddle.clone(Tensor([10, 0, 640],"float32"), )
paddle.clone(Tensor([10, 196, 0],"float32"), )
paddle.clone(Tensor([0, 2048, 10, 10],"float32"), )
paddle.clone(Tensor([10, 0, 10, 10],"float32"), )
paddle.clone(Tensor([10, 2048, 0, 10],"float32"), )
paddle.clone(Tensor([10, 2048, 10, 0],"float32"), )
paddle.clone(Tensor([0, 2048, 7, 7],"float32"), )
paddle.clone(Tensor([10, 0, 7, 7],"float32"), )
paddle.clone(Tensor([10, 2048, 0, 7],"float32"), )
paddle.clone(Tensor([10, 2048, 7, 0],"float32"), )
paddle.clone(Tensor([0, 2304, 192],"float32"), )
paddle.clone(Tensor([10, 0, 192],"float32"), )
paddle.clone(Tensor([10, 2304, 0],"float32"), )
paddle.clone(Tensor([0, 256, 14, 14],"float32"), )
paddle.clone(Tensor([10, 0, 14, 14],"float32"), )
paddle.clone(Tensor([10, 256, 0, 14],"float32"), )
paddle.clone(Tensor([10, 256, 14, 0],"float32"), )
paddle.clone(Tensor([0, 3, 224, 224],"float32"), )
paddle.clone(Tensor([10, 0, 224, 224],"float32"), )
paddle.clone(Tensor([10, 3, 0, 224],"float32"), )
paddle.clone(Tensor([10, 3, 224, 0],"float32"), )
paddle.clone(Tensor([0, 32, 14, 14],"float32"), )
paddle.clone(Tensor([10, 32, 0, 14],"float32"), )
paddle.clone(Tensor([10, 32, 14, 0],"float32"), )
paddle.clone(Tensor([0, 32, 56, 56],"float32"), )
paddle.clone(Tensor([10, 0, 56, 56],"float32"), )
paddle.clone(Tensor([10, 32, 0, 56],"float32"), )
paddle.clone(Tensor([10, 32, 56, 0],"float32"), )
paddle.clone(Tensor([0, 320, 8, 8],"float32"), )
paddle.clone(Tensor([10, 0, 8, 8],"float32"), )
paddle.clone(Tensor([10, 320, 0, 8],"float32"), )
paddle.clone(Tensor([10, 320, 8, 0],"float32"), )
paddle.clone(Tensor([0, 36, 28, 28],"float32"), )
paddle.clone(Tensor([10, 36, 0, 28],"float32"), )
paddle.clone(Tensor([10, 36, 28, 0],"float32"), )
paddle.clone(Tensor([0, 49, 128],"float32"), )
paddle.clone(Tensor([10, 0, 128],"float32"), )
paddle.clone(Tensor([10, 49, 0],"float32"), )
paddle.clone(Tensor([0, 512, 1, 1],"float32"), )
paddle.clone(Tensor([10, 512, 0, 1],"float32"), )
paddle.clone(Tensor([10, 512, 1, 0],"float32"), )
paddle.clone(Tensor([0, 512, 7, 7],"float32"), )
paddle.clone(Tensor([10, 512, 0, 7],"float32"), )
paddle.clone(Tensor([10, 512, 7, 0],"float32"), )
paddle.clone(Tensor([0, 64, 14, 14],"float32"), )
paddle.clone(Tensor([10, 64, 0, 14],"float32"), )
paddle.clone(Tensor([10, 64, 14, 0],"float32"), )
paddle.clone(Tensor([0, 64],"float32"), )
paddle.clone(Tensor([10, 0],"float32"), )
paddle.clone(Tensor([0, 8, 196, 16],"float32"), )
paddle.clone(Tensor([10, 0, 196, 16],"float32"), )
paddle.clone(Tensor([10, 8, 0, 16],"float32"), )
paddle.clone(Tensor([10, 8, 196, 0],"float32"), )
paddle.clone(Tensor([0, 8, 196, 64],"float32"), )
paddle.clone(Tensor([10, 0, 196, 64],"float32"), )
paddle.clone(Tensor([10, 8, 0, 64],"float32"), )
paddle.clone(Tensor([0, 1280, 7, 7],"float32"), )
paddle.clone(Tensor([11, 0, 7, 7],"float32"), )
paddle.clone(Tensor([11, 1280, 0, 7],"float32"), )
paddle.clone(Tensor([11, 1280, 7, 0],"float32"), )
paddle.clone(Tensor([0, 24, 56, 56],"float32"), )
paddle.clone(Tensor([11, 0, 56, 56],"float32"), )
paddle.clone(Tensor([11, 24, 0, 56],"float32"), )
paddle.clone(Tensor([11, 24, 56, 0],"float32"), )
paddle.clone(Tensor([0, 976, 7, 7],"float32"), )
paddle.clone(Tensor([11, 976, 0, 7],"float32"), )
paddle.clone(Tensor([11, 976, 7, 0],"float32"), )
paddle.clone(Tensor([0, 288, 192],"float32"), )
paddle.clone(Tensor([12, 0, 192],"float32"), )
paddle.clone(Tensor([12, 288, 0],"float32"), )
paddle.clone(Tensor([129024, 0],"float32"), )
paddle.clone(Tensor([0, 12, 112, 112],"float32"), )
paddle.clone(Tensor([145, 0, 112, 112],"float32"), )
paddle.clone(Tensor([145, 12, 0, 112],"float32"), )
paddle.clone(Tensor([145, 12, 112, 0],"float32"), )
paddle.clone(Tensor([16, 0],"float32"), )
paddle.clone(Tensor([0, 64],"float64"), )
paddle.clone(Tensor([16, 0],"float64"), )
paddle.clone(Tensor([0, 5],"float32"), )
paddle.clone(Tensor([16384, 0],"float32"), )
paddle.clone(Tensor([0, 1],"int64"), )
paddle.clone(Tensor([2, 0],"int64"), )
paddle.clone(Tensor([0, 1788],"float32"), )
paddle.clone(Tensor([2, 0],"float32"), )
paddle.clone(Tensor([0, 2002],"float32"), )
paddle.clone(Tensor([0, 256, 28, 28],"float32"), )
paddle.clone(Tensor([2, 0, 28, 28],"float32"), )
paddle.clone(Tensor([2, 256, 0, 28],"float32"), )
paddle.clone(Tensor([2, 256, 28, 0],"float32"), )
paddle.clone(Tensor([0, 28, 28],"int32"), )
paddle.clone(Tensor([2, 0, 28],"int32"), )
paddle.clone(Tensor([2, 28, 0],"int32"), )
paddle.clone(Tensor([2016, 0],"float32"), )
paddle.clone(Tensor([0, 1024, 1, 1],"float32"), )
paddle.clone(Tensor([22, 0, 1, 1],"float32"), )
paddle.clone(Tensor([22, 1024, 0, 1],"float32"), )
paddle.clone(Tensor([22, 1024, 1, 0],"float32"), )
paddle.clone(Tensor([0, 1024, 14, 14],"float32"), )
paddle.clone(Tensor([22, 0, 14, 14],"float32"), )
paddle.clone(Tensor([22, 1024, 0, 14],"float32"), )
paddle.clone(Tensor([22, 1024, 14, 0],"float32"), )
paddle.clone(Tensor([0, 1056, 14, 14],"float32"), )
paddle.clone(Tensor([22, 1056, 0, 14],"float32"), )
paddle.clone(Tensor([22, 1056, 14, 0],"float32"), )
paddle.clone(Tensor([0, 128, 14, 14],"float32"), )
paddle.clone(Tensor([22, 128, 0, 14],"float32"), )
paddle.clone(Tensor([22, 128, 14, 0],"float32"), )
paddle.clone(Tensor([0, 128, 28, 28],"float32"), )
paddle.clone(Tensor([22, 0, 28, 28],"float32"), )
paddle.clone(Tensor([22, 128, 0, 28],"float32"), )
paddle.clone(Tensor([22, 128, 28, 0],"float32"), )
paddle.clone(Tensor([0, 128, 56, 56],"float32"), )
paddle.clone(Tensor([22, 0, 56, 56],"float32"), )
paddle.clone(Tensor([22, 128, 0, 56],"float32"), )
paddle.clone(Tensor([22, 128, 56, 0],"float32"), )
paddle.clone(Tensor([0, 144, 56, 56],"float32"), )
paddle.clone(Tensor([22, 144, 0, 56],"float32"), )
paddle.clone(Tensor([22, 144, 56, 0],"float32"), )
paddle.clone(Tensor([0, 1500, 1, 1],"float32"), )
paddle.clone(Tensor([22, 1500, 0, 1],"float32"), )
paddle.clone(Tensor([22, 1500, 1, 0],"float32"), )
paddle.clone(Tensor([0, 1500, 14, 14],"float32"), )
paddle.clone(Tensor([22, 1500, 0, 14],"float32"), )
paddle.clone(Tensor([22, 1500, 14, 0],"float32"), )
paddle.clone(Tensor([0, 1536, 8, 8],"float32"), )
paddle.clone(Tensor([22, 0, 8, 8],"float32"), )
paddle.clone(Tensor([22, 1536, 0, 8],"float32"), )
paddle.clone(Tensor([22, 1536, 8, 0],"float32"), )
paddle.clone(Tensor([0, 16, 384],"float32"), )
paddle.clone(Tensor([22, 0, 384],"float32"), )
paddle.clone(Tensor([22, 16, 0],"float32"), )
paddle.clone(Tensor([0, 196, 128],"float32"), )
paddle.clone(Tensor([22, 0, 128],"float32"), )
paddle.clone(Tensor([22, 196, 0],"float32"), )
paddle.clone(Tensor([22, 0, 7, 7],"float32"), )
paddle.clone(Tensor([22, 2048, 0, 7],"float32"), )
paddle.clone(Tensor([22, 2048, 7, 0],"float32"), )
paddle.clone(Tensor([22, 256, 0, 14],"float32"), )
paddle.clone(Tensor([22, 256, 14, 0],"float32"), )
paddle.clone(Tensor([0, 28, 28, 28],"float32"), )
paddle.clone(Tensor([22, 28, 0, 28],"float32"), )
paddle.clone(Tensor([22, 28, 28, 0],"float32"), )
paddle.clone(Tensor([0, 28, 56, 56],"float32"), )
paddle.clone(Tensor([22, 28, 0, 56],"float32"), )
paddle.clone(Tensor([22, 28, 56, 0],"float32"), )
paddle.clone(Tensor([0, 288, 14, 14],"float32"), )
paddle.clone(Tensor([22, 288, 0, 14],"float32"), )
paddle.clone(Tensor([22, 288, 14, 0],"float32"), )
paddle.clone(Tensor([0, 360, 14, 14],"float32"), )
paddle.clone(Tensor([22, 360, 0, 14],"float32"), )
paddle.clone(Tensor([22, 360, 14, 0],"float32"), )
paddle.clone(Tensor([0, 4, 224, 224],"float32"), )
paddle.clone(Tensor([22, 0, 224, 224],"float32"), )
paddle.clone(Tensor([22, 4, 0, 224],"float32"), )
paddle.clone(Tensor([22, 4, 224, 0],"float32"), )
paddle.clone(Tensor([0, 480, 7, 7],"float32"), )
paddle.clone(Tensor([22, 480, 0, 7],"float32"), )
paddle.clone(Tensor([22, 480, 7, 0],"float32"), )
paddle.clone(Tensor([0, 49, 512],"float32"), )
paddle.clone(Tensor([22, 0, 512],"float32"), )
paddle.clone(Tensor([22, 49, 0],"float32"), )
paddle.clone(Tensor([22, 512, 0, 7],"float32"), )
paddle.clone(Tensor([22, 512, 7, 0],"float32"), )
paddle.clone(Tensor([0, 64, 112, 112],"float32"), )
paddle.clone(Tensor([22, 0, 112, 112],"float32"), )
paddle.clone(Tensor([22, 64, 0, 112],"float32"), )
paddle.clone(Tensor([22, 64, 112, 0],"float32"), )
paddle.clone(Tensor([0, 64, 56, 56],"float32"), )
paddle.clone(Tensor([22, 64, 0, 56],"float32"), )
paddle.clone(Tensor([22, 64, 56, 0],"float32"), )
paddle.clone(Tensor([0, 8],"float32"), )
paddle.clone(Tensor([24, 0],"float32"), )
paddle.clone(Tensor([0, 2],"float32"), )
paddle.clone(Tensor([2541, 0],"float32"), )
paddle.clone(Tensor([32256, 0],"float32"), )
paddle.clone(Tensor([0, 3, 384, 384],"float32"), )
paddle.clone(Tensor([4, 0, 384, 384],"float32"), )
paddle.clone(Tensor([4, 3, 0, 384],"float32"), )
paddle.clone(Tensor([4, 3, 384, 0],"float32"), )
paddle.clone(Tensor([0, 48, 96, 96],"float32"), )
paddle.clone(Tensor([4, 0, 96, 96],"float32"), )
paddle.clone(Tensor([4, 48, 0, 96],"float32"), )
paddle.clone(Tensor([4, 48, 96, 0],"float32"), )
paddle.clone(Tensor([0, 256, 56, 56],"float32"), )
paddle.clone(Tensor([43, 0, 56, 56],"float32"), )
paddle.clone(Tensor([43, 256, 0, 56],"float32"), )
paddle.clone(Tensor([43, 256, 56, 0],"float32"), )
paddle.clone(Tensor([0, 32, 112, 112],"float32"), )
paddle.clone(Tensor([43, 0, 112, 112],"float32"), )
paddle.clone(Tensor([43, 32, 0, 112],"float32"), )
paddle.clone(Tensor([43, 32, 112, 0],"float32"), )
paddle.clone(Tensor([0, 640],"float32"), )
paddle.clone(Tensor([4312, 0],"float32"), )
paddle.clone(Tensor([0, 196],"int64"), )
paddle.clone(Tensor([49, 0],"int64"), )
paddle.clone(Tensor([0, 49],"int64"), )
paddle.clone(Tensor([0, 256, 7, 7],"float32"), )
paddle.clone(Tensor([512, 0, 7, 7],"float32"), )
paddle.clone(Tensor([512, 256, 0, 7],"float32"), )
paddle.clone(Tensor([512, 256, 7, 0],"float32"), )
paddle.clone(Tensor([512, 0],"float32"), )
paddle.clone(Tensor([528, 0],"float32"), )
paddle.clone(Tensor([0, 9216, 96],"float32"), )
paddle.clone(Tensor([6, 0, 96],"float32"), )
paddle.clone(Tensor([6, 9216, 0],"float32"), )
paddle.clone(Tensor([0],"float64"), )
paddle.clone(Tensor([8064, 0],"float32"), )
paddle.clone(Tensor([0, 192],"float32"), )
paddle.clone(Tensor([86, 0],"float32"), )
paddle.clone(Tensor([0, 198, 192],"float32"), )
paddle.clone(Tensor([86, 0, 192],"float32"), )
paddle.clone(Tensor([86, 198, 0],"float32"), )
paddle.clone(Tensor([86, 0, 224, 224],"float32"), )
paddle.clone(Tensor([86, 3, 0, 224],"float32"), )
paddle.clone(Tensor([86, 3, 224, 0],"float32"), )
paddle.clone(Tensor([0, 704, 7, 7],"float32"), )
paddle.clone(Tensor([86, 0, 7, 7],"float32"), )
paddle.clone(Tensor([86, 704, 0, 7],"float32"), )
paddle.clone(Tensor([86, 704, 7, 0],"float32"), )
paddle.column_stack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.column_stack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.column_stack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),Tensor([2, 1],"float64"),], )
paddle.column_stack(list[Tensor([2],"float64"),Tensor([0, 1],"float64"),], )
paddle.column_stack(list[Tensor([2],"float64"),Tensor([2, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.column_stack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.column_stack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.column_stack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.column_stack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.combinations(Tensor([0],"float64"), 5, False, )
paddle.combinations(Tensor([0],"int32"), 1, True, )
paddle.combinations(Tensor([0],"int64"), 0, True, )
paddle.combinations(Tensor([0],"float32"), r=2, )
paddle.combinations(Tensor([0],"float32"), r=2, with_replacement=True, )
paddle.combinations(Tensor([0],"float32"), r=4, )
paddle.complex(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.complex(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), )
paddle.complex(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.complex(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.complex(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.complex(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.complex(Tensor([0, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 0, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.complex(Tensor([0, 3, 4],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.complex(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), )
paddle.complex(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), )
paddle.complex(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.complex(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.complex(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.complex(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), )
paddle.complex(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.complex(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.complex(Tensor([0, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.complex(Tensor([2, 0],"float64"), Tensor([2, 3],"float64"), )
paddle.complex(Tensor([2, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.complex(Tensor([2, 3],"float64"), Tensor([2, 0],"float64"), )
paddle.complex(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.complex(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), )
paddle.complex(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.complex(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.complex(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.complex(Tensor([0],"float64"), Tensor([2],"float64"), )
paddle.complex(Tensor([2],"float64"), Tensor([0],"float64"), )
paddle.complex(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.complex(Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.complex(Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.complex(Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.complex(Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float16"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"int32"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 1],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 1, 0],"int64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 1, 2],"float32"),Tensor([1, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 1, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 1, 2],"float32"),Tensor([1, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 0, 2],"float32"),Tensor([1, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 1, 0],"float32"),Tensor([1, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 1],"float16"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float16"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"float16"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float16"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float32"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float32"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"float32"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float32"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int32"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"int32"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"int32"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"int32"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"int64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 1],"int64"),], axis=1, name=None, )
paddle.concat(list[Tensor([1, 0],"int64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([1, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([1, 1],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([1, 1],"int64"),Tensor([1, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 10, 5],"float32"),Tensor([1, 10, 5],"float32"),], )
paddle.concat(list[Tensor([1, 0, 5],"float32"),Tensor([1, 10, 5],"float32"),], )
paddle.concat(list[Tensor([1, 10, 0],"float32"),Tensor([1, 10, 5],"float32"),], )
paddle.concat(list[Tensor([1, 10, 5],"float32"),Tensor([0, 10, 5],"float32"),], )
paddle.concat(list[Tensor([1, 10, 5],"float32"),Tensor([1, 0, 5],"float32"),], )
paddle.concat(list[Tensor([1, 10, 5],"float32"),Tensor([1, 10, 0],"float32"),], )
paddle.concat(list[Tensor([0, 10, 5],"float32"),Tensor([0, 10, 5],"float32"),], )
paddle.concat(list[Tensor([1, 0, 5],"float32"),Tensor([1, 0, 5],"float32"),], )
paddle.concat(list[Tensor([1, 10, 0],"float32"),Tensor([1, 10, 0],"float32"),], )
paddle.concat(list[Tensor([0, 12, 10, 10],"float32"),Tensor([1, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 10, 10],"float32"),Tensor([1, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 0, 10],"float32"),Tensor([1, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 0],"float32"),Tensor([1, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 10],"float32"),Tensor([0, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 10],"float32"),Tensor([1, 12, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 10],"float32"),Tensor([1, 12, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 12, 10, 10],"float32"),Tensor([0, 12, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 0, 10],"float32"),Tensor([1, 12, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 12, 10, 0],"float32"),Tensor([1, 12, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 128, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 160, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 192, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 2, 0],"float64"),Tensor([1, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 2, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 2, 1],"float64"),Tensor([1, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 2, 0],"float64"),Tensor([1, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 2, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 0, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 0],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 4],"float32"),Tensor([0, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 2, 8, 4],"float32"),Tensor([0, 2, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 0, 4],"float32"),Tensor([1, 2, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 2, 8, 0],"float32"),Tensor([1, 2, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], )
paddle.concat(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.concat(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([1, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 2],"float64"),Tensor([0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 2],"float64"),Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([1, 2],"int64"),], )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 2],"int64"),], )
paddle.concat(list[Tensor([1, 2],"int64"),Tensor([0, 2],"int64"),], )
paddle.concat(list[Tensor([1, 2],"int64"),Tensor([1, 0],"int64"),], )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),], )
paddle.concat(list[Tensor([1, 0],"int64"),Tensor([1, 0],"int64"),], )
paddle.concat(list[Tensor([0, 224, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 224, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 5, 5],"float32"),Tensor([1, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 5, 5],"float32"),Tensor([1, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 0, 5],"float32"),Tensor([1, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 0],"float32"),Tensor([1, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 5],"float32"),Tensor([0, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 5],"float32"),Tensor([1, 24, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 5],"float32"),Tensor([1, 24, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 5, 5],"float32"),Tensor([0, 24, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 0, 5],"float32"),Tensor([1, 24, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 24, 5, 0],"float32"),Tensor([1, 24, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 256, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 288, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3, 256, 256],"float32"),Tensor([1, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256, 256],"float32"),Tensor([1, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 0, 256],"float32"),Tensor([1, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 0],"float32"),Tensor([1, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 256],"float32"),Tensor([0, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 256],"float32"),Tensor([1, 10, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 256],"float32"),Tensor([1, 10, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 256, 256],"float32"),Tensor([0, 10, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 256, 256],"float32"),Tensor([1, 0, 256, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 0, 256],"float32"),Tensor([1, 10, 0, 256],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 256, 0],"float32"),Tensor([1, 10, 256, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 32, 32],"float32"),Tensor([1, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 32, 32],"float32"),Tensor([1, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 0, 32],"float32"),Tensor([1, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 0],"float32"),Tensor([1, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 32],"float32"),Tensor([0, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 32],"float32"),Tensor([1, 10, 0, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 32],"float32"),Tensor([1, 10, 32, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 3, 32, 32],"float32"),Tensor([0, 10, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 0, 32, 32],"float32"),Tensor([1, 0, 32, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 0, 32],"float32"),Tensor([1, 10, 0, 32],"float32"),], 1, )
paddle.concat(list[Tensor([1, 3, 32, 0],"float32"),Tensor([1, 10, 32, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 320, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 320, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 352, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 384, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 0, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 0],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([0, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([1, 0, 10],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([1, 4, 0],"float32"),Tensor([1, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([0, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 0, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 10],"float32"),Tensor([1, 4, 10],"float32"),Tensor([1, 4, 0],"float32"),], 0, )
paddle.concat(list[Tensor([0, 4, 10],"float32"),Tensor([0, 4, 10],"float32"),Tensor([0, 4, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 0, 10],"float32"),Tensor([1, 0, 10],"float32"),Tensor([1, 0, 10],"float32"),], 0, )
paddle.concat(list[Tensor([1, 4, 0],"float32"),Tensor([1, 4, 0],"float32"),Tensor([1, 4, 0],"float32"),], 0, )
paddle.concat(list[Tensor([0, 4, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 0, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 0],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 0, 4],"float32"),Tensor([1, 4, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([1, 4, 8, 0],"float32"),Tensor([1, 4, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 416, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 416, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 448, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 3, 3],"float32"),Tensor([1, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 3, 3],"float32"),Tensor([1, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 0, 3],"float32"),Tensor([1, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 0],"float32"),Tensor([1, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 3],"float32"),Tensor([0, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 3],"float32"),Tensor([1, 0, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 3],"float32"),Tensor([1, 48, 0, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 3],"float32"),Tensor([1, 48, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 3, 3],"float32"),Tensor([0, 48, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 3, 3],"float32"),Tensor([1, 0, 3, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 0, 3],"float32"),Tensor([1, 48, 0, 3],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 48, 3, 0],"float32"),Tensor([1, 48, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 10, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 0, 10],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 0],"float32"),Tensor([1, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 10],"float32"),Tensor([1, 0, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 10],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 10, 10],"float32"),Tensor([0, 32, 10, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 0, 10],"float32"),Tensor([1, 32, 0, 10],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 10, 0],"float32"),Tensor([1, 32, 10, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 480, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 0, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 0],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([0, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([1, 5, 0],"float64"),Tensor([1, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([0, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 1],"float64"),Tensor([1, 5, 1],"float64"),Tensor([1, 5, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 5, 1],"float64"),Tensor([0, 5, 1],"float64"),Tensor([0, 5, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([1, 5, 0],"float64"),Tensor([1, 5, 0],"float64"),Tensor([1, 5, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 5],"float64"),Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 0],"float64"),Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 5],"float64"),Tensor([0, 5],"float64"),Tensor([1, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 5],"float64"),Tensor([1, 0],"float64"),Tensor([1, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),Tensor([0, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1, 5],"float64"),Tensor([1, 5],"float64"),Tensor([1, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 5],"float64"),Tensor([0, 5],"float64"),Tensor([0, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 512, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 0, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 512, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 544, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 576, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 608, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 64, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 640, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 672, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 704, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 736, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 768, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 800, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 832, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 864, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 896, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 928, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 20, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 0, 20],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 0],"float32"),Tensor([1, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 20],"float32"),Tensor([1, 0, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 20],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 20, 20],"float32"),Tensor([0, 32, 20, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 0, 20],"float32"),Tensor([1, 32, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 96, 20, 0],"float32"),Tensor([1, 32, 20, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 960, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 2, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 0, 2],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 0],"float32"),Tensor([1, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 2],"float32"),Tensor([1, 0, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 2],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 2, 2],"float32"),Tensor([0, 32, 2, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 0, 2],"float32"),Tensor([1, 32, 0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 2, 0],"float32"),Tensor([1, 32, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 5, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 0, 5],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 0],"float32"),Tensor([1, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 5],"float32"),Tensor([1, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 5],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 5, 5],"float32"),Tensor([0, 32, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 0, 5],"float32"),Tensor([1, 32, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([1, 992, 5, 0],"float32"),Tensor([1, 32, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0],"float16"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.concat(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([2],"float32"),], )
paddle.concat(list[Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float64"),Tensor([2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([1],"float64"),Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float64"),Tensor([511],"float64"),Tensor([1],"float64"),], )
paddle.concat(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.concat(list[Tensor([1],"float64"),Tensor([511],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0],"int32"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"int64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"int64"),Tensor([1],"int64"),Tensor([1],"int64"),], axis=0, )
paddle.concat(list[Tensor([1],"int64"),Tensor([0],"int64"),Tensor([1],"int64"),], axis=0, )
paddle.concat(list[Tensor([1],"int64"),Tensor([1],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0],"int64"),Tensor([0],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([10, 10],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 0],"float32"),Tensor([10, 10],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 10],"float32"),Tensor([0, 10],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 10],"float32"),Tensor([10, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 0],"float32"),Tensor([10, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([10, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 0],"float32"),Tensor([10, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 2],"float32"),Tensor([0, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([10, 2],"float32"),Tensor([10, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 200],"float32"),Tensor([100, 200],"float32"),], )
paddle.concat(list[Tensor([100, 0],"float32"),Tensor([100, 200],"float32"),], )
paddle.concat(list[Tensor([100, 200],"float32"),Tensor([0, 200],"float32"),], )
paddle.concat(list[Tensor([100, 200],"float32"),Tensor([100, 0],"float32"),], )
paddle.concat(list[Tensor([0, 200],"float32"),Tensor([0, 200],"float32"),], )
paddle.concat(list[Tensor([100, 0],"float32"),Tensor([100, 0],"float32"),], )
paddle.concat(list[Tensor([0],"bfloat16"),Tensor([100],"bfloat16"),], )
paddle.concat(list[Tensor([100],"bfloat16"),Tensor([0],"bfloat16"),], )
paddle.concat(list[Tensor([0],"bfloat16"),Tensor([0],"bfloat16"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float16"),Tensor([500],"float16"),], )
paddle.concat(list[Tensor([1000],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([500],"float32"),], )
paddle.concat(list[Tensor([1000],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float64"),Tensor([500],"float64"),], )
paddle.concat(list[Tensor([1000],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0],"int32"),Tensor([500],"int32"),], )
paddle.concat(list[Tensor([1000],"int32"),Tensor([0],"int32"),], )
paddle.concat(list[Tensor([0],"int32"),Tensor([0],"int32"),], )
paddle.concat(list[Tensor([0],"int64"),Tensor([500],"int64"),], )
paddle.concat(list[Tensor([1000],"int64"),Tensor([0],"int64"),], )
paddle.concat(list[Tensor([0],"int64"),Tensor([0],"int64"),], )
paddle.concat(list[Tensor([0, 20],"float32"),Tensor([11, 20],"float32"),], axis=0, )
paddle.concat(list[Tensor([11, 0],"float32"),Tensor([11, 20],"float32"),], axis=0, )
paddle.concat(list[Tensor([11, 20],"float32"),Tensor([0, 20],"float32"),], axis=0, )
paddle.concat(list[Tensor([11, 20],"float32"),Tensor([11, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 20],"float32"),Tensor([0, 20],"float32"),], axis=0, )
paddle.concat(list[Tensor([11, 0],"float32"),Tensor([11, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 4, 8],"float64"),Tensor([12, 4, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 0, 8],"float64"),Tensor([12, 4, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 4, 0],"float64"),Tensor([12, 4, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 4, 8],"float64"),Tensor([0, 4, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 4, 8],"float64"),Tensor([12, 0, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 4, 8],"float64"),Tensor([12, 4, 0],"float64"),], -1, )
paddle.concat(list[Tensor([0, 4, 8],"float64"),Tensor([0, 4, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 0, 8],"float64"),Tensor([12, 0, 8],"float64"),], -1, )
paddle.concat(list[Tensor([12, 4, 0],"float64"),Tensor([12, 4, 0],"float64"),], -1, )
paddle.concat(list[Tensor([0, 128, 2],"float32"),Tensor([128, 128, 2],"float32"),], )
paddle.concat(list[Tensor([128, 0, 2],"float32"),Tensor([128, 128, 2],"float32"),], )
paddle.concat(list[Tensor([128, 128, 0],"float32"),Tensor([128, 128, 2],"float32"),], )
paddle.concat(list[Tensor([128, 128, 2],"float32"),Tensor([0, 128, 2],"float32"),], )
paddle.concat(list[Tensor([128, 128, 2],"float32"),Tensor([128, 0, 2],"float32"),], )
paddle.concat(list[Tensor([128, 128, 2],"float32"),Tensor([128, 128, 0],"float32"),], )
paddle.concat(list[Tensor([0, 128, 2],"float32"),Tensor([0, 128, 2],"float32"),], )
paddle.concat(list[Tensor([128, 0, 2],"float32"),Tensor([128, 0, 2],"float32"),], )
paddle.concat(list[Tensor([128, 128, 0],"float32"),Tensor([128, 128, 0],"float32"),], )
paddle.concat(list[Tensor([0, 256],"float32"),Tensor([128, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float32"),Tensor([128, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 256],"float32"),Tensor([0, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 256],"float32"),Tensor([128, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256],"float32"),Tensor([0, 256],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"float16"),Tensor([128, 128],"float16"),Tensor([128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float16"),Tensor([128, 128],"float16"),Tensor([128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"float16"),Tensor([0, 128],"float16"),Tensor([128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"float16"),Tensor([128, 0],"float16"),Tensor([128, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"float16"),Tensor([128, 128],"float16"),Tensor([0, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"float16"),Tensor([128, 128],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"float16"),Tensor([0, 128],"float16"),Tensor([0, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"int32"),Tensor([128, 128],"int32"),Tensor([128, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"int32"),Tensor([128, 128],"int32"),Tensor([128, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"int32"),Tensor([0, 128],"int32"),Tensor([128, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"int32"),Tensor([128, 0],"int32"),Tensor([128, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"int32"),Tensor([128, 128],"int32"),Tensor([0, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 512],"int32"),Tensor([128, 128],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"int32"),Tensor([0, 128],"int32"),Tensor([0, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.concat(list[Tensor([0, 64],"float32"),Tensor([128, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 0],"float32"),Tensor([128, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 64],"float32"),Tensor([0, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([128, 64],"float32"),Tensor([128, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 2],"float32"),Tensor([2, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 0, 2],"float32"),Tensor([2, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 1, 2],"float32"),Tensor([2, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 1, 2],"float32"),Tensor([2, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 0, 2],"float32"),Tensor([2, 0, 2],"float32"),], axis=-2, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 1, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 0, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 0],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 4],"float32"),Tensor([0, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 8, 4],"float32"),Tensor([0, 1, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 0, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 1, 8, 0],"float32"),Tensor([2, 1, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 8],"float32"),Tensor([2, 1, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),Tensor([0, 1, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),Tensor([2, 1, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([2, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([2, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([2, 1],"float64"),Tensor([2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 1],"int64"),Tensor([2, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"int64"),Tensor([2, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 1],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 1],"int64"),Tensor([2, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 10, 5],"float32"),Tensor([2, 10, 5],"float32"),], )
paddle.concat(list[Tensor([2, 0, 5],"float32"),Tensor([2, 10, 5],"float32"),], )
paddle.concat(list[Tensor([2, 10, 0],"float32"),Tensor([2, 10, 5],"float32"),], )
paddle.concat(list[Tensor([2, 10, 5],"float32"),Tensor([0, 10, 5],"float32"),], )
paddle.concat(list[Tensor([2, 10, 5],"float32"),Tensor([2, 0, 5],"float32"),], )
paddle.concat(list[Tensor([2, 10, 5],"float32"),Tensor([2, 10, 0],"float32"),], )
paddle.concat(list[Tensor([2, 0, 5],"float32"),Tensor([2, 0, 5],"float32"),], )
paddle.concat(list[Tensor([2, 10, 0],"float32"),Tensor([2, 10, 0],"float32"),], )
paddle.concat(list[Tensor([0, 1008, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1008, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1008, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1024, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1024, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1056, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1056, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1088, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1088, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1088, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1088, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1088, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1104, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1104, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1104, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1104, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1104, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 0, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 0],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([0, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 13],"float32"),Tensor([2, 288, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 112, 13, 13],"float32"),Tensor([0, 288, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 0, 13],"float32"),Tensor([2, 288, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 13, 0],"float32"),Tensor([2, 288, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 112, 28, 28],"float32"),Tensor([2, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 0, 28],"float32"),Tensor([2, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 0],"float32"),Tensor([2, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 28],"float32"),Tensor([0, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 28],"float32"),Tensor([2, 112, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 28],"float32"),Tensor([2, 112, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 112, 28, 28],"float32"),Tensor([0, 112, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 0, 28],"float32"),Tensor([2, 112, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 112, 28, 0],"float32"),Tensor([2, 112, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1120, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1120, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1120, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1120, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1120, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1152, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1152, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 116, 14, 14],"float32"),Tensor([2, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 0, 14],"float32"),Tensor([2, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 0],"float32"),Tensor([2, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 14],"float32"),Tensor([0, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 14],"float32"),Tensor([2, 116, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 14],"float32"),Tensor([2, 116, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 116, 14, 14],"float32"),Tensor([0, 116, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 0, 14],"float32"),Tensor([2, 116, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 116, 14, 0],"float32"),Tensor([2, 116, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1184, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1184, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1184, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1184, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1184, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 12, 28, 28],"float32"),Tensor([2, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 0, 28],"float32"),Tensor([2, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 0],"float32"),Tensor([2, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 28],"float32"),Tensor([0, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 28],"float32"),Tensor([2, 12, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 28],"float32"),Tensor([2, 12, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 12, 28, 28],"float32"),Tensor([0, 12, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 0, 28],"float32"),Tensor([2, 12, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 12, 28, 0],"float32"),Tensor([2, 12, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),Tensor([2, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([0, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 12],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),Tensor([0, 12],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 1200, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1200, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1200, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1200, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1200, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1216, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1216, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1216, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1216, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1216, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1248, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1248, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 0],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([0, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 13, 13],"float32"),Tensor([0, 256, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 13],"float32"),Tensor([2, 256, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 13, 0],"float32"),Tensor([2, 256, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 26, 26],"float32"),Tensor([2, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 26, 26],"float32"),Tensor([2, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 26],"float32"),Tensor([2, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 0],"float32"),Tensor([2, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 26],"float32"),Tensor([0, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 26],"float32"),Tensor([2, 0, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 26],"float32"),Tensor([2, 128, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 26],"float32"),Tensor([2, 128, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 26, 26],"float32"),Tensor([0, 128, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 26, 26],"float32"),Tensor([2, 0, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 26],"float32"),Tensor([2, 128, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 26, 0],"float32"),Tensor([2, 128, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 0],"float32"),Tensor([2, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([0, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 128, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 128, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 27, 27],"float32"),Tensor([0, 128, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 27],"float32"),Tensor([2, 128, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 0],"float32"),Tensor([2, 128, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 0],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([0, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 0, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 0],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([0, 96, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 0, 27],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 0],"float32"),Tensor([2, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([0, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 27],"float32"),Tensor([2, 192, 27, 27],"float32"),Tensor([2, 96, 27, 27],"float32"),Tensor([2, 64, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 27, 27],"float32"),Tensor([0, 192, 27, 27],"float32"),Tensor([0, 96, 27, 27],"float32"),Tensor([0, 64, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 27],"float32"),Tensor([2, 192, 0, 27],"float32"),Tensor([2, 96, 0, 27],"float32"),Tensor([2, 64, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 27, 0],"float32"),Tensor([2, 192, 27, 0],"float32"),Tensor([2, 96, 27, 0],"float32"),Tensor([2, 64, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 54, 54],"float32"),Tensor([2, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 54, 54],"float32"),Tensor([2, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 54],"float32"),Tensor([2, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 0],"float32"),Tensor([2, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 54],"float32"),Tensor([0, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 54],"float32"),Tensor([2, 0, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 54],"float32"),Tensor([2, 128, 0, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 54],"float32"),Tensor([2, 128, 54, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 54, 54],"float32"),Tensor([0, 128, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 54, 54],"float32"),Tensor([2, 0, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 54],"float32"),Tensor([2, 128, 0, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 54, 0],"float32"),Tensor([2, 128, 54, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 128, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1280, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1280, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1280, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1280, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1280, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1296, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1296, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1296, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1296, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1296, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1312, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1312, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1312, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1312, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1312, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1344, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1344, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1376, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1376, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1376, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1376, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1376, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1392, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1392, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1392, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1392, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1392, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1408, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1408, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1408, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1408, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1408, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 144, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 144, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 144, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1440, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1440, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1472, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1472, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1472, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1472, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1472, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1488, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1488, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1488, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1488, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1488, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1504, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1504, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1504, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1504, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1504, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1536, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1536, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1568, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1568, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1568, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1568, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1568, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1584, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1584, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1584, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1584, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1584, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 16, 28, 28],"float32"),Tensor([2, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 0, 28],"float32"),Tensor([2, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 0],"float32"),Tensor([2, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 28],"float32"),Tensor([0, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 28],"float32"),Tensor([2, 16, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 28],"float32"),Tensor([2, 16, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 16, 28, 28],"float32"),Tensor([0, 16, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 0, 28],"float32"),Tensor([2, 16, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 16, 28, 0],"float32"),Tensor([2, 16, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 0],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([0, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 13],"float32"),Tensor([2, 224, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 13, 13],"float32"),Tensor([0, 224, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 13],"float32"),Tensor([2, 224, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 13, 0],"float32"),Tensor([2, 224, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 160, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 160, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1600, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1600, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1600, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1600, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1600, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1632, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1632, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1664, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1664, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1664, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1664, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1664, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1680, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1680, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1680, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1680, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1680, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1696, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1696, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1696, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1696, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1696, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1728, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1728, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 176, 14, 14],"float32"),Tensor([2, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 0, 14],"float32"),Tensor([2, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 0],"float32"),Tensor([2, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 14],"float32"),Tensor([0, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 14],"float32"),Tensor([2, 176, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 14],"float32"),Tensor([2, 176, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 176, 14, 14],"float32"),Tensor([0, 176, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 0, 14],"float32"),Tensor([2, 176, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 176, 14, 0],"float32"),Tensor([2, 176, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1760, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1760, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1760, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1760, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1760, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1776, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1776, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1776, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1776, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1776, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1792, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1792, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1792, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1792, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1792, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1824, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1824, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1856, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1856, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1856, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1856, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1856, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1872, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1872, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1872, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1872, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1872, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1888, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1888, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1888, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1888, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1888, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 12],"float32"),Tensor([2, 192, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),Tensor([0, 192, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),Tensor([2, 192, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 0],"float32"),Tensor([2, 192, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 13, 13],"float32"),Tensor([2, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 13],"float32"),Tensor([2, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 0],"float32"),Tensor([2, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([0, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 192, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 192, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 13, 13],"float32"),Tensor([0, 192, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 13],"float32"),Tensor([2, 192, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 0],"float32"),Tensor([2, 192, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 0],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([0, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 0, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 0],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([0, 48, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 0, 13],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 0],"float32"),Tensor([2, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 13],"float32"),Tensor([2, 208, 13, 13],"float32"),Tensor([2, 48, 13, 13],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 13, 13],"float32"),Tensor([0, 208, 13, 13],"float32"),Tensor([0, 48, 13, 13],"float32"),Tensor([0, 64, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 13],"float32"),Tensor([2, 208, 0, 13],"float32"),Tensor([2, 48, 0, 13],"float32"),Tensor([2, 64, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 13, 0],"float32"),Tensor([2, 208, 13, 0],"float32"),Tensor([2, 48, 13, 0],"float32"),Tensor([2, 64, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 26, 26],"float32"),Tensor([2, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 26, 26],"float32"),Tensor([2, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 26],"float32"),Tensor([2, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 0],"float32"),Tensor([2, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 26],"float32"),Tensor([0, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 26],"float32"),Tensor([2, 0, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 26],"float32"),Tensor([2, 192, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 26],"float32"),Tensor([2, 192, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 26, 26],"float32"),Tensor([0, 192, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 26],"float32"),Tensor([2, 192, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 26, 0],"float32"),Tensor([2, 192, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 192, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 192, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1920, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1920, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1952, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1952, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1952, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1952, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1952, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1968, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1968, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1968, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1968, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1968, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1984, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1984, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1984, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 1984, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 1984, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 0, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 0],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 8],"float32"),Tensor([0, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 0, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 2, 8, 8],"float32"),Tensor([0, 2, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 0, 8],"float32"),Tensor([2, 2, 0, 8],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 2, 8, 0],"float32"),Tensor([2, 2, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([1, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 2],"float32"),Tensor([0, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 2],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([2, 2],"float32"),], )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 2],"float32"),], )
paddle.concat(list[Tensor([2, 2],"float32"),Tensor([0, 2],"float32"),], )
paddle.concat(list[Tensor([2, 2],"float32"),Tensor([2, 0],"float32"),], )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([2, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 2],"float32"),Tensor([2, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([2, 2],"int64"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"int64"),Tensor([2, 2],"int64"),], axis=0, )
paddle.concat(list[Tensor([2, 2],"int64"),Tensor([0, 2],"int64"),], axis=0, )
paddle.concat(list[Tensor([2, 2],"int64"),Tensor([2, 0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),], axis=0, )
paddle.concat(list[Tensor([2, 0],"int64"),Tensor([2, 0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([2, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 2],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([2, 2],"int64"),Tensor([2, 0],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 2],"int64"),Tensor([0, 2],"int64"),], axis=1, )
paddle.concat(list[Tensor([0, 20, 20],"float16"),Tensor([2, 20, 20],"float16"),], )
paddle.concat(list[Tensor([2, 0, 20],"float16"),Tensor([2, 20, 20],"float16"),], )
paddle.concat(list[Tensor([2, 20, 0],"float16"),Tensor([2, 20, 20],"float16"),], )
paddle.concat(list[Tensor([2, 20, 20],"float16"),Tensor([0, 20, 20],"float16"),], )
paddle.concat(list[Tensor([2, 20, 20],"float16"),Tensor([2, 0, 20],"float16"),], )
paddle.concat(list[Tensor([2, 20, 20],"float16"),Tensor([2, 20, 0],"float16"),], )
paddle.concat(list[Tensor([0, 20, 20],"float16"),Tensor([0, 20, 20],"float16"),], )
paddle.concat(list[Tensor([2, 0, 20],"float16"),Tensor([2, 0, 20],"float16"),], )
paddle.concat(list[Tensor([2, 20, 0],"float16"),Tensor([2, 20, 0],"float16"),], )
paddle.concat(list[Tensor([0, 2016, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2016, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2016, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2048, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2048, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2048, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2048, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2048, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2064, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2064, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2064, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2064, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2064, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2080, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2080, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2080, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2080, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2080, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2112, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2112, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2144, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2144, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2144, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2144, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2144, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2160, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2160, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2160, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2176, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2176, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2176, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2176, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2176, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2208, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2208, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2208, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2208, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2208, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 224, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 224, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2240, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2240, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2240, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2240, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2240, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2272, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2272, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2272, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2272, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2272, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2304, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2304, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2304, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 232, 7, 7],"float32"),Tensor([2, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 0, 7],"float32"),Tensor([2, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 0],"float32"),Tensor([2, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 7],"float32"),Tensor([0, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 7],"float32"),Tensor([2, 232, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 7],"float32"),Tensor([2, 232, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 232, 7, 7],"float32"),Tensor([0, 232, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 0, 7],"float32"),Tensor([2, 232, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 232, 7, 0],"float32"),Tensor([2, 232, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2336, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2336, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2336, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2368, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2368, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2368, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 14, 14],"float32"),Tensor([2, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 0, 14],"float32"),Tensor([2, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 0],"float32"),Tensor([2, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 14],"float32"),Tensor([0, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 14],"float32"),Tensor([2, 24, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 14],"float32"),Tensor([2, 24, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 14, 14],"float32"),Tensor([0, 24, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 0, 14],"float32"),Tensor([2, 24, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 14, 0],"float32"),Tensor([2, 24, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 28, 28],"float32"),Tensor([2, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 0, 28],"float32"),Tensor([2, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 0],"float32"),Tensor([2, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 28],"float32"),Tensor([0, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 28],"float32"),Tensor([2, 24, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 28],"float32"),Tensor([2, 24, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 24, 28, 28],"float32"),Tensor([0, 24, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 0, 28],"float32"),Tensor([2, 24, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 24, 28, 0],"float32"),Tensor([2, 24, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 240, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 240, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 240, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 240, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 240, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2400, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2400, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2400, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2432, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2432, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2432, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 244, 14, 14],"float32"),Tensor([2, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 14, 14],"float32"),Tensor([2, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 0, 14],"float32"),Tensor([2, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 0],"float32"),Tensor([2, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 14],"float32"),Tensor([0, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 14],"float32"),Tensor([2, 244, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 14],"float32"),Tensor([2, 244, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 244, 14, 14],"float32"),Tensor([0, 244, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 0, 14],"float32"),Tensor([2, 244, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 244, 14, 0],"float32"),Tensor([2, 244, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2464, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2464, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2464, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2496, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2496, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2496, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2528, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2528, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2528, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 12, 12],"float32"),Tensor([2, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 12],"float32"),Tensor([2, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 0],"float32"),Tensor([2, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 12],"float32"),Tensor([0, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 12],"float32"),Tensor([2, 256, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 12],"float32"),Tensor([2, 256, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 12, 12],"float32"),Tensor([0, 256, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 12],"float32"),Tensor([2, 256, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 12, 0],"float32"),Tensor([2, 256, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 13],"float32"),Tensor([2, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 0],"float32"),Tensor([2, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([0, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 256, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 256, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 13, 13],"float32"),Tensor([0, 256, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 13],"float32"),Tensor([2, 256, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 0],"float32"),Tensor([2, 256, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 0],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([0, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 0, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 0],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([0, 128, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 0, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 0],"float32"),Tensor([2, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([0, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 0, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 13],"float32"),Tensor([2, 320, 13, 13],"float32"),Tensor([2, 128, 13, 13],"float32"),Tensor([2, 128, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 13, 13],"float32"),Tensor([0, 320, 13, 13],"float32"),Tensor([0, 128, 13, 13],"float32"),Tensor([0, 128, 13, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 13],"float32"),Tensor([2, 320, 0, 13],"float32"),Tensor([2, 128, 0, 13],"float32"),Tensor([2, 128, 0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 13, 0],"float32"),Tensor([2, 320, 13, 0],"float32"),Tensor([2, 128, 13, 0],"float32"),Tensor([2, 128, 13, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 26, 26],"float32"),Tensor([2, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 26, 26],"float32"),Tensor([2, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 26],"float32"),Tensor([2, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 0],"float32"),Tensor([2, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 26],"float32"),Tensor([0, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 26],"float32"),Tensor([2, 0, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 26],"float32"),Tensor([2, 256, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 26],"float32"),Tensor([2, 256, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 26, 26],"float32"),Tensor([0, 256, 26, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 26],"float32"),Tensor([2, 256, 0, 26],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 26, 0],"float32"),Tensor([2, 256, 26, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 0],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([0, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 0, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 0],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 0],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 6],"float32"),Tensor([2, 320, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 6, 6],"float32"),Tensor([0, 320, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 0, 6],"float32"),Tensor([2, 320, 0, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 256, 6, 0],"float32"),Tensor([2, 320, 6, 0],"float32"),Tensor([2, 128, 6, 0],"float32"),Tensor([2, 128, 6, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2560, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2560, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2560, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2592, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2592, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2592, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2624, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2624, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2624, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2656, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2656, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 2656, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 288, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 288, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 4],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 0],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 4],"float32"),Tensor([0, 3, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 4],"float32"),Tensor([2, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 4],"float32"),Tensor([2, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3, 4],"float32"),Tensor([0, 3, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 4],"float32"),Tensor([2, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 3, 0],"float32"),Tensor([2, 3, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([0, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),], )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),], )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([0, 3],"float64"),Tensor([2, 3],"float64"),], )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 0],"float64"),Tensor([2, 3],"float64"),], )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([0, 3],"float64"),], )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 0],"float64"),], )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),], )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([0, 3],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 0],"float64"),Tensor([2, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([0, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),Tensor([0, 3],"float64"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 32, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 32, 32, 128],"float16"),Tensor([2, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 32, 128],"float16"),Tensor([2, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 0, 128],"float16"),Tensor([2, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 0],"float16"),Tensor([2, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 128],"float16"),Tensor([0, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 128],"float16"),Tensor([2, 0, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 128],"float16"),Tensor([2, 32, 0, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 128],"float16"),Tensor([2, 32, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 32, 32, 128],"float16"),Tensor([0, 32, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 32, 128],"float16"),Tensor([2, 0, 1, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 0, 128],"float16"),Tensor([2, 32, 0, 128],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 32, 32, 0],"float16"),Tensor([2, 32, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 320, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 0],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([0, 192, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 0, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 0],"float32"),Tensor([2, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),Tensor([2, 768, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([0, 192, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 5],"float32"),Tensor([2, 192, 0, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 0],"float32"),Tensor([2, 192, 5, 0],"float32"),Tensor([2, 768, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 0],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 0],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 0],"float32"),Tensor([2, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([0, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 768, 5, 5],"float32"),Tensor([2, 192, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 320, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),Tensor([0, 768, 5, 5],"float32"),Tensor([0, 192, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 0, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),Tensor([2, 768, 0, 5],"float32"),Tensor([2, 192, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 320, 5, 0],"float32"),Tensor([2, 768, 5, 0],"float32"),Tensor([2, 768, 5, 0],"float32"),Tensor([2, 192, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 336, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 336, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 336, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 336, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 336, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 7, 7],"float32"),Tensor([2, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 7],"float32"),Tensor([2, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 0],"float32"),Tensor([2, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 7],"float32"),Tensor([0, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 7],"float32"),Tensor([2, 352, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 7],"float32"),Tensor([2, 352, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 352, 7, 7],"float32"),Tensor([0, 352, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 0, 7],"float32"),Tensor([2, 352, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 352, 7, 0],"float32"),Tensor([2, 352, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 0],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([0, 96, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 0, 12],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 0],"float32"),Tensor([2, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([0, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 12],"float32"),Tensor([2, 96, 12, 12],"float32"),Tensor([2, 288, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 12, 12],"float32"),Tensor([0, 96, 12, 12],"float32"),Tensor([0, 288, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),Tensor([2, 0, 12, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 12],"float32"),Tensor([2, 96, 0, 12],"float32"),Tensor([2, 288, 0, 12],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 12, 0],"float32"),Tensor([2, 96, 12, 0],"float32"),Tensor([2, 288, 12, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 5, 5],"float32"),Tensor([2, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 5],"float32"),Tensor([2, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 0],"float32"),Tensor([2, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 5],"float32"),Tensor([0, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 5],"float32"),Tensor([2, 384, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 5],"float32"),Tensor([2, 384, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 5, 5],"float32"),Tensor([0, 384, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 5, 5],"float32"),Tensor([2, 0, 5, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 5],"float32"),Tensor([2, 384, 0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 5, 0],"float32"),Tensor([2, 384, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 0],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([0, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 0, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 0],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 0],"float32"),Tensor([2, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 0, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 6],"float32"),Tensor([2, 384, 6, 6],"float32"),Tensor([2, 128, 6, 6],"float32"),Tensor([2, 128, 6, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 384, 6, 6],"float32"),Tensor([0, 384, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),Tensor([0, 128, 6, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 0, 6],"float32"),Tensor([2, 384, 0, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),Tensor([2, 128, 0, 6],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 384, 6, 0],"float32"),Tensor([2, 384, 6, 0],"float32"),Tensor([2, 128, 6, 0],"float32"),Tensor([2, 128, 6, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 0, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 0],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 0, 4],"float32"),Tensor([2, 4, 0, 4],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2, 4, 8, 0],"float32"),Tensor([2, 4, 8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 416, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 416, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 416, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 432, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 432, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 432, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 432, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 432, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 448, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 448, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 7, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 0, 7],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 0],"float32"),Tensor([2, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 7],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 48, 7, 7],"float32"),Tensor([0, 48, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 0, 7],"float32"),Tensor([2, 48, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 48, 7, 0],"float32"),Tensor([2, 48, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 28, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 28],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 0],"float32"),Tensor([2, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 28, 28],"float32"),Tensor([0, 32, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 28],"float32"),Tensor([2, 32, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 0],"float32"),Tensor([2, 32, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 480, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 480, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 488, 7, 7],"float32"),Tensor([2, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 0, 7],"float32"),Tensor([2, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 0],"float32"),Tensor([2, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 7],"float32"),Tensor([0, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 7],"float32"),Tensor([2, 488, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 7],"float32"),Tensor([2, 488, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 488, 7, 7],"float32"),Tensor([0, 488, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 0, 7],"float32"),Tensor([2, 488, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 488, 7, 0],"float32"),Tensor([2, 488, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 5],"float32"),Tensor([2, 3],"float32"),Tensor([2, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 3],"float32"),Tensor([2, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 5],"float32"),Tensor([0, 3],"float32"),Tensor([2, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 5],"float32"),Tensor([2, 0],"float32"),Tensor([2, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 5],"float32"),Tensor([2, 3],"float32"),Tensor([0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 5],"float32"),Tensor([2, 3],"float32"),Tensor([2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 5],"float32"),Tensor([0, 3],"float32"),Tensor([0, 5],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 512, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"float16"),Tensor([2, 128],"float16"),Tensor([2, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float16"),Tensor([2, 128],"float16"),Tensor([2, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"float16"),Tensor([0, 128],"float16"),Tensor([2, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"float16"),Tensor([2, 0],"float16"),Tensor([2, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"float16"),Tensor([2, 128],"float16"),Tensor([0, 128],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"float16"),Tensor([2, 128],"float16"),Tensor([2, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float16"),Tensor([2, 0],"float16"),Tensor([2, 0],"float16"),], axis=1, )
paddle.concat(list[Tensor([0, 512],"int32"),Tensor([2, 128],"int32"),Tensor([2, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"int32"),Tensor([2, 128],"int32"),Tensor([2, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"int32"),Tensor([0, 128],"int32"),Tensor([2, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"int32"),Tensor([2, 0],"int32"),Tensor([2, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"int32"),Tensor([2, 128],"int32"),Tensor([0, 128],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 512],"int32"),Tensor([2, 128],"int32"),Tensor([2, 0],"int32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"int32"),Tensor([2, 0],"int32"),Tensor([2, 0],"int32"),], axis=1, )
paddle.concat(list[Tensor([0, 528, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 528, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 528, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 528, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 528, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 544, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 544, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 576, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 576, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 58, 28, 28],"float32"),Tensor([2, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 0, 28],"float32"),Tensor([2, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 0],"float32"),Tensor([2, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 28],"float32"),Tensor([0, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 28],"float32"),Tensor([2, 58, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 28],"float32"),Tensor([2, 58, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 58, 28, 28],"float32"),Tensor([0, 58, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 0, 28],"float32"),Tensor([2, 58, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 58, 28, 0],"float32"),Tensor([2, 58, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 608, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 608, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 624, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 624, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 624, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 624, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 624, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 0],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 0],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([0, 96, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 0, 25],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 0],"float32"),Tensor([2, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([0, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 0, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 32, 25, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),Tensor([0, 96, 25, 25],"float32"),Tensor([0, 32, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),Tensor([2, 96, 0, 25],"float32"),Tensor([2, 32, 0, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 0],"float32"),Tensor([2, 64, 25, 0],"float32"),Tensor([2, 96, 25, 0],"float32"),Tensor([2, 32, 25, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 0],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 0],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([0, 96, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 0, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 0, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 0],"float32"),Tensor([2, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 25],"float32"),Tensor([2, 64, 25, 25],"float32"),Tensor([2, 96, 25, 25],"float32"),Tensor([2, 64, 25, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),Tensor([0, 96, 25, 25],"float32"),Tensor([0, 64, 25, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),Tensor([2, 96, 0, 25],"float32"),Tensor([2, 64, 0, 25],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 25, 0],"float32"),Tensor([2, 64, 25, 0],"float32"),Tensor([2, 96, 25, 0],"float32"),Tensor([2, 64, 25, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 0],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([0, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 0, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 0],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([0, 32, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 0, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 0],"float32"),Tensor([2, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([0, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 0, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 27],"float32"),Tensor([2, 128, 27, 27],"float32"),Tensor([2, 32, 27, 27],"float32"),Tensor([2, 32, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 27, 27],"float32"),Tensor([0, 128, 27, 27],"float32"),Tensor([0, 32, 27, 27],"float32"),Tensor([0, 32, 27, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 27],"float32"),Tensor([2, 128, 0, 27],"float32"),Tensor([2, 32, 0, 27],"float32"),Tensor([2, 32, 0, 27],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 27, 0],"float32"),Tensor([2, 128, 27, 0],"float32"),Tensor([2, 32, 27, 0],"float32"),Tensor([2, 32, 27, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 54, 54],"float32"),Tensor([2, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 54, 54],"float32"),Tensor([2, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 54],"float32"),Tensor([2, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 0],"float32"),Tensor([2, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 54],"float32"),Tensor([0, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 54],"float32"),Tensor([2, 0, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 54],"float32"),Tensor([2, 64, 0, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 54],"float32"),Tensor([2, 64, 54, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 54, 54],"float32"),Tensor([0, 64, 54, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 54],"float32"),Tensor([2, 64, 0, 54],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 54, 0],"float32"),Tensor([2, 64, 54, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 55, 55],"float32"),Tensor([2, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 55, 55],"float32"),Tensor([2, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 55],"float32"),Tensor([2, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 0],"float32"),Tensor([2, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 55],"float32"),Tensor([0, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 55],"float32"),Tensor([2, 0, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 55],"float32"),Tensor([2, 64, 0, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 55],"float32"),Tensor([2, 64, 55, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 55, 55],"float32"),Tensor([0, 64, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 55, 55],"float32"),Tensor([2, 0, 55, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 55],"float32"),Tensor([2, 64, 0, 55],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 55, 0],"float32"),Tensor([2, 64, 55, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 7, 7],"float32"),Tensor([2, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 7],"float32"),Tensor([2, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 0],"float32"),Tensor([2, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 7],"float32"),Tensor([0, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 7],"float32"),Tensor([2, 64, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 7],"float32"),Tensor([2, 64, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 64, 7, 7],"float32"),Tensor([0, 64, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 0, 7],"float32"),Tensor([2, 64, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 64, 7, 0],"float32"),Tensor([2, 64, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 640, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 640, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 66],"float32"),Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0],"float32"),Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 66],"float32"),Tensor([0, 66],"float32"),Tensor([2, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 66],"float32"),Tensor([2, 0],"float32"),Tensor([2, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),Tensor([0, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 66],"float32"),Tensor([2, 66],"float32"),Tensor([2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 66],"float32"),Tensor([0, 66],"float32"),Tensor([0, 66],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 672, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 672, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 704, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 704, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 720, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 720, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 720, 28, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 0, 28],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 0],"float32"),Tensor([2, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 28],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 720, 28, 28],"float32"),Tensor([0, 48, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 0, 28],"float32"),Tensor([2, 48, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 720, 28, 0],"float32"),Tensor([2, 48, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 736, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 736, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 768, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 768, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 8, 128, 64],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 128, 64],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 0, 64],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 0],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 64],"float16"),Tensor([0, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 64],"float16"),Tensor([2, 0, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 64],"float16"),Tensor([2, 8, 0, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 64],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 128, 64],"float16"),Tensor([0, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 128, 64],"float16"),Tensor([2, 0, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 0, 64],"float16"),Tensor([2, 8, 0, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 128, 0],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 64, 64],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 64, 64],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([0, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([2, 0, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([2, 8, 0, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 64, 64],"float16"),Tensor([0, 8, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 64, 64],"float16"),Tensor([2, 0, 1, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 64, 64],"float16"),Tensor([2, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 64, 64],"float16"),Tensor([2, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 0, 64],"float16"),Tensor([2, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([0, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([2, 0, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 64],"float16"),Tensor([2, 8, 64, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 64, 64],"float16"),Tensor([0, 8, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 64, 64],"float16"),Tensor([2, 0, 64, 64],"float16"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 64, 0],"float16"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=2, )
paddle.concat(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 800, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 800, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 800, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 816, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 816, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 816, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 832, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 832, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 864, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 864, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 88, 28, 28],"float32"),Tensor([2, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 28, 28],"float32"),Tensor([2, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 0, 28],"float32"),Tensor([2, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 0],"float32"),Tensor([2, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 28],"float32"),Tensor([0, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 28],"float32"),Tensor([2, 0, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 28],"float32"),Tensor([2, 88, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 28],"float32"),Tensor([2, 88, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 88, 28, 28],"float32"),Tensor([0, 88, 28, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 0, 28],"float32"),Tensor([2, 88, 0, 28],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 88, 28, 0],"float32"),Tensor([2, 88, 28, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 896, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 896, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 912, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 912, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 912, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 928, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 928, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 56, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 56],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 0],"float32"),Tensor([2, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([2, 0, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 56, 56],"float32"),Tensor([0, 32, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 56],"float32"),Tensor([2, 32, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 0],"float32"),Tensor([2, 32, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 56, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 56],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 0],"float32"),Tensor([2, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 56],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 56, 56],"float32"),Tensor([0, 48, 56, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 56],"float32"),Tensor([2, 48, 0, 56],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 56, 0],"float32"),Tensor([2, 48, 56, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 7, 7],"float32"),Tensor([2, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 0, 7, 7],"float32"),Tensor([2, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 7],"float32"),Tensor([2, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 0],"float32"),Tensor([2, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 7],"float32"),Tensor([0, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 7],"float32"),Tensor([2, 96, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 7],"float32"),Tensor([2, 96, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 96, 7, 7],"float32"),Tensor([0, 96, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 0, 7],"float32"),Tensor([2, 96, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 96, 7, 0],"float32"),Tensor([2, 96, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 14, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 14],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 0],"float32"),Tensor([2, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 14],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 14, 14],"float32"),Tensor([0, 48, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 14],"float32"),Tensor([2, 48, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 14, 0],"float32"),Tensor([2, 48, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 960, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 960, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 14, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 0, 14],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 0],"float32"),Tensor([2, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 14],"float32"),Tensor([2, 0, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 14],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 14, 14],"float32"),Tensor([0, 32, 14, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 0, 14],"float32"),Tensor([2, 32, 0, 14],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 14, 0],"float32"),Tensor([2, 32, 14, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 7, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 0, 7],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 0],"float32"),Tensor([2, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 7],"float32"),Tensor([2, 0, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 7],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 992, 7, 7],"float32"),Tensor([0, 32, 7, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 0, 7],"float32"),Tensor([2, 32, 0, 7],"float32"),], axis=1, )
paddle.concat(list[Tensor([2, 992, 7, 0],"float32"),Tensor([2, 32, 7, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0],"float64"),Tensor([2],"float64"),], axis=0, )
paddle.concat(list[Tensor([2],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"int64"),Tensor([2],"int64"),], -1, )
paddle.concat(list[Tensor([2],"int64"),Tensor([0],"int64"),], -1, )
paddle.concat(list[Tensor([0],"int64"),Tensor([0],"int64"),], -1, )
paddle.concat(list[Tensor([0],"int64"),Tensor([2],"int64"),], axis=0, )
paddle.concat(list[Tensor([2],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.concat(list[Tensor([0],"float16"),Tensor([100],"float16"),], )
paddle.concat(list[Tensor([200],"float16"),Tensor([0],"float16"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([100],"float32"),], )
paddle.concat(list[Tensor([200],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float64"),Tensor([100],"float64"),], )
paddle.concat(list[Tensor([200],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0],"int32"),Tensor([100],"int32"),], )
paddle.concat(list[Tensor([200],"int32"),Tensor([0],"int32"),], )
paddle.concat(list[Tensor([0],"int64"),Tensor([100],"int64"),], )
paddle.concat(list[Tensor([200],"int64"),Tensor([0],"int64"),], )
paddle.concat(list[Tensor([0, 64],"float32"),Tensor([2048, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2048, 0],"float32"),Tensor([2048, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2048, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2048, 64],"float32"),Tensor([2048, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 64],"float32"),Tensor([0, 64],"float32"),], axis=-1, )
paddle.concat(list[Tensor([2048, 0],"float32"),Tensor([2048, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),Tensor([24],"float64"),], axis=0, )
paddle.concat(list[Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([24],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([256],"float64"),], )
paddle.concat(list[Tensor([257],"float64"),Tensor([0],"float64"),], )
paddle.concat(list[Tensor([0, 100, 120],"float64"),Tensor([3, 100, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 0, 120],"float64"),Tensor([3, 100, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 100, 0],"float64"),Tensor([3, 100, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 100, 120],"float64"),Tensor([0, 100, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 100, 120],"float64"),Tensor([3, 0, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 100, 120],"float64"),Tensor([3, 100, 0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0, 100, 120],"float64"),Tensor([0, 100, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 0, 120],"float64"),Tensor([3, 0, 120],"float64"),], axis=0, )
paddle.concat(list[Tensor([3, 100, 0],"float64"),Tensor([3, 100, 0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 0],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([3, 0, 1],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([3, 2, 0],"float64"),Tensor([3, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 1],"float64"),Tensor([3, 2, 1],"float64"),Tensor([3, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 1],"float64"),Tensor([3, 0, 1],"float64"),Tensor([3, 0, 1],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 2, 0],"float64"),Tensor([3, 2, 0],"float64"),Tensor([3, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0],"float32"),Tensor([1, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([3, 2],"float32"),Tensor([0, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([3, 2],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([3, 0],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], axis=2, name=None, )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),], )
paddle.concat(list[Tensor([3, 0],"float32"),Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),], )
paddle.concat(list[Tensor([3, 4],"float32"),Tensor([0, 4],"float32"),Tensor([3, 4],"float32"),], )
paddle.concat(list[Tensor([3, 4],"float32"),Tensor([3, 0],"float32"),Tensor([3, 4],"float32"),], )
paddle.concat(list[Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),Tensor([3, 0],"float32"),], )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([3, 0],"float32"),Tensor([3, 0],"float32"),Tensor([3, 0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),], axis=0, )
paddle.concat(list[Tensor([3],"float32"),Tensor([0],"float32"),Tensor([3],"float32"),], axis=0, )
paddle.concat(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 8],"float32"),Tensor([32, 8],"float32"),], 1, )
paddle.concat(list[Tensor([32, 0],"float32"),Tensor([32, 8],"float32"),], 1, )
paddle.concat(list[Tensor([32, 8],"float32"),Tensor([0, 8],"float32"),], 1, )
paddle.concat(list[Tensor([32, 8],"float32"),Tensor([32, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], 1, )
paddle.concat(list[Tensor([32, 0],"float32"),Tensor([32, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 13],"float32"),Tensor([34, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([34, 0],"float32"),Tensor([34, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([34, 13],"float32"),Tensor([0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([34, 13],"float32"),Tensor([34, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 13],"float32"),Tensor([0, 13],"float32"),], axis=1, )
paddle.concat(list[Tensor([34, 0],"float32"),Tensor([34, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([0, 10],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([4, 0],"float32"),Tensor([4, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 10],"float32"),Tensor([4, 10],"float32"),Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),Tensor([0, 10],"float32"),], 1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 101],"float16"),Tensor([4, 101],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float16"),Tensor([4, 101],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float16"),Tensor([0, 101],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float16"),Tensor([4, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"float16"),Tensor([0, 101],"float16"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float16"),Tensor([4, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"float32"),Tensor([4, 101],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 101],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float32"),Tensor([0, 101],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float32"),Tensor([4, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"float32"),Tensor([0, 101],"float32"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"float64"),Tensor([4, 101],"float64"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float64"),Tensor([4, 101],"float64"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float64"),Tensor([0, 101],"float64"),], axis=-1, )
paddle.concat(list[Tensor([4, 101],"float64"),Tensor([4, 0],"float64"),], axis=-1, )
paddle.concat(list[Tensor([0, 101],"float64"),Tensor([0, 101],"float64"),], axis=-1, )
paddle.concat(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], axis=-1, )
paddle.concat(list[Tensor([0, 12, 32],"float64"),Tensor([4, 12, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 0, 32],"float64"),Tensor([4, 12, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 0],"float64"),Tensor([4, 12, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 32],"float64"),Tensor([0, 12, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 32],"float64"),Tensor([4, 0, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 32],"float64"),Tensor([4, 12, 0],"float64"),], -1, )
paddle.concat(list[Tensor([0, 12, 32],"float64"),Tensor([0, 12, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 0, 32],"float64"),Tensor([4, 0, 32],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 0],"float64"),Tensor([4, 12, 0],"float64"),], -1, )
paddle.concat(list[Tensor([0, 12, 8],"float64"),Tensor([4, 12, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 0, 8],"float64"),Tensor([4, 12, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 0],"float64"),Tensor([4, 12, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 8],"float64"),Tensor([0, 12, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 8],"float64"),Tensor([4, 0, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 12, 8],"float64"),Tensor([4, 12, 0],"float64"),], -1, )
paddle.concat(list[Tensor([0, 12, 8],"float64"),Tensor([0, 12, 8],"float64"),], -1, )
paddle.concat(list[Tensor([4, 0, 8],"float64"),Tensor([4, 0, 8],"float64"),], -1, )
paddle.concat(list[Tensor([0, 128, 76, 76],"float32"),Tensor([4, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 76, 76],"float32"),Tensor([4, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 0, 76],"float32"),Tensor([4, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 0],"float32"),Tensor([4, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 76],"float32"),Tensor([0, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 76],"float32"),Tensor([4, 0, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 76],"float32"),Tensor([4, 256, 0, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 76],"float32"),Tensor([4, 256, 76, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 128, 76, 76],"float32"),Tensor([0, 256, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 76, 76],"float32"),Tensor([4, 0, 76, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 0, 76],"float32"),Tensor([4, 256, 0, 76],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 128, 76, 0],"float32"),Tensor([4, 256, 76, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([1, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([4, 2],"float32"),Tensor([0, 2],"float32"),], axis=0, )
paddle.concat(list[Tensor([4, 2],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 20, 20],"float16"),Tensor([4, 20, 20],"float16"),], )
paddle.concat(list[Tensor([4, 0, 20],"float16"),Tensor([4, 20, 20],"float16"),], )
paddle.concat(list[Tensor([4, 20, 0],"float16"),Tensor([4, 20, 20],"float16"),], )
paddle.concat(list[Tensor([4, 20, 20],"float16"),Tensor([0, 20, 20],"float16"),], )
paddle.concat(list[Tensor([4, 20, 20],"float16"),Tensor([4, 0, 20],"float16"),], )
paddle.concat(list[Tensor([4, 20, 20],"float16"),Tensor([4, 20, 0],"float16"),], )
paddle.concat(list[Tensor([4, 0, 20],"float16"),Tensor([4, 0, 20],"float16"),], )
paddle.concat(list[Tensor([4, 20, 0],"float16"),Tensor([4, 20, 0],"float16"),], )
paddle.concat(list[Tensor([0, 256, 38, 38],"float32"),Tensor([4, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 38, 38],"float32"),Tensor([4, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 0, 38],"float32"),Tensor([4, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 0],"float32"),Tensor([4, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 38],"float32"),Tensor([0, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 38],"float32"),Tensor([4, 0, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 38],"float32"),Tensor([4, 512, 0, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 38],"float32"),Tensor([4, 512, 38, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 256, 38, 38],"float32"),Tensor([0, 512, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 38, 38],"float32"),Tensor([4, 0, 38, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 0, 38],"float32"),Tensor([4, 512, 0, 38],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 256, 38, 0],"float32"),Tensor([4, 512, 38, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),], )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([0, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),Tensor([4, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([0, 4],"float32"),], )
paddle.concat(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),Tensor([4, 0],"float32"),], )
paddle.concat(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], )
paddle.concat(list[Tensor([0, 5, 20],"float32"),Tensor([4, 5, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 20],"float32"),Tensor([4, 5, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 5, 0],"float32"),Tensor([4, 5, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 5, 20],"float32"),Tensor([0, 5, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 5, 20],"float32"),Tensor([4, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 5, 20],"float32"),Tensor([4, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 5, 20],"float32"),Tensor([0, 5, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 0, 20],"float32"),Tensor([4, 0, 20],"float32"),], axis=1, )
paddle.concat(list[Tensor([4, 5, 0],"float32"),Tensor([4, 5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),], axis=0, )
paddle.concat(list[Tensor([4],"float32"),Tensor([0],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),], axis=0, )
paddle.concat(list[Tensor([4],"float32"),Tensor([4],"float32"),Tensor([0],"float32"),Tensor([4],"float32"),], axis=0, )
paddle.concat(list[Tensor([4],"float32"),Tensor([4],"float32"),Tensor([4],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([4],"float64"),], axis=0, )
paddle.concat(list[Tensor([4],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0, 50, 50, 5],"float32"),Tensor([60, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 0, 50, 5],"float32"),Tensor([60, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 0, 5],"float32"),Tensor([60, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 0],"float32"),Tensor([60, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 5],"float32"),Tensor([0, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 5],"float32"),Tensor([60, 0, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 5],"float32"),Tensor([60, 50, 0, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 5],"float32"),Tensor([60, 50, 50, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 50, 50, 5],"float32"),Tensor([0, 50, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 0, 50, 5],"float32"),Tensor([60, 0, 50, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 0, 5],"float32"),Tensor([60, 50, 0, 5],"float32"),], axis=0, )
paddle.concat(list[Tensor([40, 50, 50, 0],"float32"),Tensor([60, 50, 50, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 4098],"float32"),Tensor([4098, 4098],"float32"),], )
paddle.concat(list[Tensor([4098, 0],"float32"),Tensor([4098, 4098],"float32"),], )
paddle.concat(list[Tensor([4098, 4098],"float32"),Tensor([0, 4098],"float32"),], )
paddle.concat(list[Tensor([4098, 4098],"float32"),Tensor([4098, 0],"float32"),], )
paddle.concat(list[Tensor([0, 4098],"float32"),Tensor([0, 4098],"float32"),], )
paddle.concat(list[Tensor([4098, 0],"float32"),Tensor([4098, 0],"float32"),], )
paddle.concat(list[Tensor([0, 1],"float64"),Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 0],"float64"),Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 1],"float64"),Tensor([0, 1],"float64"),Tensor([5, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 1],"float64"),Tensor([5, 0],"float64"),Tensor([5, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),Tensor([0, 1],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 1],"float64"),Tensor([5, 1],"float64"),Tensor([5, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([5, 0],"float64"),Tensor([5, 0],"float64"),Tensor([5, 0],"float64"),], axis=1, name=None, )
paddle.concat(list[Tensor([0, 2, 2],"float32"),Tensor([5, 2, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 0, 2],"float32"),Tensor([5, 2, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 2, 0],"float32"),Tensor([5, 2, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 2, 2],"float32"),Tensor([0, 2, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 2, 2],"float32"),Tensor([5, 0, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 2, 2],"float32"),Tensor([5, 2, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 2, 2],"float32"),Tensor([0, 2, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 0, 2],"float32"),Tensor([5, 0, 2],"float32"),], axis=2, )
paddle.concat(list[Tensor([5, 2, 0],"float32"),Tensor([5, 2, 0],"float32"),], axis=2, )
paddle.concat(list[Tensor([0, 2, 4],"float32"),Tensor([5, 2, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0, 4],"float32"),Tensor([5, 2, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2, 0],"float32"),Tensor([5, 2, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2, 4],"float32"),Tensor([0, 2, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2, 4],"float32"),Tensor([5, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2, 4],"float32"),Tensor([5, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2, 4],"float32"),Tensor([0, 2, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0, 4],"float32"),Tensor([5, 0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2, 0],"float32"),Tensor([5, 2, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([5, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0],"float32"),Tensor([5, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2],"float32"),Tensor([0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 2],"float32"),Tensor([5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([0, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([5, 0],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([0, 4],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 0],"float32"),Tensor([5, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 4],"float32"),Tensor([5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),Tensor([0, 4],"float32"),], axis=1, )
paddle.concat(list[Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),], axis=1, )
paddle.concat(list[Tensor([0, 50, 50],"float32"),Tensor([10, 50, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 0, 50],"float32"),Tensor([10, 50, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 50, 0],"float32"),Tensor([10, 50, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 50, 50],"float32"),Tensor([0, 50, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 50, 50],"float32"),Tensor([10, 0, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 50, 50],"float32"),Tensor([10, 50, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0, 50, 50],"float32"),Tensor([0, 50, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 0, 50],"float32"),Tensor([10, 0, 50],"float32"),], axis=0, )
paddle.concat(list[Tensor([5, 50, 0],"float32"),Tensor([10, 50, 0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], axis=0, name=None, )
paddle.concat(list[Tensor([0],"float16"),Tensor([128],"float16"),Tensor([128],"float16"),], axis=-1, )
paddle.concat(list[Tensor([512],"float16"),Tensor([0],"float16"),Tensor([128],"float16"),], axis=-1, )
paddle.concat(list[Tensor([512],"float16"),Tensor([128],"float16"),Tensor([0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0],"float16"),Tensor([512],"float16"),Tensor([512],"float16"),], axis=-1, )
paddle.concat(list[Tensor([512],"float16"),Tensor([0],"float16"),Tensor([512],"float16"),], axis=-1, )
paddle.concat(list[Tensor([512],"float16"),Tensor([512],"float16"),Tensor([0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0],"float32"),Tensor([128],"float32"),Tensor([128],"float32"),], axis=0, )
paddle.concat(list[Tensor([512],"float32"),Tensor([0],"float32"),Tensor([128],"float32"),], axis=0, )
paddle.concat(list[Tensor([512],"float32"),Tensor([128],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([512],"float32"),Tensor([512],"float32"),], axis=0, )
paddle.concat(list[Tensor([512],"float32"),Tensor([0],"float32"),Tensor([512],"float32"),], axis=0, )
paddle.concat(list[Tensor([512],"float32"),Tensor([512],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([36],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([6],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),], )
paddle.concat(list[Tensor([6],"float32"),Tensor([36],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([6],"float32"),], )
paddle.concat(list[Tensor([6],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([9],"float32"),], )
paddle.concat(list[Tensor([0],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([0],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([6],"float64"),Tensor([0],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([0],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([0],"float64"),Tensor([6],"float64"),], axis=0, )
paddle.concat(list[Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([6],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0, 32],"float16"),Tensor([64, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([64, 0],"float16"),Tensor([64, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([64, 32],"float16"),Tensor([0, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([64, 32],"float16"),Tensor([64, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 32],"float16"),Tensor([0, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([64, 0],"float16"),Tensor([64, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 96],"float32"),Tensor([64, 96],"float32"),], 0, )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 96],"float32"),], 0, )
paddle.concat(list[Tensor([64, 96],"float32"),Tensor([0, 96],"float32"),], 0, )
paddle.concat(list[Tensor([64, 96],"float32"),Tensor([64, 0],"float32"),], 0, )
paddle.concat(list[Tensor([0, 96],"float32"),Tensor([0, 96],"float32"),], 0, )
paddle.concat(list[Tensor([64, 0],"float32"),Tensor([64, 0],"float32"),], 0, )
paddle.concat(list[Tensor([0, 32],"float16"),Tensor([65, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([65, 0],"float16"),Tensor([65, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([65, 32],"float16"),Tensor([0, 32],"float16"),], axis=-1, )
paddle.concat(list[Tensor([65, 32],"float16"),Tensor([65, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([65, 0],"float16"),Tensor([65, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float16"),Tensor([8, 100],"float16"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float16"),Tensor([8, 100],"float16"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float16"),Tensor([0, 100],"float16"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float16"),Tensor([8, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float16"),Tensor([0, 100],"float16"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float16"),Tensor([8, 0],"float16"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float32"),Tensor([8, 100],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float32"),Tensor([8, 100],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float32"),Tensor([0, 100],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float32"),Tensor([8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float32"),Tensor([0, 100],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float64"),Tensor([8, 100],"float64"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float64"),Tensor([8, 100],"float64"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float64"),Tensor([0, 100],"float64"),], axis=-1, )
paddle.concat(list[Tensor([8, 100],"float64"),Tensor([8, 0],"float64"),], axis=-1, )
paddle.concat(list[Tensor([0, 100],"float64"),Tensor([0, 100],"float64"),], axis=-1, )
paddle.concat(list[Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),], axis=-1, )
paddle.concat(list[Tensor([0, 16, 128, 64],"float32"),Tensor([8, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 0, 128, 64],"float32"),Tensor([8, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 0, 64],"float32"),Tensor([8, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 0],"float32"),Tensor([8, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 64],"float32"),Tensor([0, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 64],"float32"),Tensor([8, 0, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 64],"float32"),Tensor([8, 16, 0, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 64],"float32"),Tensor([8, 16, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 16, 128, 64],"float32"),Tensor([0, 16, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 0, 128, 64],"float32"),Tensor([8, 0, 1, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 0, 64],"float32"),Tensor([8, 16, 0, 64],"float32"),], axis=-2, )
paddle.concat(list[Tensor([8, 16, 128, 0],"float32"),Tensor([8, 16, 1, 0],"float32"),], axis=-2, )
paddle.concat(list[Tensor([0, 16, 2],"float32"),Tensor([8, 16, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 0, 2],"float32"),Tensor([8, 16, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 0],"float32"),Tensor([8, 16, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 2],"float32"),Tensor([0, 16, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 2],"float32"),Tensor([8, 0, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 2],"float32"),Tensor([8, 16, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 16, 2],"float32"),Tensor([0, 16, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 0, 2],"float32"),Tensor([8, 0, 2],"float32"),], axis=-1, )
paddle.concat(list[Tensor([8, 16, 0],"float32"),Tensor([8, 16, 0],"float32"),], axis=-1, )
paddle.concat(list[Tensor([0, 16],"float32"),Tensor([8, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 16],"float32"),Tensor([0, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 16],"float32"),Tensor([8, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 16],"float32"),Tensor([0, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], 1, )
paddle.concat(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], 1, )
paddle.concat(list[Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([8],"float32"),], axis=0, )
paddle.concat(list[Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([8],"float64"),], axis=0, )
paddle.concat(list[Tensor([8],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),], axis=0, )
paddle.concat(list[Tensor([8],"float64"),Tensor([0],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),], axis=0, )
paddle.concat(list[Tensor([8],"float64"),Tensor([8],"float64"),Tensor([0],"float64"),Tensor([8],"float64"),], axis=0, )
paddle.concat(list[Tensor([8],"float64"),Tensor([8],"float64"),Tensor([8],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], axis=0, )
paddle.concat(list[Tensor([0],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([0],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([8],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([0],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([0],"float32"),Tensor([10],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([0],"float32"),Tensor([200],"float32"),], )
paddle.concat(list[Tensor([80],"float32"),Tensor([8],"float32"),Tensor([80],"float32"),Tensor([10],"float32"),Tensor([100],"float32"),Tensor([10],"float32"),Tensor([0],"float32"),], )
paddle.concat(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.concat(tuple(Tensor([0, 3, 28, 28],"float32"),Tensor([1, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 28, 28],"float32"),Tensor([1, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 28],"float32"),Tensor([1, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 0],"float32"),Tensor([1, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 28],"float32"),Tensor([0, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 28],"float32"),Tensor([1, 0, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 28],"float32"),Tensor([1, 1, 0, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 28],"float32"),Tensor([1, 1, 28, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 28, 28],"float32"),Tensor([0, 1, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 28, 28],"float32"),Tensor([1, 0, 28, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 28],"float32"),Tensor([1, 1, 0, 28],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 28, 0],"float32"),Tensor([1, 1, 28, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 280, 350],"float32"),Tensor([1, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 280, 350],"float32"),Tensor([1, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 350],"float32"),Tensor([1, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 0],"float32"),Tensor([1, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 350],"float32"),Tensor([0, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 350],"float32"),Tensor([1, 0, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 350],"float32"),Tensor([1, 1, 0, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 350],"float32"),Tensor([1, 1, 280, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 280, 350],"float32"),Tensor([0, 1, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 280, 350],"float32"),Tensor([1, 0, 280, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 350],"float32"),Tensor([1, 1, 0, 350],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 280, 0],"float32"),Tensor([1, 1, 280, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 32, 26],"float32"),Tensor([1, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 32, 26],"float32"),Tensor([1, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 26],"float32"),Tensor([1, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 0],"float32"),Tensor([1, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 26],"float32"),Tensor([0, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 26],"float32"),Tensor([1, 0, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 26],"float32"),Tensor([1, 1, 0, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 26],"float32"),Tensor([1, 1, 32, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 32, 26],"float32"),Tensor([0, 1, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 32, 26],"float32"),Tensor([1, 0, 32, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 26],"float32"),Tensor([1, 1, 0, 26],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 32, 0],"float32"),Tensor([1, 1, 32, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 400, 300],"float32"),Tensor([1, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 400, 300],"float32"),Tensor([1, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 300],"float32"),Tensor([1, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 0],"float32"),Tensor([1, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 300],"float32"),Tensor([0, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 300],"float32"),Tensor([1, 0, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 300],"float32"),Tensor([1, 1, 0, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 300],"float32"),Tensor([1, 1, 400, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 400, 300],"float32"),Tensor([0, 1, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 400, 300],"float32"),Tensor([1, 0, 400, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 300],"float32"),Tensor([1, 1, 0, 300],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 400, 0],"float32"),Tensor([1, 1, 400, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 410, 440],"float32"),Tensor([1, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 410, 440],"float32"),Tensor([1, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 440],"float32"),Tensor([1, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 0],"float32"),Tensor([1, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 440],"float32"),Tensor([0, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 440],"float32"),Tensor([1, 0, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 440],"float32"),Tensor([1, 1, 0, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 440],"float32"),Tensor([1, 1, 410, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 410, 440],"float32"),Tensor([0, 1, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 410, 440],"float32"),Tensor([1, 0, 410, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 440],"float32"),Tensor([1, 1, 0, 440],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 410, 0],"float32"),Tensor([1, 1, 410, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 432, 448],"float32"),Tensor([1, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 432, 448],"float32"),Tensor([1, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 448],"float32"),Tensor([1, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 0],"float32"),Tensor([1, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 448],"float32"),Tensor([0, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 448],"float32"),Tensor([1, 0, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 448],"float32"),Tensor([1, 1, 0, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 448],"float32"),Tensor([1, 1, 432, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 432, 448],"float32"),Tensor([0, 1, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 432, 448],"float32"),Tensor([1, 0, 432, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 448],"float32"),Tensor([1, 1, 0, 448],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 432, 0],"float32"),Tensor([1, 1, 432, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 458, 384],"float32"),Tensor([1, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 458, 384],"float32"),Tensor([1, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 384],"float32"),Tensor([1, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 0],"float32"),Tensor([1, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 384],"float32"),Tensor([0, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 384],"float32"),Tensor([1, 0, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 384],"float32"),Tensor([1, 1, 0, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 384],"float32"),Tensor([1, 1, 458, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 458, 384],"float32"),Tensor([0, 1, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 458, 384],"float32"),Tensor([1, 0, 458, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 384],"float32"),Tensor([1, 1, 0, 384],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 458, 0],"float32"),Tensor([1, 1, 458, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 498, 494],"float32"),Tensor([1, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 498, 494],"float32"),Tensor([1, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 494],"float32"),Tensor([1, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 0],"float32"),Tensor([1, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 494],"float32"),Tensor([0, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 494],"float32"),Tensor([1, 0, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 494],"float32"),Tensor([1, 1, 0, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 494],"float32"),Tensor([1, 1, 498, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 498, 494],"float32"),Tensor([0, 1, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 498, 494],"float32"),Tensor([1, 0, 498, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 494],"float32"),Tensor([1, 1, 0, 494],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 498, 0],"float32"),Tensor([1, 1, 498, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 64, 64],"float32"),Tensor([1, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 64, 64],"float32"),Tensor([1, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 64],"float32"),Tensor([1, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 0],"float32"),Tensor([1, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 64],"float32"),Tensor([0, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 64],"float32"),Tensor([1, 1, 0, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 64],"float32"),Tensor([1, 1, 64, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 64, 64],"float32"),Tensor([0, 1, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 64, 64],"float32"),Tensor([1, 0, 64, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 64],"float32"),Tensor([1, 1, 0, 64],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 64, 0],"float32"),Tensor([1, 1, 64, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 8, 8],"float32"),Tensor([1, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 8, 8],"float32"),Tensor([1, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 8],"float32"),Tensor([1, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 0],"float32"),Tensor([1, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 8],"float32"),Tensor([0, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 8],"float32"),Tensor([1, 0, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 8],"float32"),Tensor([1, 1, 0, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 8],"float32"),Tensor([1, 1, 8, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 8, 8],"float32"),Tensor([0, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 0, 8, 8],"float32"),Tensor([1, 0, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 0, 8],"float32"),Tensor([1, 1, 0, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([1, 3, 8, 0],"float32"),Tensor([1, 1, 8, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0],"float32"),), )
paddle.concat(tuple(Tensor([0],"float64"),Tensor([1],"float64"),), )
paddle.concat(tuple(Tensor([1],"float64"),Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0],"float64"),Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0],"float64"),Tensor([12],"float64"),), )
paddle.concat(tuple(Tensor([12],"float64"),Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0, 12],"float64"),), 1, )
paddle.concat(tuple(Tensor([2, 0],"float64"),), 1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),Tensor([2, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0],"float32"),Tensor([2, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 2],"float32"),Tensor([0, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 2],"float32"),Tensor([2, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),Tensor([0, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 32, 32],"float32"),Tensor([2, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 0, 32, 32],"float32"),Tensor([2, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 0, 32],"float32"),Tensor([2, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 0],"float32"),Tensor([2, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 32],"float32"),Tensor([0, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 32],"float32"),Tensor([2, 0, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 32],"float32"),Tensor([2, 3, 0, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 32],"float32"),Tensor([2, 3, 32, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 3, 32, 32],"float32"),Tensor([0, 3, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 0, 32, 32],"float32"),Tensor([2, 0, 32, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 0, 32],"float32"),Tensor([2, 3, 0, 32],"float32"),), 1, )
paddle.concat(tuple(Tensor([2, 3, 32, 0],"float32"),Tensor([2, 3, 32, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 3, 4, 4],"float32"),Tensor([2, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0, 4, 4],"float32"),Tensor([2, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 0, 4],"float32"),Tensor([2, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 0],"float32"),Tensor([2, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 4],"float32"),Tensor([0, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 4],"float32"),Tensor([2, 0, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 4],"float32"),Tensor([2, 1, 4, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 4, 4],"float32"),Tensor([0, 1, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0, 4, 4],"float32"),Tensor([2, 0, 4, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 0, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 4, 0],"float32"),Tensor([2, 1, 4, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3, 8, 8],"float32"),Tensor([2, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0, 8, 8],"float32"),Tensor([2, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 0, 8],"float32"),Tensor([2, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 0],"float32"),Tensor([2, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 8],"float32"),Tensor([0, 1, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 8],"float32"),Tensor([2, 1, 0, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 8],"float32"),Tensor([2, 1, 8, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 0, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 0, 8],"float32"),Tensor([2, 1, 0, 8],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([2, 3, 8, 0],"float32"),Tensor([2, 1, 8, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 3],"float64"),), 1, )
paddle.concat(tuple(Tensor([0],"float32"),Tensor([2],"float32"),), )
paddle.concat(tuple(Tensor([2],"float32"),Tensor([0],"float32"),), )
paddle.concat(tuple(Tensor([0],"float32"),Tensor([0],"float32"),), )
paddle.concat(tuple(Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0, 3],"float32"),), 1, )
paddle.concat(tuple(Tensor([3, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0],"float64"),Tensor([3],"float64"),), )
paddle.concat(tuple(Tensor([3],"float64"),Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0, 1],"float32"),Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 0],"float32"),Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 1],"float32"),Tensor([0, 1],"float32"),Tensor([4, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 1],"float32"),Tensor([4, 0],"float32"),Tensor([4, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),Tensor([0, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 1],"float32"),Tensor([4, 1],"float32"),Tensor([4, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),), axis=1, )
paddle.concat(tuple(Tensor([0],"float32"),Tensor([4],"float32"),), )
paddle.concat(tuple(Tensor([4],"float32"),Tensor([0],"float32"),), )
paddle.concat(tuple(Tensor([0],"float64"),Tensor([4],"float64"),), )
paddle.concat(tuple(Tensor([4],"float64"),Tensor([0],"float64"),), )
paddle.concat(tuple(Tensor([0, 1],"float32"),), 1, )
paddle.concat(tuple(Tensor([5, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),Tensor([5, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([5, 0],"float32"),Tensor([5, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([5, 2],"float32"),Tensor([0, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([5, 2],"float32"),Tensor([5, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),), 1, )
paddle.concat(tuple(Tensor([5, 0],"float32"),Tensor([5, 0],"float32"),), 1, )
paddle.concat(tuple(Tensor([0, 4],"float32"),), 1, )
paddle.concat(tuple(Tensor([0],"float16"),Tensor([60],"float16"),), )
paddle.concat(tuple(Tensor([60],"float16"),Tensor([0],"float16"),), )
paddle.concat(tuple(Tensor([0],"float16"),Tensor([0],"float16"),), )
paddle.concat(tuple(Tensor([0],"float32"),Tensor([60],"float32"),), )
paddle.concat(tuple(Tensor([60],"float32"),Tensor([0],"float32"),), )
paddle.concat(x=list[Tensor([0, 3],"float32"),Tensor([1, 3],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 0],"float32"),Tensor([1, 3],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 3],"float32"),Tensor([0, 3],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 3],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([0, 3],"float32"),Tensor([0, 3],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([0, 8, 14, 12],"float32"),Tensor([1, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 0, 14, 12],"float32"),Tensor([1, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 0, 12],"float32"),Tensor([1, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 0],"float32"),Tensor([1, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 12],"float32"),Tensor([0, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 12],"float32"),Tensor([1, 0, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 12],"float32"),Tensor([1, 8, 0, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 12],"float32"),Tensor([1, 8, 14, 0],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([0, 8, 14, 12],"float32"),Tensor([0, 8, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 0, 14, 12],"float32"),Tensor([1, 0, 14, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 0, 12],"float32"),Tensor([1, 8, 0, 12],"float32"),], axis=0, )
paddle.concat(x=list[Tensor([1, 8, 14, 0],"float32"),Tensor([1, 8, 14, 0],"float32"),], axis=0, )
paddle.conj(Tensor([0, 1],"complex128"), )
paddle.conj(Tensor([2, 0],"complex128"), )
paddle.conj(Tensor([0, 1],"complex64"), )
paddle.conj(Tensor([2, 0],"complex64"), )
paddle.conj(Tensor([0, 20, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 0, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 0, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 0],"complex128"), )
paddle.conj(Tensor([0, 20, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 0, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 0, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 0],"complex64"), )
paddle.conj(Tensor([0, 20, 2, 3],"float32"), )
paddle.conj(Tensor([2, 0, 2, 3],"float32"), )
paddle.conj(Tensor([2, 20, 0, 3],"float32"), )
paddle.conj(Tensor([2, 20, 2, 0],"float32"), )
paddle.conj(Tensor([0, 20, 2, 3],"float64"), )
paddle.conj(Tensor([2, 0, 2, 3],"float64"), )
paddle.conj(Tensor([2, 20, 0, 3],"float64"), )
paddle.conj(Tensor([2, 20, 2, 0],"float64"), )
paddle.conj(Tensor([3, 0],"complex128"), )
paddle.conj(Tensor([3, 0],"complex64"), )
paddle.conj(Tensor([4, 0],"complex128"), )
paddle.conj(Tensor([4, 0],"complex64"), )
paddle.copysign(Tensor([0, 20],"bool"), Tensor([10, 20],"bool"), )
paddle.copysign(Tensor([10, 0],"bool"), Tensor([10, 20],"bool"), )
paddle.copysign(Tensor([10, 20],"bool"), Tensor([0, 20],"bool"), )
paddle.copysign(Tensor([10, 20],"bool"), Tensor([10, 0],"bool"), )
paddle.copysign(Tensor([0, 20],"bool"), Tensor([0, 20],"bool"), )
paddle.copysign(Tensor([10, 0],"bool"), Tensor([10, 0],"bool"), )
paddle.copysign(Tensor([0, 20],"float16"), Tensor([10, 20],"float16"), )
paddle.copysign(Tensor([10, 0],"float16"), Tensor([10, 20],"float16"), )
paddle.copysign(Tensor([10, 20],"float16"), Tensor([0, 20],"float16"), )
paddle.copysign(Tensor([10, 20],"float16"), Tensor([10, 0],"float16"), )
paddle.copysign(Tensor([0, 20],"float16"), Tensor([0, 20],"float16"), )
paddle.copysign(Tensor([10, 0],"float16"), Tensor([10, 0],"float16"), )
paddle.copysign(Tensor([0, 20],"float32"), -3.0, )
paddle.copysign(Tensor([10, 0],"float32"), -3.0, )
paddle.copysign(Tensor([0, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.copysign(Tensor([10, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([10, 0],"float32"), )
paddle.copysign(Tensor([0, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.copysign(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.copysign(Tensor([0, 20],"float64"), Tensor([10, 20],"float64"), )
paddle.copysign(Tensor([10, 0],"float64"), Tensor([10, 20],"float64"), )
paddle.copysign(Tensor([10, 20],"float64"), Tensor([0, 20],"float64"), )
paddle.copysign(Tensor([10, 20],"float64"), Tensor([10, 0],"float64"), )
paddle.copysign(Tensor([0, 20],"float64"), Tensor([0, 20],"float64"), )
paddle.copysign(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.copysign(Tensor([0, 20],"int16"), Tensor([10, 20],"int16"), )
paddle.copysign(Tensor([10, 0],"int16"), Tensor([10, 20],"int16"), )
paddle.copysign(Tensor([10, 20],"int16"), Tensor([0, 20],"int16"), )
paddle.copysign(Tensor([10, 20],"int16"), Tensor([10, 0],"int16"), )
paddle.copysign(Tensor([0, 20],"int16"), Tensor([0, 20],"int16"), )
paddle.copysign(Tensor([10, 0],"int16"), Tensor([10, 0],"int16"), )
paddle.copysign(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.copysign(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )
paddle.copysign(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.copysign(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )
paddle.copysign(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.copysign(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.copysign(Tensor([0, 20],"int64"), Tensor([10, 20],"int64"), )
paddle.copysign(Tensor([10, 0],"int64"), Tensor([10, 20],"int64"), )
paddle.copysign(Tensor([10, 20],"int64"), Tensor([0, 20],"int64"), )
paddle.copysign(Tensor([10, 20],"int64"), Tensor([10, 0],"int64"), )
paddle.copysign(Tensor([0, 20],"int64"), Tensor([0, 20],"int64"), )
paddle.copysign(Tensor([10, 0],"int64"), Tensor([10, 0],"int64"), )
paddle.copysign(Tensor([0, 20],"int8"), Tensor([10, 20],"int8"), )
paddle.copysign(Tensor([10, 0],"int8"), Tensor([10, 20],"int8"), )
paddle.copysign(Tensor([10, 20],"int8"), Tensor([0, 20],"int8"), )
paddle.copysign(Tensor([10, 20],"int8"), Tensor([10, 0],"int8"), )
paddle.copysign(Tensor([0, 20],"int8"), Tensor([0, 20],"int8"), )
paddle.copysign(Tensor([10, 0],"int8"), Tensor([10, 0],"int8"), )
paddle.copysign(Tensor([0, 20],"uint8"), Tensor([10, 20],"uint8"), )
paddle.copysign(Tensor([10, 0],"uint8"), Tensor([10, 20],"uint8"), )
paddle.copysign(Tensor([10, 20],"uint8"), Tensor([0, 20],"uint8"), )
paddle.copysign(Tensor([10, 20],"uint8"), Tensor([10, 0],"uint8"), )
paddle.copysign(Tensor([0, 20],"uint8"), Tensor([0, 20],"uint8"), )
paddle.copysign(Tensor([10, 0],"uint8"), Tensor([10, 0],"uint8"), )
paddle.copysign(Tensor([0, 17, 10],"int16"), Tensor([11, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 0, 10],"int16"), Tensor([11, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 0],"int16"), Tensor([11, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 10],"int16"), Tensor([0, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 10],"int16"), Tensor([11, 0, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 10],"int16"), Tensor([11, 17, 0],"int16"), )
paddle.copysign(Tensor([0, 17, 10],"int16"), Tensor([0, 17, 10],"int16"), )
paddle.copysign(Tensor([11, 0, 10],"int16"), Tensor([11, 0, 10],"int16"), )
paddle.copysign(Tensor([11, 17, 0],"int16"), Tensor([11, 17, 0],"int16"), )
paddle.copysign(Tensor([0, 17, 10],"int32"), Tensor([11, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 0, 10],"int32"), Tensor([11, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 17, 0],"int32"), Tensor([11, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 17, 10],"int32"), Tensor([0, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 17, 10],"int32"), Tensor([11, 0, 10],"int32"), )
paddle.copysign(Tensor([11, 17, 10],"int32"), Tensor([11, 17, 0],"int32"), )
paddle.copysign(Tensor([0, 17, 10],"int32"), Tensor([0, 17, 10],"int32"), )
paddle.copysign(Tensor([11, 0, 10],"int32"), Tensor([11, 0, 10],"int32"), )
paddle.copysign(Tensor([11, 17, 0],"int32"), Tensor([11, 17, 0],"int32"), )
paddle.copysign(Tensor([0, 17],"float32"), Tensor([11, 17],"float32"), )
paddle.copysign(Tensor([11, 0],"float32"), Tensor([11, 17],"float32"), )
paddle.copysign(Tensor([11, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.copysign(Tensor([11, 17],"float32"), Tensor([11, 0],"float32"), )
paddle.copysign(Tensor([0, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.copysign(Tensor([11, 0],"float32"), Tensor([11, 0],"float32"), )
paddle.copysign(Tensor([0, 20, 2],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 0, 2],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 0],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([0, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([12, 0, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([12, 20, 0],"float32"), )
paddle.copysign(Tensor([0, 20, 2],"float32"), Tensor([0, 20, 2],"float32"), )
paddle.copysign(Tensor([12, 0, 2],"float32"), Tensor([12, 0, 2],"float32"), )
paddle.copysign(Tensor([12, 20, 0],"float32"), Tensor([12, 20, 0],"float32"), )
paddle.copysign(Tensor([0, 20, 2],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.copysign(Tensor([12, 0, 2],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 0],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([0, 20, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([12, 0, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([12, 20, 0],"float64"), )
paddle.copysign(Tensor([0, 20, 2],"float64"), Tensor([0, 20, 2],"float64"), )
paddle.copysign(Tensor([12, 0, 2],"float64"), Tensor([12, 0, 2],"float64"), )
paddle.copysign(Tensor([12, 20, 0],"float64"), Tensor([12, 20, 0],"float64"), )
paddle.copysign(Tensor([0, 20, 2],"int16"), Tensor([12, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 0, 2],"int16"), Tensor([12, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 0],"int16"), Tensor([12, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 2],"int16"), Tensor([0, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 2],"int16"), Tensor([12, 0, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 2],"int16"), Tensor([12, 20, 0],"int16"), )
paddle.copysign(Tensor([0, 20, 2],"int16"), Tensor([0, 20, 2],"int16"), )
paddle.copysign(Tensor([12, 0, 2],"int16"), Tensor([12, 0, 2],"int16"), )
paddle.copysign(Tensor([12, 20, 0],"int16"), Tensor([12, 20, 0],"int16"), )
paddle.copysign(Tensor([0, 20, 2],"int32"), Tensor([12, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 0, 2],"int32"), Tensor([12, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 0],"int32"), Tensor([12, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 2],"int32"), Tensor([0, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 2],"int32"), Tensor([12, 0, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 2],"int32"), Tensor([12, 20, 0],"int32"), )
paddle.copysign(Tensor([0, 20, 2],"int32"), Tensor([0, 20, 2],"int32"), )
paddle.copysign(Tensor([12, 0, 2],"int32"), Tensor([12, 0, 2],"int32"), )
paddle.copysign(Tensor([12, 20, 0],"int32"), Tensor([12, 20, 0],"int32"), )
paddle.copysign(Tensor([0, 20, 2],"int64"), Tensor([12, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 0, 2],"int64"), Tensor([12, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 0],"int64"), Tensor([12, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 2],"int64"), Tensor([0, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 2],"int64"), Tensor([12, 0, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 2],"int64"), Tensor([12, 20, 0],"int64"), )
paddle.copysign(Tensor([0, 20, 2],"int64"), Tensor([0, 20, 2],"int64"), )
paddle.copysign(Tensor([12, 0, 2],"int64"), Tensor([12, 0, 2],"int64"), )
paddle.copysign(Tensor([12, 20, 0],"int64"), Tensor([12, 20, 0],"int64"), )
paddle.copysign(Tensor([0, 20, 2],"int8"), Tensor([12, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 0, 2],"int8"), Tensor([12, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 0],"int8"), Tensor([12, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 2],"int8"), Tensor([0, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 2],"int8"), Tensor([12, 0, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 2],"int8"), Tensor([12, 20, 0],"int8"), )
paddle.copysign(Tensor([0, 20, 2],"int8"), Tensor([0, 20, 2],"int8"), )
paddle.copysign(Tensor([12, 0, 2],"int8"), Tensor([12, 0, 2],"int8"), )
paddle.copysign(Tensor([12, 20, 0],"int8"), Tensor([12, 20, 0],"int8"), )
paddle.copysign(Tensor([0, 20, 2],"uint8"), Tensor([12, 20, 2],"uint8"), )
paddle.copysign(Tensor([12, 0, 2],"uint8"), Tensor([12, 20, 2],"uint8"), )
paddle.copysign(Tensor([12, 20, 0],"uint8"), Tensor([12, 20, 2],"uint8"), )
paddle.copysign(Tensor([12, 20, 2],"uint8"), Tensor([0, 20, 2],"uint8"), )
paddle.copysign(Tensor([12, 20, 2],"uint8"), Tensor([12, 0, 2],"uint8"), )
paddle.copysign(Tensor([12, 20, 2],"uint8"), Tensor([12, 20, 0],"uint8"), )
paddle.copysign(Tensor([0, 20, 2],"uint8"), Tensor([0, 20, 2],"uint8"), )
paddle.copysign(Tensor([12, 0, 2],"uint8"), Tensor([12, 0, 2],"uint8"), )
paddle.copysign(Tensor([12, 20, 0],"uint8"), Tensor([12, 20, 0],"uint8"), )
paddle.copysign(Tensor([0],"int64"), Tensor([132],"int64"), )
paddle.copysign(Tensor([132],"int64"), Tensor([0],"int64"), )
paddle.copysign(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.copysign(Tensor([0],"uint8"), Tensor([132],"uint8"), )
paddle.copysign(Tensor([132],"uint8"), Tensor([0],"uint8"), )
paddle.copysign(Tensor([0],"uint8"), Tensor([0],"uint8"), )
paddle.copysign(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.copysign(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.copysign(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.copysign(Tensor([0, 3, 4, 5],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 0, 4, 5],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 0, 5],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 0],"int8"), Tensor([2, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([0, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([2, 0, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([2, 3, 0, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 5],"int8"), Tensor([2, 3, 4, 0],"int8"), )
paddle.copysign(Tensor([0, 3, 4, 5],"int8"), Tensor([0, 3, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 0, 4, 5],"int8"), Tensor([2, 0, 4, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 0, 5],"int8"), Tensor([2, 3, 0, 5],"int8"), )
paddle.copysign(Tensor([2, 3, 4, 0],"int8"), Tensor([2, 3, 4, 0],"int8"), )
paddle.copysign(Tensor([0, 6],"float64"), Tensor([20, 6],"float64"), )
paddle.copysign(Tensor([20, 0],"float64"), Tensor([20, 6],"float64"), )
paddle.copysign(Tensor([20, 6],"float64"), Tensor([0, 6],"float64"), )
paddle.copysign(Tensor([20, 6],"float64"), Tensor([20, 0],"float64"), )
paddle.copysign(Tensor([0, 6],"float64"), Tensor([0, 6],"float64"), )
paddle.copysign(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), )
paddle.copysign(Tensor([0, 4, 5],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([3, 0, 5],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 0],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([0, 5],"float16"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([4, 0],"float16"), )
paddle.copysign(Tensor([0, 4, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([3, 0, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([3, 4, 0],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([0],"float16"), )
paddle.copysign(Tensor([0],"float32"), Tensor([3],"float32"), )
paddle.copysign(Tensor([3],"float32"), Tensor([0],"float32"), )
paddle.copysign(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.copysign(Tensor([0, 5],"float16"), Tensor([3, 4, 5],"float16"), )
paddle.copysign(Tensor([4, 0],"float16"), Tensor([3, 4, 5],"float16"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([0, 4, 5],"float16"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([3, 0, 5],"float16"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([3, 4, 0],"float16"), )
paddle.copysign(Tensor([0, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 0, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 0, 6, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 0, 7],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 0],"float16"), Tensor([8, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 7],"float16"), Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.copysign(Tensor([0, 17, 5, 6, 7],"float16"), Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 0, 5, 6, 7],"float16"), Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 0, 6, 7],"float16"), Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 0, 7],"float16"), Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.copysign(Tensor([8, 17, 5, 6, 0],"float16"), Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.cos(Tensor([0, 128, 1, 32],"float32"), )
paddle.cos(Tensor([1, 0, 1, 32],"float32"), )
paddle.cos(Tensor([1, 128, 0, 32],"float32"), )
paddle.cos(Tensor([1, 128, 1, 0],"float32"), )
paddle.cos(Tensor([0, 10],"float32"), )
paddle.cos(Tensor([10, 0],"float32"), )
paddle.cos(Tensor([0, 20, 1],"float32"), )
paddle.cos(Tensor([10, 0, 1],"float32"), )
paddle.cos(Tensor([10, 20, 0],"float32"), )
paddle.cos(Tensor([0, 3, 4],"float32"), )
paddle.cos(Tensor([2, 0, 4],"float32"), )
paddle.cos(Tensor([2, 3, 0],"float32"), )
paddle.cos(Tensor([0, 3],"float32"), )
paddle.cos(Tensor([2, 0],"float32"), )
paddle.cos(Tensor([0],"float32"), )
paddle.cos(Tensor([0],"float64"), )
paddle.cos(Tensor([0, 64],"float32"), )
paddle.cos(Tensor([40, 0],"float32"), )
paddle.cos(Tensor([0, 32],"float16"), )
paddle.cos(Tensor([64, 0],"float16"), )
paddle.cos(Tensor([64, 0],"float32"), )
paddle.cos(Tensor([65, 0],"float16"), )
paddle.cosh(Tensor([0, 20, 1],"float32"), )
paddle.cosh(Tensor([10, 0, 1],"float32"), )
paddle.cosh(Tensor([10, 20, 0],"float32"), )
paddle.cosh(Tensor([0, 3],"float32"), )
paddle.cosh(Tensor([2, 0],"float32"), )
paddle.count_nonzero(Tensor([0, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 0, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 0, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 0],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([0, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 0, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 14, 0, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 0],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([0, 5],"float32"), axis=None, )
paddle.count_nonzero(Tensor([3, 0],"float32"), axis=None, )
paddle.count_nonzero(Tensor([0, 5],"float32"), keepdim=True, )
paddle.count_nonzero(Tensor([3, 0],"float32"), keepdim=True, )
paddle.count_nonzero(Tensor([0],"float32"), axis=0, )
paddle.cross(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.cross(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.cross(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.cross(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), )
paddle.cross(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.cross(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.cross(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), axis=1, )
paddle.cross(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), axis=1, )
paddle.cross(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), axis=1, )
paddle.cross(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), axis=1, )
paddle.cross(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), axis=1, )
paddle.cross(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), axis=1, )
paddle.cumprod(Tensor([0, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([1, 0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([1, 2, 0],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 10],"float32"), dim=0, )
paddle.cumprod(Tensor([10, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 10],"float32"), dim=1, )
paddle.cumprod(Tensor([10, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 20, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([10, 0, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([10, 20, 0],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([2, 0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 2, 0],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 0, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 0, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 10, 0],"float64"), 1, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=3, )
paddle.cumprod(Tensor([0, 3, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 0, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 0, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 3, 0, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 3, 4, 0],"float32"), dim=4, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 3, 3, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 0, 3, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 0, 4],"float32"), dim=3, )
paddle.cumprod(Tensor([2, 3, 3, 0],"float32"), dim=3, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=0, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=1, )
paddle.cumprod(Tensor([0, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 0, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 0],"float32"), dim=2, )
paddle.cumprod(Tensor([0, 1],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 0],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0, 1],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 0],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 2],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 3],"complex128"), dim=-1, )
paddle.cumprod(Tensor([0, 3],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 4],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 5],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 6],"float32"), dim=-1, )
paddle.cumprod(Tensor([0, 7],"float32"), dim=-1, )
paddle.cumprod(Tensor([0],"float32"), dim=0, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=None, dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([0, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([3, 0, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 0],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=Tensor([0],"float32"), dx=None, axis=1, )
paddle.cumulative_trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([4, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([4, 0],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.cumulative_trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 0],"float16"), )
paddle.deg2rad(Tensor([0],"int64"), )
paddle.deg2rad(Tensor([0],"float32"), )
paddle.deg2rad(Tensor([0, 16, 32],"float32"), )
paddle.deg2rad(Tensor([8, 0, 32],"float32"), )
paddle.deg2rad(Tensor([8, 16, 0],"float32"), )
paddle.diag(Tensor([0],"float64"), )
paddle.diag(Tensor([0, 10],"float32"), )
paddle.diag(Tensor([10, 0],"float32"), )
paddle.diag(Tensor([0, 10],"float32"), offset=1, )
paddle.diag(Tensor([10, 0],"float32"), offset=1, )
paddle.diag(Tensor([0, 10],"float32"), offset=-1, )
paddle.diag(Tensor([10, 0],"float32"), offset=-1, )
paddle.diag(Tensor([0],"float64"), padding_value=8, )
paddle.diag(Tensor([0],"int64"), padding_value=-8, )
paddle.diag(Tensor([0],"int64"), padding_value=8.0, )
paddle.diag(Tensor([0, 1500],"float32"), offset=-1, )
paddle.diag(Tensor([2000, 0],"float32"), offset=-1, )
paddle.diag(Tensor([0, 2000],"float32"), )
paddle.diag(Tensor([2000, 0],"float32"), )
paddle.diag(Tensor([0, 2000],"float32"), offset=1, )
paddle.diag(Tensor([2000, 0],"float32"), offset=1, )
paddle.diag(Tensor([0, 2000],"float32"), offset=-1, )
paddle.diag(Tensor([0],"float32"), )
paddle.diag(Tensor([0],"float32"), offset=1, )
paddle.diag(Tensor([0],"float32"), offset=-1, )
paddle.diag(Tensor([0, 4],"float32"), )
paddle.diag(Tensor([4, 0],"float32"), )
paddle.diag(Tensor([0, 4],"float64"), )
paddle.diag(Tensor([4, 0],"float64"), )
paddle.diag(Tensor([0, 5],"float32"), )
paddle.diag(Tensor([5, 0],"float32"), )
paddle.diag(Tensor([0, 5],"float64"), )
paddle.diag(Tensor([5, 0],"float64"), )
paddle.diag_embed(Tensor([0, 12],"float64"), )
paddle.diag_embed(Tensor([1, 0],"float64"), )
paddle.diag_embed(Tensor([0, 2],"float32"), )
paddle.diag_embed(Tensor([1, 0],"float32"), )
paddle.diag_embed(Tensor([0, 2],"float64"), )
paddle.diag_embed(Tensor([0, 4],"float64"), )
paddle.diag_embed(Tensor([0, 6],"float64"), )
paddle.diag_embed(Tensor([0, 8],"float64"), )
paddle.diag_embed(Tensor([0],"float64"), )
paddle.diag_embed(Tensor([2, 0],"float32"), )
paddle.diag_embed(Tensor([0, 3, 12],"float64"), )
paddle.diag_embed(Tensor([2, 0, 12],"float64"), )
paddle.diag_embed(Tensor([2, 3, 0],"float64"), )
paddle.diag_embed(Tensor([0, 3, 2],"float64"), )
paddle.diag_embed(Tensor([2, 0, 2],"float64"), )
paddle.diag_embed(Tensor([0, 3, 4],"float64"), )
paddle.diag_embed(Tensor([2, 0, 4],"float64"), )
paddle.diag_embed(Tensor([0, 3, 6],"float64"), )
paddle.diag_embed(Tensor([2, 0, 6],"float64"), )
paddle.diag_embed(Tensor([0, 3, 8],"float64"), )
paddle.diag_embed(Tensor([2, 0, 8],"float64"), )
paddle.diag_embed(Tensor([0],"float32"), )
paddle.diag_embed(Tensor([3, 0],"float64"), )
paddle.diagflat(Tensor([0, 10],"float64"), )
paddle.diagflat(Tensor([10, 0],"float64"), )
paddle.diagflat(Tensor([0, 10],"float64"), offset=1, )
paddle.diagflat(Tensor([10, 0],"float64"), offset=1, )
paddle.diagflat(Tensor([0, 10],"float64"), offset=-1, )
paddle.diagflat(Tensor([10, 0],"float64"), offset=-1, )
paddle.diagflat(Tensor([0],"float64"), )
paddle.diagflat(Tensor([0],"float64"), offset=1, )
paddle.diagflat(Tensor([0],"float64"), offset=-1, )
paddle.diagonal(Tensor([0, 2, 2],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([1, 0, 2],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([1, 2, 0],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), )
paddle.diagonal(Tensor([10, 0, 4],"float32"), )
paddle.diagonal(Tensor([10, 3, 0],"float32"), )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([0, 3, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([10, 0, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([10, 3, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), )
paddle.diagonal(Tensor([2, 3, 0],"float32"), )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([2, 0, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([2, 3, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"bool"), Tensor([0],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"complex128"), Tensor([10],"complex128"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"complex128"), Tensor([10],"complex128"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex128"), Tensor([0],"complex128"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"complex64"), Tensor([10],"complex64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"complex64"), Tensor([10],"complex64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"complex64"), Tensor([0],"complex64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"float16"), Tensor([10],"float16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"float16"), Tensor([10],"float16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float16"), Tensor([0],"float16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"float32"), Tensor([10],"float32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([0],"float32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"float32"), Tensor([10],"float32"), offset=0, axis1=1, axis2=0, )
paddle.diagonal_scatter(Tensor([10, 0],"float32"), Tensor([10],"float32"), offset=0, axis1=1, axis2=0, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([0],"float32"), offset=0, axis1=1, axis2=0, )
paddle.diagonal_scatter(Tensor([0, 10],"float32"), Tensor([8],"float32"), offset=-2, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"float32"), Tensor([8],"float32"), offset=-2, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([0],"float32"), offset=-2, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"float32"), Tensor([9],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"float32"), Tensor([9],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float32"), Tensor([0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"float64"), Tensor([10],"float64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"float64"), Tensor([10],"float64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"float64"), Tensor([0],"float64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int16"), Tensor([0],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int32"), Tensor([0],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"int64"), Tensor([10],"int64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"int64"), Tensor([10],"int64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int64"), Tensor([0],"int64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"int8"), Tensor([10],"int8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"int8"), Tensor([10],"int8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int8"), Tensor([0],"int8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([0, 10],"uint8"), Tensor([10],"uint8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 0],"uint8"), Tensor([10],"uint8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"uint8"), Tensor([0],"uint8"), offset=0, axis1=0, axis2=1, )
paddle.digamma(Tensor([0, 2, 2],"float32"), )
paddle.digamma(Tensor([1, 0, 2],"float32"), )
paddle.digamma(Tensor([1, 2, 0],"float32"), )
paddle.digamma(Tensor([0, 2],"float32"), )
paddle.digamma(Tensor([1, 0],"float32"), )
paddle.digamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.digamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.digamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.digamma(Tensor([0, 10, 10],"float64"), )
paddle.digamma(Tensor([10, 0, 10],"float64"), )
paddle.digamma(Tensor([10, 10, 0],"float64"), )
paddle.digamma(Tensor([0, 12],"float32"), )
paddle.digamma(Tensor([10, 0],"float32"), )
paddle.digamma(Tensor([0, 20, 1],"float32"), )
paddle.digamma(Tensor([10, 0, 1],"float32"), )
paddle.digamma(Tensor([10, 20, 0],"float32"), )
paddle.digamma(Tensor([0, 1],"float32"), )
paddle.digamma(Tensor([2, 0],"float32"), )
paddle.digamma(Tensor([0, 3],"float32"), )
paddle.digamma(Tensor([0, 3],"float64"), )
paddle.digamma(Tensor([2, 0],"float64"), )
paddle.digamma(Tensor([0, 5, 2],"float64"), )
paddle.digamma(Tensor([2, 0, 2],"float64"), )
paddle.digamma(Tensor([2, 5, 0],"float64"), )
paddle.digamma(Tensor([0, 5],"float64"), )
paddle.digamma(Tensor([0],"float32"), )
paddle.digamma(Tensor([4, 0],"float32"), )
paddle.digamma(Tensor([0, 3, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 0, 32, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 0, 32],"float32"), )
paddle.digamma(Tensor([8, 3, 32, 0],"float32"), )
paddle.digamma(Tensor([0, 3, 32, 32],"float64"), )
paddle.digamma(Tensor([8, 0, 32, 32],"float64"), )
paddle.digamma(Tensor([8, 3, 0, 32],"float64"), )
paddle.digamma(Tensor([8, 3, 32, 0],"float64"), )
paddle.digamma(Tensor([0],"float64"), )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 0, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([0, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([1, 0, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([1, 1, 0, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([1, 1, 3, 0],"float32"), 2, )
paddle.dist(Tensor([0, 2, 3, 2],"float32"), Tensor([0, 1, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 0, 3, 2],"float32"), Tensor([1, 0, 3, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 0, 2],"float32"), Tensor([1, 1, 0, 1],"float32"), 2, )
paddle.dist(Tensor([2, 2, 3, 0],"float32"), Tensor([1, 1, 3, 0],"float32"), 2, )
paddle.dist(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), 0, )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), 0, )
paddle.dist(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), 0, )
paddle.dist(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), 0, )
paddle.dist(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), 0, )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), 0, )
paddle.dist(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.dist(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.dist(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), )
paddle.dist(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.dist(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.dot(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.dot(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.dot(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.dot(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.dot(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.dot(Tensor([0, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.dot(Tensor([1, 0],"float32"), Tensor([1, 10],"float32"), )
paddle.dot(Tensor([1, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.dot(Tensor([1, 10],"float32"), Tensor([1, 0],"float32"), )
paddle.dot(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.dot(Tensor([1, 0],"float32"), Tensor([1, 2],"float32"), )
paddle.dot(Tensor([1, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([1, 2],"float32"), Tensor([1, 0],"float32"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.dot(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([10],"float32"), )
paddle.dot(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.dot(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.dot(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.dot(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.dsplit(Tensor([0, 2, 6],"bool"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"bool"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"bool"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float16"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float32"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float32"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float32"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"float64"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"float64"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"float64"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"int32"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"int32"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"int32"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"int64"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"int64"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"int64"), 3, )
paddle.dsplit(Tensor([0, 2, 6],"uint8"), 3, )
paddle.dsplit(Tensor([4, 0, 6],"uint8"), 3, )
paddle.dsplit(Tensor([4, 2, 0],"uint8"), 3, )
paddle.dsplit(Tensor([0, 3, 6],"int64"), 2, )
paddle.dsplit(Tensor([4, 0, 6],"int64"), 2, )
paddle.dsplit(Tensor([4, 3, 0],"int64"), 2, )
paddle.dsplit(Tensor([0, 3, 6],"int64"), 3, )
paddle.dsplit(Tensor([4, 3, 0],"int64"), 3, )
paddle.dsplit(Tensor([0, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 0, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 3, 0],"int64"), list[-1,], )
paddle.dsplit(Tensor([0, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 0, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 3, 0],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([0, 3, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([4, 0, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([4, 3, 0],"int64"), list[2,4,], )
paddle.dsplit(Tensor([0, 3, 6],"int64"), tuple(2,1,3,), )
paddle.dsplit(Tensor([4, 0, 6],"int64"), tuple(2,1,3,), )
paddle.dsplit(Tensor([4, 3, 0],"int64"), tuple(2,1,3,), )
paddle.dstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.dstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.dstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),Tensor([1, 2, 1],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([0, 2, 1],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([1, 2, 0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.dstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.dstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.dstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.dstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.empty_like(Tensor([0, 10, 5],"float32"), )
paddle.empty_like(Tensor([1, 0, 5],"float32"), )
paddle.empty_like(Tensor([1, 10, 0],"float32"), )
paddle.empty_like(Tensor([0, 1000],"bfloat16"), )
paddle.empty_like(Tensor([10, 0],"bfloat16"), )
paddle.empty_like(Tensor([0, 1000],"bool"), )
paddle.empty_like(Tensor([10, 0],"bool"), )
paddle.empty_like(Tensor([0, 1000],"float16"), )
paddle.empty_like(Tensor([10, 0],"float16"), )
paddle.empty_like(Tensor([0, 1000],"float32"), )
paddle.empty_like(Tensor([10, 0],"float32"), )
paddle.empty_like(Tensor([0, 1000],"float64"), )
paddle.empty_like(Tensor([10, 0],"float64"), )
paddle.empty_like(Tensor([0, 1000],"int32"), )
paddle.empty_like(Tensor([10, 0],"int32"), )
paddle.empty_like(Tensor([0, 1000],"int64"), )
paddle.empty_like(Tensor([10, 0],"int64"), )
paddle.empty_like(Tensor([0, 1000],"int8"), )
paddle.empty_like(Tensor([10, 0],"int8"), )
paddle.empty_like(Tensor([0, 1000],"uint8"), )
paddle.empty_like(Tensor([10, 0],"uint8"), )
paddle.empty_like(Tensor([0, 200],"float32"), )
paddle.empty_like(Tensor([100, 0],"float32"), )
paddle.empty_like(Tensor([0, 20],"float32"), )
paddle.empty_like(Tensor([11, 0],"float32"), )
paddle.empty_like(Tensor([0],"bool"), )
paddle.empty_like(Tensor([0, 128],"float64"), )
paddle.empty_like(Tensor([16, 0],"float64"), )
paddle.empty_like(Tensor([0, 16, 128],"float64"), )
paddle.empty_like(Tensor([16, 0, 128],"float64"), )
paddle.empty_like(Tensor([16, 16, 0],"float64"), )
paddle.empty_like(Tensor([0],"uint8"), )
paddle.empty_like(Tensor([2, 0, 5],"float32"), )
paddle.empty_like(Tensor([2, 10, 0],"float32"), )
paddle.empty_like(Tensor([0, 2],"float32"), )
paddle.empty_like(Tensor([2, 0],"float32"), )
paddle.empty_like(Tensor([0, 20, 20],"float16"), )
paddle.empty_like(Tensor([2, 0, 20],"float16"), )
paddle.empty_like(Tensor([2, 20, 0],"float16"), )
paddle.empty_like(Tensor([0],"int64"), )
paddle.empty_like(Tensor([200, 0],"float32"), )
paddle.empty_like(Tensor([256, 0],"float64"), )
paddle.empty_like(Tensor([0, 13],"float32"), )
paddle.empty_like(Tensor([34, 0],"float32"), )
paddle.empty_like(Tensor([4, 0, 20],"float16"), )
paddle.empty_like(Tensor([4, 20, 0],"float16"), )
paddle.empty_like(Tensor([0, 5, 20],"float32"), )
paddle.empty_like(Tensor([4, 0, 20],"float32"), )
paddle.empty_like(Tensor([4, 5, 0],"float32"), )
paddle.empty_like(Tensor([50, 0],"float32"), )
paddle.empty_like(Tensor([0, 16, 2],"float32"), )
paddle.empty_like(Tensor([8, 0, 2],"float32"), )
paddle.empty_like(Tensor([8, 16, 0],"float32"), )
paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.equal(Tensor([0, 28, 28],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.equal(Tensor([1, 0, 28],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.equal(Tensor([1, 28, 0],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.equal(Tensor([0, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 0, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 8, 0],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([1, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.equal(Tensor([1, 8, 8],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.equal(Tensor([1, 8, 8],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.equal(Tensor([0, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.equal(Tensor([1, 0, 8],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.equal(Tensor([1, 8, 0],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.equal(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.equal(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.equal(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.equal(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.equal(Tensor([1],"int32"), Tensor([0],"int32"), )
paddle.equal(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.equal(Tensor([0],"int64"), 0, )
paddle.equal(Tensor([0],"int64"), 10, )
paddle.equal(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.equal(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.equal(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.equal(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.equal(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.equal(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.equal(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.equal(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.equal(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.equal(Tensor([0, 20],"int32"), 0, )
paddle.equal(Tensor([10, 0],"int32"), 0, )
paddle.equal(Tensor([0, 1],"float64"), Tensor([114, 1],"float64"), )
paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 1],"float64"), )
paddle.equal(Tensor([114, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.equal(Tensor([114, 1],"float64"), Tensor([114, 0],"float64"), )
paddle.equal(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.equal(Tensor([114, 0],"float64"), Tensor([114, 0],"float64"), )
paddle.equal(Tensor([0],"float64"), Tensor([114],"float64"), )
paddle.equal(Tensor([114],"float64"), Tensor([0],"float64"), )
paddle.equal(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.equal(Tensor([0, 5, 3],"float32"), Tensor([148, 5, 3],"float32"), )
paddle.equal(Tensor([148, 0, 3],"float32"), Tensor([148, 5, 3],"float32"), )
paddle.equal(Tensor([148, 5, 0],"float32"), Tensor([148, 5, 3],"float32"), )
paddle.equal(Tensor([148, 5, 3],"float32"), Tensor([0, 5, 3],"float32"), )
paddle.equal(Tensor([148, 5, 3],"float32"), Tensor([148, 0, 3],"float32"), )
paddle.equal(Tensor([148, 5, 3],"float32"), Tensor([148, 5, 0],"float32"), )
paddle.equal(Tensor([0, 5, 3],"float32"), Tensor([0, 5, 3],"float32"), )
paddle.equal(Tensor([148, 0, 3],"float32"), Tensor([148, 0, 3],"float32"), )
paddle.equal(Tensor([148, 5, 0],"float32"), Tensor([148, 5, 0],"float32"), )
paddle.equal(Tensor([0, 2],"float32"), Tensor([1948, 2],"float32"), )
paddle.equal(Tensor([1948, 0],"float32"), Tensor([1948, 2],"float32"), )
paddle.equal(Tensor([1948, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.equal(Tensor([1948, 2],"float32"), Tensor([1948, 0],"float32"), )
paddle.equal(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.equal(Tensor([1948, 0],"float32"), Tensor([1948, 0],"float32"), )
paddle.equal(Tensor([0, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 0, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 1, 0, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 1, 8, 0],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([0, 1, 1],"int32"), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 0, 1],"int32"), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 1, 0],"int32"), )
paddle.equal(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.equal(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.equal(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.equal(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.equal(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.equal(Tensor([0, 3],"float32"), 0, )
paddle.equal(Tensor([2, 0],"float32"), 0, )
paddle.equal(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.equal(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.equal(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.equal(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), )
paddle.equal(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.equal(Tensor([0, 3],"float64"), 0, )
paddle.equal(Tensor([2, 0],"float64"), 0, )
paddle.equal(Tensor([0, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.equal(Tensor([2, 0],"float32"), Tensor([2, 4],"float32"), )
paddle.equal(Tensor([2, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.equal(Tensor([2, 4],"float32"), Tensor([2, 0],"float32"), )
paddle.equal(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.equal(Tensor([0, 8, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.equal(Tensor([2, 0, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.equal(Tensor([2, 8, 0],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.equal(Tensor([2, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), )
paddle.equal(Tensor([2, 8, 8],"float32"), Tensor([2, 0, 8],"float32"), )
paddle.equal(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 0],"float32"), )
paddle.equal(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), )
paddle.equal(Tensor([2, 0, 8],"float32"), Tensor([2, 0, 8],"float32"), )
paddle.equal(Tensor([2, 8, 0],"float32"), Tensor([2, 8, 0],"float32"), )
paddle.equal(Tensor([0, 28],"float32"), Tensor([28, 28],"float32"), )
paddle.equal(Tensor([28, 0],"float32"), Tensor([28, 28],"float32"), )
paddle.equal(Tensor([28, 28],"float32"), Tensor([0, 28],"float32"), )
paddle.equal(Tensor([28, 28],"float32"), Tensor([28, 0],"float32"), )
paddle.equal(Tensor([0, 28],"float32"), Tensor([0, 28],"float32"), )
paddle.equal(Tensor([28, 0],"float32"), Tensor([28, 0],"float32"), )
paddle.equal(Tensor([0],"float32"), Tensor([3],"float32"), )
paddle.equal(Tensor([3],"float32"), Tensor([0],"float32"), )
paddle.equal(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.equal(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.equal(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.equal(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.equal(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.equal(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.equal(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.equal(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.equal(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.equal(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.equal(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.equal(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.equal(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.equal(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.equal(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.equal(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.equal(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.equal(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.equal(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.equal(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.equal(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.equal(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.equal(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.equal(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.equal(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.equal(Tensor([0],"float16"), Tensor([4],"float16"), )
paddle.equal(Tensor([4],"float16"), Tensor([0],"float16"), )
paddle.equal(Tensor([0],"float16"), Tensor([0],"float16"), )
paddle.equal(Tensor([0],"int64"), 1, )
paddle.equal(Tensor([0],"int64"), 1.0, )
paddle.equal(Tensor([0],"int64"), Tensor([4],"int64"), )
paddle.equal(Tensor([4],"int64"), Tensor([0],"int64"), )
paddle.equal(Tensor([0],"int64"), True, )
paddle.equal(Tensor([0, 1],"float64"), Tensor([400, 1],"float64"), )
paddle.equal(Tensor([400, 0],"float64"), Tensor([400, 1],"float64"), )
paddle.equal(Tensor([400, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.equal(Tensor([400, 1],"float64"), Tensor([400, 0],"float64"), )
paddle.equal(Tensor([400, 0],"float64"), Tensor([400, 0],"float64"), )
paddle.equal(Tensor([0],"float64"), Tensor([400],"float64"), )
paddle.equal(Tensor([400],"float64"), Tensor([0],"float64"), )
paddle.equal(Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.equal(Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.equal(Tensor([0],"int32"), 0, )
paddle.equal(Tensor([0, 4],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([8, 0],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([8, 4],"int64"), Tensor([0],"int64"), )
paddle.equal(Tensor([0, 4],"int64"), Tensor([8, 4],"int64"), )
paddle.equal(Tensor([8, 0],"int64"), Tensor([8, 4],"int64"), )
paddle.equal(Tensor([8, 4],"int64"), Tensor([0, 4],"int64"), )
paddle.equal(Tensor([8, 4],"int64"), Tensor([8, 0],"int64"), )
paddle.equal(Tensor([0, 4],"int64"), Tensor([0, 4],"int64"), )
paddle.equal(Tensor([8, 0],"int64"), Tensor([8, 0],"int64"), )
paddle.equal(Tensor([0, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.equal(Tensor([8, 0],"float32"), Tensor([8, 8],"float32"), )
paddle.equal(Tensor([8, 8],"float32"), Tensor([0, 8],"float32"), )
paddle.equal(Tensor([8, 8],"float32"), Tensor([8, 0],"float32"), )
paddle.equal(Tensor([0, 8],"float32"), Tensor([0, 8],"float32"), )
paddle.equal(Tensor([8, 0],"float32"), Tensor([8, 0],"float32"), )
paddle.equal(x=Tensor([0],"int64"), y=Tensor([3],"int64"), )
paddle.equal(x=Tensor([3],"int64"), y=Tensor([0],"int64"), )
paddle.equal(x=Tensor([0],"int64"), y=Tensor([0],"int64"), )
paddle.erf(Tensor([0, 17],"float64"), )
paddle.erf(Tensor([11, 0],"float64"), )
paddle.erfinv(Tensor([0],"float32"), )
paddle.exp(Tensor([0, 2, 3, 4],"float32"), )
paddle.exp(Tensor([1, 0, 3, 4],"float32"), )
paddle.exp(Tensor([1, 2, 0, 4],"float32"), )
paddle.exp(Tensor([1, 2, 3, 0],"float32"), )
paddle.exp(Tensor([0, 2, 3, 4],"float64"), )
paddle.exp(Tensor([1, 0, 3, 4],"float64"), )
paddle.exp(Tensor([1, 2, 0, 4],"float64"), )
paddle.exp(Tensor([1, 2, 3, 0],"float64"), )
paddle.exp(Tensor([0, 2, 3],"float32"), )
paddle.exp(Tensor([1, 0, 3],"float32"), )
paddle.exp(Tensor([1, 2, 0],"float32"), )
paddle.exp(Tensor([0],"complex64"), )
paddle.exp(Tensor([0],"float32"), )
paddle.exp(Tensor([0],"float64"), )
paddle.exp(Tensor([0, 10, 10],"float64"), )
paddle.exp(Tensor([10, 0, 10],"float64"), )
paddle.exp(Tensor([10, 10, 0],"float64"), )
paddle.exp(Tensor([0, 12],"float64"), )
paddle.exp(Tensor([10, 0],"float64"), )
paddle.exp(Tensor([0, 2],"bfloat16"), )
paddle.exp(Tensor([10, 0],"bfloat16"), )
paddle.exp(Tensor([0, 2],"float16"), )
paddle.exp(Tensor([10, 0],"float16"), )
paddle.exp(Tensor([0, 2],"float32"), )
paddle.exp(Tensor([10, 0],"float32"), )
paddle.exp(Tensor([0, 2],"float64"), )
paddle.exp(Tensor([0, 20],"float64"), )
paddle.exp(Tensor([0, 200, 300],"float32"), )
paddle.exp(Tensor([10, 0, 300],"float32"), )
paddle.exp(Tensor([10, 200, 0],"float32"), )
paddle.exp(Tensor([0, 200, 300],"int32"), )
paddle.exp(Tensor([10, 0, 300],"int32"), )
paddle.exp(Tensor([10, 200, 0],"int32"), )
paddle.exp(Tensor([0, 200, 300],"int64"), )
paddle.exp(Tensor([10, 0, 300],"int64"), )
paddle.exp(Tensor([10, 200, 0],"int64"), )
paddle.exp(Tensor([0, 3],"float32"), )
paddle.exp(Tensor([0, 3],"float64"), )
paddle.exp(Tensor([1000, 0],"float64"), )
paddle.exp(Tensor([0, 1],"float64"), )
paddle.exp(Tensor([114, 0],"float64"), )
paddle.exp(Tensor([0, 5, 3],"float32"), )
paddle.exp(Tensor([148, 0, 3],"float32"), )
paddle.exp(Tensor([148, 5, 0],"float32"), )
paddle.exp(Tensor([1948, 0],"float32"), )
paddle.exp(Tensor([2, 0],"float64"), )
paddle.exp(Tensor([0, 3, 4],"float32"), )
paddle.exp(Tensor([2, 0, 4],"float32"), )
paddle.exp(Tensor([2, 3, 0],"float32"), )
paddle.exp(Tensor([0, 3],"complex128"), )
paddle.exp(Tensor([2, 0],"complex128"), )
paddle.exp(Tensor([0, 3],"complex64"), )
paddle.exp(Tensor([2, 0],"complex64"), )
paddle.exp(Tensor([2, 0],"float32"), )
paddle.exp(Tensor([0, 4],"float64"), )
paddle.exp(Tensor([0, 5],"float64"), )
paddle.exp(Tensor([0, 2, 5],"float32"), )
paddle.exp(Tensor([3, 0, 5],"float32"), )
paddle.exp(Tensor([3, 2, 0],"float32"), )
paddle.exp(Tensor([3, 0],"float64"), )
paddle.exp(Tensor([0, 5],"float32"), )
paddle.exp(Tensor([3, 0],"float32"), )
paddle.exp(Tensor([0, 20],"float32"), )
paddle.exp(Tensor([32, 0],"float32"), )
paddle.exp(Tensor([0, 32, 128],"float32"), )
paddle.exp(Tensor([32, 0, 128],"float32"), )
paddle.exp(Tensor([32, 32, 0],"float32"), )
paddle.exp(Tensor([0, 3, 2],"bfloat16"), )
paddle.exp(Tensor([4, 0, 2],"bfloat16"), )
paddle.exp(Tensor([4, 3, 0],"bfloat16"), )
paddle.exp(Tensor([0, 3, 2],"float16"), )
paddle.exp(Tensor([4, 0, 2],"float16"), )
paddle.exp(Tensor([4, 3, 0],"float16"), )
paddle.exp(Tensor([0, 3, 2],"float32"), )
paddle.exp(Tensor([4, 0, 2],"float32"), )
paddle.exp(Tensor([4, 3, 0],"float32"), )
paddle.exp(Tensor([0, 3, 2],"float64"), )
paddle.exp(Tensor([4, 0, 2],"float64"), )
paddle.exp(Tensor([4, 3, 0],"float64"), )
paddle.exp(Tensor([0, 4],"float32"), )
paddle.exp(Tensor([4, 0],"float32"), )
paddle.exp(Tensor([0, 6],"float64"), )
paddle.exp(Tensor([4, 0],"float64"), )
paddle.exp(Tensor([400, 0],"float64"), )
paddle.exp(Tensor([5, 0],"float64"), )
paddle.exp(Tensor([0, 256],"float32"), )
paddle.exp(Tensor([512, 0],"float32"), )
paddle.exp(Tensor([0, 96],"float32"), )
paddle.exp(Tensor([64, 0],"float32"), )
paddle.exp(Tensor([0, 10, 20],"float64"), )
paddle.exp(Tensor([9, 0, 20],"float64"), )
paddle.exp(Tensor([9, 10, 0],"float64"), )
paddle.expm1(Tensor([0, 2],"float64"), )
paddle.expm1(Tensor([2, 0],"float64"), )
paddle.expm1(Tensor([0],"float64"), )
paddle.expm1(Tensor([0, 3],"float64"), )
paddle.expm1(Tensor([3, 0],"float64"), )
paddle.expm1(Tensor([0, 16, 32],"complex128"), )
paddle.expm1(Tensor([8, 0, 32],"complex128"), )
paddle.expm1(Tensor([8, 16, 0],"complex128"), )
paddle.expm1(Tensor([0, 16, 32],"complex64"), )
paddle.expm1(Tensor([8, 0, 32],"complex64"), )
paddle.expm1(Tensor([8, 16, 0],"complex64"), )
paddle.expm1(Tensor([0, 16, 32],"float16"), )
paddle.expm1(Tensor([8, 0, 32],"float16"), )
paddle.expm1(Tensor([8, 16, 0],"float16"), )
paddle.expm1(Tensor([0, 16, 32],"float32"), )
paddle.expm1(Tensor([8, 0, 32],"float32"), )
paddle.expm1(Tensor([8, 16, 0],"float32"), )
paddle.expm1(Tensor([0, 16, 32],"float64"), )
paddle.expm1(Tensor([8, 0, 32],"float64"), )
paddle.expm1(Tensor([8, 16, 0],"float64"), )
paddle.flatten(Tensor([0, 1024, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 1024, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 1024, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 1280, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 1280, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 1280, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 16, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([1, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([1, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([1, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 16, 6, 6],"float32"), 1, )
paddle.flatten(Tensor([1, 0, 6, 6],"float32"), 1, )
paddle.flatten(Tensor([1, 16, 0, 6],"float32"), 1, )
paddle.flatten(Tensor([1, 16, 6, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 2048, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 2048, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 2048, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 512, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 512, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 512, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 512, 7, 7],"float32"), 1, )
paddle.flatten(Tensor([1, 0, 7, 7],"float32"), 1, )
paddle.flatten(Tensor([1, 512, 0, 7],"float32"), 1, )
paddle.flatten(Tensor([1, 512, 7, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 576, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 576, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([1, 576, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 8, 14, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 0, 14, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 8, 0, 12],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([1, 8, 14, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([0, 8, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 0, 7, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 8, 0, 7],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([1, 8, 7, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([10, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([10, 512, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([10, 512, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 784],"float32"), )
paddle.flatten(Tensor([1000, 0],"float32"), )
paddle.flatten(Tensor([16, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([16, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([16, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([2, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 1024, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 1024, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 1024, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1024, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1024, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 128, 3, 3],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 3, 3],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 128, 0, 3],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 128, 3, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1280, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 1280, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([2, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([2, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([2, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 1664, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1664, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1664, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 1920, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1920, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 1920, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2048, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 2048, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 2048, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2048, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2048, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 2208, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2208, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2208, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 256, 6, 6],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 6, 6],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 256, 0, 6],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 256, 6, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 2688, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2688, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 2688, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 3, 4, 4],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([2, 0, 4, 4],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([2, 3, 0, 4],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([2, 3, 4, 0],"float32"), start_axis=1, stop_axis=2, )
paddle.flatten(Tensor([0, 3, 4, 4],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 4, 4],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 0, 4],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([2, 3, 4, 0],"float32"), start_axis=-2, stop_axis=-1, )
paddle.flatten(Tensor([0, 3],"bfloat16"), )
paddle.flatten(Tensor([2, 0],"bfloat16"), )
paddle.flatten(Tensor([0, 3],"float32"), )
paddle.flatten(Tensor([2, 0],"float32"), )
paddle.flatten(Tensor([0, 3],"int32"), )
paddle.flatten(Tensor([2, 0],"int32"), )
paddle.flatten(Tensor([0, 4, 5],"float32"), )
paddle.flatten(Tensor([2, 0, 5],"float32"), )
paddle.flatten(Tensor([2, 4, 0],"float32"), )
paddle.flatten(Tensor([0, 4, 5],"float64"), )
paddle.flatten(Tensor([2, 0, 5],"float64"), )
paddle.flatten(Tensor([2, 4, 0],"float64"), )
paddle.flatten(Tensor([0, 4, 5],"int32"), )
paddle.flatten(Tensor([2, 0, 5],"int32"), )
paddle.flatten(Tensor([2, 4, 0],"int32"), )
paddle.flatten(Tensor([0, 4, 5],"int64"), )
paddle.flatten(Tensor([2, 0, 5],"int64"), )
paddle.flatten(Tensor([2, 4, 0],"int64"), )
paddle.flatten(Tensor([2, 512, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 512, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 512, 1, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 512, 0, 1],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 512, 1, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([2, 0, 7, 7],"float32"), 1, )
paddle.flatten(Tensor([2, 512, 0, 7],"float32"), 1, )
paddle.flatten(Tensor([2, 512, 7, 0],"float32"), 1, )
paddle.flatten(Tensor([2, 576, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 576, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 6, 10, 10],"float32"), 1, )
paddle.flatten(Tensor([2, 0, 10, 10],"float32"), 1, )
paddle.flatten(Tensor([2, 6, 0, 10],"float32"), 1, )
paddle.flatten(Tensor([2, 6, 10, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 960, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 960, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([2, 960, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([272, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([272, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([272, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 100, 120],"float64"), 1, 2, )
paddle.flatten(Tensor([3, 0, 120],"float64"), 1, 2, )
paddle.flatten(Tensor([3, 100, 0],"float64"), 1, 2, )
paddle.flatten(Tensor([3, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([3, 2048, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([3, 2048, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 4, 2],"float32"), )
paddle.flatten(Tensor([3, 0, 2],"float32"), )
paddle.flatten(Tensor([3, 4, 0],"float32"), )
paddle.flatten(Tensor([0, 4, 2],"float64"), )
paddle.flatten(Tensor([3, 0, 2],"float64"), )
paddle.flatten(Tensor([3, 4, 0],"float64"), )
paddle.flatten(Tensor([0, 4, 2],"int32"), )
paddle.flatten(Tensor([3, 0, 2],"int32"), )
paddle.flatten(Tensor([3, 4, 0],"int32"), )
paddle.flatten(Tensor([0, 4, 2],"int64"), )
paddle.flatten(Tensor([3, 0, 2],"int64"), )
paddle.flatten(Tensor([3, 4, 0],"int64"), )
paddle.flatten(Tensor([0, 4, 4, 5],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 0, 4, 5],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 4, 0, 5],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([3, 4, 4, 0],"float32"), start_axis=1, stop_axis=-1, )
paddle.flatten(Tensor([0, 4],"float16"), )
paddle.flatten(Tensor([3, 0],"float16"), )
paddle.flatten(Tensor([0, 4],"float32"), )
paddle.flatten(Tensor([3, 0],"float32"), )
paddle.flatten(Tensor([0, 4],"float64"), )
paddle.flatten(Tensor([3, 0],"float64"), )
paddle.flatten(Tensor([0, 5],"float32"), )
paddle.flatten(Tensor([32, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([32, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([32, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([32, 0, 6, 6],"float32"), 1, )
paddle.flatten(Tensor([32, 16, 0, 6],"float32"), 1, )
paddle.flatten(Tensor([32, 16, 6, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 2, 26, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([32, 0, 26, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([32, 2, 0, 26],"float32"), start_axis=1, )
paddle.flatten(Tensor([32, 2, 26, 0],"float32"), start_axis=1, )
paddle.flatten(Tensor([36, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([36, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([36, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 7, 6],"float64"), )
paddle.flatten(Tensor([4, 0, 6],"float64"), )
paddle.flatten(Tensor([4, 7, 0],"float64"), )
paddle.flatten(Tensor([0, 7, 6],"float64"), 1, 2, )
paddle.flatten(Tensor([4, 0, 6],"float64"), 1, 2, )
paddle.flatten(Tensor([4, 7, 0],"float64"), 1, 2, )
paddle.flatten(Tensor([0, 3, 4],"float64"), 1, 2, )
paddle.flatten(Tensor([5, 0, 4],"float64"), 1, 2, )
paddle.flatten(Tensor([5, 3, 0],"float64"), 1, 2, )
paddle.flatten(Tensor([5, 0],"float32"), )
paddle.flatten(Tensor([5, 0],"float64"), )
paddle.flatten(Tensor([512, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([512, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([512, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 16, 5, 5],"float16"), 1, )
paddle.flatten(Tensor([64, 0, 5, 5],"float16"), 1, )
paddle.flatten(Tensor([64, 16, 0, 5],"float16"), 1, )
paddle.flatten(Tensor([64, 16, 5, 0],"float16"), 1, )
paddle.flatten(Tensor([64, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([64, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([64, 16, 5, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 16, 5, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 0, 5, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 16, 0, 5],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 16, 5, 0],"float32"), 1, -1, )
paddle.flatten(Tensor([64, 0, 1, 1],"float32"), 1, )
paddle.flatten(Tensor([64, 512, 0, 1],"float32"), 1, )
paddle.flatten(Tensor([64, 512, 1, 0],"float32"), 1, )
paddle.flatten(Tensor([0, 4, 6],"float64"), 1, 2, )
paddle.flatten(Tensor([7, 0, 6],"float64"), 1, 2, )
paddle.flatten(Tensor([7, 4, 0],"float64"), 1, 2, )
paddle.flatten(Tensor([8, 0, 5, 5],"float32"), 1, )
paddle.flatten(Tensor([8, 16, 0, 5],"float32"), 1, )
paddle.flatten(Tensor([8, 16, 5, 0],"float32"), 1, )
paddle.flip(Tensor([0, 2],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([2, 0],"float32"), tuple(-2,-1,), )
paddle.flip(Tensor([0, 2],"float64"), tuple(-2,-1,), )
paddle.flip(Tensor([2, 0],"float64"), tuple(-2,-1,), )
paddle.flip(Tensor([0, 3],"float32"), 1, )
paddle.flip(Tensor([2, 0],"float32"), 1, )
paddle.flip(Tensor([0, 3],"float32"), list[0,], )
paddle.flip(Tensor([2, 0],"float32"), list[0,], )
paddle.flip(Tensor([0, 2, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 0, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([3, 2, 0],"float32"), list[0,1,], )
paddle.floor(Tensor([0, 3, 4],"float64"), )
paddle.floor(Tensor([1, 0, 4],"float64"), )
paddle.floor(Tensor([1, 3, 0],"float64"), )
paddle.floor(Tensor([0, 3],"float64"), )
paddle.floor(Tensor([1, 0],"float64"), )
paddle.floor(Tensor([0],"float32"), )
paddle.floor(Tensor([0],"float64"), )
paddle.floor(Tensor([0, 12],"float32"), )
paddle.floor(Tensor([10, 0],"float32"), )
paddle.floor(Tensor([0, 12],"float64"), )
paddle.floor(Tensor([10, 0],"float64"), )
paddle.floor(Tensor([0, 2, 3],"float32"), )
paddle.floor(Tensor([100000, 0, 3],"float32"), )
paddle.floor(Tensor([100000, 2, 0],"float32"), )
paddle.floor(Tensor([0, 2],"float32"), )
paddle.floor(Tensor([100000, 0],"float32"), )
paddle.floor(Tensor([0, 84],"float32"), )
paddle.floor(Tensor([120, 0],"float32"), )
paddle.floor(Tensor([0, 16],"float32"), )
paddle.floor(Tensor([150, 0],"float32"), )
paddle.floor(Tensor([0, 1, 28, 28],"float32"), )
paddle.floor(Tensor([16, 0, 28, 28],"float32"), )
paddle.floor(Tensor([16, 1, 0, 28],"float32"), )
paddle.floor(Tensor([16, 1, 28, 0],"float32"), )
paddle.floor(Tensor([0, 120],"float32"), )
paddle.floor(Tensor([16, 0],"float32"), )
paddle.floor(Tensor([0, 400],"float32"), )
paddle.floor(Tensor([0, 6, 14, 14],"float32"), )
paddle.floor(Tensor([16, 0, 14, 14],"float32"), )
paddle.floor(Tensor([16, 6, 0, 14],"float32"), )
paddle.floor(Tensor([16, 6, 14, 0],"float32"), )
paddle.floor(Tensor([0, 6, 5, 5],"float32"), )
paddle.floor(Tensor([16, 0, 5, 5],"float32"), )
paddle.floor(Tensor([16, 6, 0, 5],"float32"), )
paddle.floor(Tensor([16, 6, 5, 0],"float32"), )
paddle.floor(Tensor([0, 1],"float32"), )
paddle.floor(Tensor([2, 0],"float32"), )
paddle.floor(Tensor([0, 3],"float32"), )
paddle.floor(Tensor([0, 5, 2, 3],"float32"), )
paddle.floor(Tensor([2, 0, 2, 3],"float32"), )
paddle.floor(Tensor([2, 5, 0, 3],"float32"), )
paddle.floor(Tensor([2, 5, 2, 0],"float32"), )
paddle.floor(Tensor([0, 5, 2],"float32"), )
paddle.floor(Tensor([2, 0, 2],"float32"), )
paddle.floor(Tensor([2, 5, 0],"float32"), )
paddle.floor(Tensor([0, 8, 8],"float32"), )
paddle.floor(Tensor([2, 0, 8],"float32"), )
paddle.floor(Tensor([2, 8, 0],"float32"), )
paddle.floor(Tensor([0],"int16"), )
paddle.floor(Tensor([0],"int32"), )
paddle.floor(Tensor([0],"int64"), )
paddle.floor(Tensor([0],"int8"), )
paddle.floor(Tensor([0],"uint8"), )
paddle.floor(Tensor([0, 28],"float32"), )
paddle.floor(Tensor([28, 0],"float32"), )
paddle.floor(Tensor([0, 200, 40],"float32"), )
paddle.floor(Tensor([30, 0, 40],"float32"), )
paddle.floor(Tensor([30, 200, 0],"float32"), )
paddle.floor(Tensor([32, 0, 28, 28],"float32"), )
paddle.floor(Tensor([32, 1, 0, 28],"float32"), )
paddle.floor(Tensor([32, 1, 28, 0],"float32"), )
paddle.floor(Tensor([32, 0],"float32"), )
paddle.floor(Tensor([32, 0, 14, 14],"float32"), )
paddle.floor(Tensor([32, 6, 0, 14],"float32"), )
paddle.floor(Tensor([32, 6, 14, 0],"float32"), )
paddle.floor(Tensor([0, 1, 6],"float64"), )
paddle.floor(Tensor([4, 0, 6],"float64"), )
paddle.floor(Tensor([4, 1, 0],"float64"), )
paddle.floor(Tensor([4, 0],"float32"), )
paddle.floor(Tensor([0, 1],"float64"), )
paddle.floor(Tensor([4, 0],"float64"), )
paddle.floor(Tensor([0, 2, 2, 3],"float32"), )
paddle.floor(Tensor([4, 0, 2, 3],"float32"), )
paddle.floor(Tensor([4, 2, 0, 3],"float32"), )
paddle.floor(Tensor([4, 2, 2, 0],"float32"), )
paddle.floor(Tensor([0, 2, 2],"float32"), )
paddle.floor(Tensor([4, 0, 2],"float32"), )
paddle.floor(Tensor([4, 2, 0],"float32"), )
paddle.floor(Tensor([4, 5, 0],"float32"), )
paddle.floor(Tensor([0, 5, 2],"float64"), )
paddle.floor(Tensor([4, 0, 2],"float64"), )
paddle.floor(Tensor([4, 5, 0],"float64"), )
paddle.floor(Tensor([0, 7, 1],"float64"), )
paddle.floor(Tensor([4, 0, 1],"float64"), )
paddle.floor(Tensor([4, 7, 0],"float64"), )
paddle.floor(Tensor([400, 0],"float32"), )
paddle.floor(Tensor([0, 1, 4],"float64"), )
paddle.floor(Tensor([5, 0, 4],"float64"), )
paddle.floor(Tensor([5, 1, 0],"float64"), )
paddle.floor(Tensor([5, 0],"float64"), )
paddle.floor(Tensor([0, 1, 3, 3],"float32"), )
paddle.floor(Tensor([6, 0, 3, 3],"float32"), )
paddle.floor(Tensor([6, 1, 0, 3],"float32"), )
paddle.floor(Tensor([6, 1, 3, 0],"float32"), )
paddle.floor(Tensor([64, 0, 28, 28],"float32"), )
paddle.floor(Tensor([64, 1, 0, 28],"float32"), )
paddle.floor(Tensor([64, 1, 28, 0],"float32"), )
paddle.floor(Tensor([64, 0],"float32"), )
paddle.floor(Tensor([64, 0, 14, 14],"float32"), )
paddle.floor(Tensor([64, 6, 0, 14],"float32"), )
paddle.floor(Tensor([64, 6, 14, 0],"float32"), )
paddle.floor(Tensor([7, 0],"float64"), )
paddle.floor(Tensor([0, 8],"float32"), )
paddle.floor(Tensor([8, 0],"float32"), )
paddle.floor(Tensor([0, 10],"float32"), )
paddle.floor(Tensor([84, 0],"float32"), )
paddle.floor(Tensor([0, 6],"float32"), )
paddle.floor(Tensor([9, 0],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmax(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.fmax(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.fmax(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.fmax(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmax(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmax(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmax(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmax(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.fmax(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.fmax(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.fmax(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.fmax(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.fmax(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.fmax(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.fmax(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.fmin(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.fmin(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.fmin(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.fmin(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.fmin(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.fmin(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmin(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.fmin(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.fmin(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.fmin(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.fmin(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.fmin(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.fmin(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.frac(Tensor([0, 20, 1],"float32"), )
paddle.frac(Tensor([10, 0, 1],"float32"), )
paddle.frac(Tensor([10, 20, 0],"float32"), )
paddle.frac(Tensor([0, 3],"float32"), )
paddle.frac(Tensor([2, 0],"float32"), )
paddle.frac(Tensor([0, 3],"float64"), )
paddle.frac(Tensor([2, 0],"float64"), )
paddle.frac(Tensor([0, 3],"int32"), )
paddle.frac(Tensor([2, 0],"int32"), )
paddle.frac(Tensor([0, 3],"int64"), )
paddle.frac(Tensor([2, 0],"int64"), )
paddle.full(shape=list[], fill_value=Tensor([0],"int64"), dtype="int64", )
paddle.full(shape=list[1,2,], dtype=type(numpy.float32), fill_value=Tensor([0],"float32"), )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=0.0, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=10000000000, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=3, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int32"),], fill_value=3.8, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([1],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([0],"int64"),Tensor([1],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([1],"int32"),Tensor([1],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=list[Tensor([0],"int32"),Tensor([0],"int64"),Tensor([0],"int64"),], dtype="float32", fill_value=1.1, )
paddle.full(shape=Tensor([0],"int32"), dtype="float32", fill_value=1.1, )
paddle.full(shape=Tensor([0],"int32"), fill_value=3.8, )
paddle.full(shape=Tensor([0],"int32"), fill_value=Tensor([1],"float32"), )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([0],"float32"), )
paddle.full(shape=Tensor([0],"int32"), fill_value=Tensor([0],"float32"), )
paddle.full(shape=Tensor([0],"int32"), fill_value=Tensor([1],"int32"), )
paddle.full(shape=Tensor([2],"int32"), fill_value=Tensor([0],"int32"), )
paddle.full(shape=Tensor([0],"int32"), fill_value=Tensor([0],"int32"), )
paddle.full_like(Tensor([0, 2],"float32"), dtype=type(numpy.float32), fill_value=1.1, )
paddle.full_like(Tensor([1, 0],"float32"), dtype=type(numpy.float32), fill_value=1.1, )
paddle.full_like(Tensor([0, 3, 4],"float64"), fill_value=1, )
paddle.full_like(Tensor([1, 0, 4],"float64"), fill_value=1, )
paddle.full_like(Tensor([1, 3, 0],"float64"), fill_value=1, )
paddle.full_like(Tensor([0, 300, 4096],"float32"), 1, )
paddle.full_like(Tensor([1, 0, 4096],"float32"), 1, )
paddle.full_like(Tensor([1, 300, 0],"float32"), 1, )
paddle.full_like(Tensor([0],"float32"), fill_value=0, )
paddle.full_like(Tensor([0],"float32"), fill_value=2, )
paddle.full_like(Tensor([0],"float32"), fill_value=5, )
paddle.full_like(Tensor([0],"float32"), fill_value=7, )
paddle.full_like(Tensor([0],"float64"), fill_value=167, )
paddle.full_like(Tensor([0, 12],"float32"), 0, )
paddle.full_like(Tensor([10, 0],"float32"), 0, )
paddle.full_like(Tensor([0, 12],"float64"), 0, )
paddle.full_like(Tensor([10, 0],"float64"), 0, )
paddle.full_like(Tensor([0, 1024],"float32"), 0.3917133774091194, )
paddle.full_like(Tensor([1024, 0],"float32"), 0.3917133774091194, )
paddle.full_like(Tensor([0, 1],"float64"), 0.0, )
paddle.full_like(Tensor([114, 0],"float64"), 0.0, )
paddle.full_like(Tensor([0, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([114, 0],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([0, 1],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([114, 0],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([0, 1],"float64"), math.inf, )
paddle.full_like(Tensor([114, 0],"float64"), math.inf, )
paddle.full_like(Tensor([0, 1],"float64"), -math.inf, )
paddle.full_like(Tensor([114, 0],"float64"), -math.inf, )
paddle.full_like(Tensor([0],"float64"), 0.0, )
paddle.full_like(Tensor([0],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([0],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([0],"float64"), math.inf, )
paddle.full_like(Tensor([0],"float64"), -math.inf, )
paddle.full_like(Tensor([0, 512],"float16"), 127, )
paddle.full_like(Tensor([128, 0],"float16"), 127, )
paddle.full_like(Tensor([0, 512],"float16"), -127, )
paddle.full_like(Tensor([128, 0],"float16"), -127, )
paddle.full_like(Tensor([0, 5, 3],"float32"), 0.0, )
paddle.full_like(Tensor([148, 0, 3],"float32"), 0.0, )
paddle.full_like(Tensor([148, 5, 0],"float32"), 0.0, )
paddle.full_like(Tensor([0, 5, 3],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([148, 0, 3],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([148, 5, 0],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([0, 5, 3],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([148, 0, 3],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([148, 5, 0],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 5, 3],"float32"), math.inf, )
paddle.full_like(Tensor([148, 0, 3],"float32"), math.inf, )
paddle.full_like(Tensor([148, 5, 0],"float32"), math.inf, )
paddle.full_like(Tensor([0, 5, 3],"float32"), -math.inf, )
paddle.full_like(Tensor([148, 0, 3],"float32"), -math.inf, )
paddle.full_like(Tensor([148, 5, 0],"float32"), -math.inf, )
paddle.full_like(Tensor([0],"int64"), False, dtype="bool", )
paddle.full_like(Tensor([0, 64],"float32"), 1.0, )
paddle.full_like(Tensor([16, 0],"float32"), 1.0, )
paddle.full_like(Tensor([0, 64],"float32"), 1e-20, )
paddle.full_like(Tensor([16, 0],"float32"), 1e-20, )
paddle.full_like(Tensor([0, 64],"float64"), 1.0, )
paddle.full_like(Tensor([16, 0],"float64"), 1.0, )
paddle.full_like(Tensor([0, 64],"float64"), 1e-20, )
paddle.full_like(Tensor([16, 0],"float64"), 1e-20, )
paddle.full_like(Tensor([0, 2],"float32"), 0.0, )
paddle.full_like(Tensor([1948, 0],"float32"), 0.0, )
paddle.full_like(Tensor([0, 2],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([1948, 0],"float32"), -1.1920928955078125e-07, )
paddle.full_like(Tensor([0, 2],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([1948, 0],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 2],"float32"), math.inf, )
paddle.full_like(Tensor([1948, 0],"float32"), math.inf, )
paddle.full_like(Tensor([0, 2],"float32"), -math.inf, )
paddle.full_like(Tensor([1948, 0],"float32"), -math.inf, )
paddle.full_like(Tensor([0, 1],"float32"), 0.5, )
paddle.full_like(Tensor([2, 0],"float32"), 0.5, )
paddle.full_like(Tensor([0, 1],"float32"), fill_value=2, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=2, )
paddle.full_like(Tensor([0, 1],"float64"), 0.5, )
paddle.full_like(Tensor([2, 0],"float64"), 0.5, )
paddle.full_like(Tensor([0, 2],"float32"), 0.5, )
paddle.full_like(Tensor([0, 3],"float32"), 0.0, )
paddle.full_like(Tensor([2, 0],"float32"), 0.0, )
paddle.full_like(Tensor([0, 3],"float32"), 0.5, )
paddle.full_like(Tensor([0, 3],"float32"), 1.0, )
paddle.full_like(Tensor([2, 0],"float32"), 1.0, )
paddle.full_like(Tensor([0, 3],"float32"), -10.0, )
paddle.full_like(Tensor([2, 0],"float32"), -10.0, )
paddle.full_like(Tensor([0, 3],"float32"), 100.0, )
paddle.full_like(Tensor([2, 0],"float32"), 100.0, )
paddle.full_like(Tensor([0, 3],"float32"), 2.0, )
paddle.full_like(Tensor([2, 0],"float32"), 2.0, )
paddle.full_like(Tensor([0, 3],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([2, 0],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 3],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([2, 0],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 3],"float32"), fill_value=math.inf, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=math.inf, )
paddle.full_like(Tensor([0, 3],"float32"), fill_value=nan, )
paddle.full_like(Tensor([2, 0],"float32"), fill_value=nan, )
paddle.full_like(Tensor([0, 3],"float32"), math.inf, )
paddle.full_like(Tensor([2, 0],"float32"), math.inf, )
paddle.full_like(Tensor([0, 3],"float32"), -math.inf, )
paddle.full_like(Tensor([2, 0],"float32"), -math.inf, )
paddle.full_like(Tensor([0, 3],"float64"), 0.5, )
paddle.full_like(Tensor([0, 3],"float64"), fill_value=math.inf, )
paddle.full_like(Tensor([2, 0],"float64"), fill_value=math.inf, )
paddle.full_like(Tensor([0, 3],"float64"), fill_value=nan, )
paddle.full_like(Tensor([2, 0],"float64"), fill_value=nan, )
paddle.full_like(Tensor([0, 4],"float32"), 0.0, )
paddle.full_like(Tensor([0, 4],"float32"), 3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 4],"float32"), -3.4028234663852886e+38, )
paddle.full_like(Tensor([0, 4],"float32"), math.inf, )
paddle.full_like(Tensor([0, 4],"float32"), -math.inf, )
paddle.full_like(Tensor([2, 0],"float16"), 127, )
paddle.full_like(Tensor([2, 0],"float16"), -127, )
paddle.full_like(Tensor([0, 8, 64, 64],"float16"), 127, )
paddle.full_like(Tensor([2, 0, 64, 64],"float16"), 127, )
paddle.full_like(Tensor([2, 8, 0, 64],"float16"), 127, )
paddle.full_like(Tensor([2, 8, 64, 0],"float16"), 127, )
paddle.full_like(Tensor([0, 8, 64, 64],"float16"), -127, )
paddle.full_like(Tensor([2, 0, 64, 64],"float16"), -127, )
paddle.full_like(Tensor([2, 8, 0, 64],"float16"), -127, )
paddle.full_like(Tensor([2, 8, 64, 0],"float16"), -127, )
paddle.full_like(Tensor([0],"float32"), 0.5, )
paddle.full_like(Tensor([0],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([0],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([0, 232],"float16"), 0.0, None, None, )
paddle.full_like(Tensor([219, 0],"float16"), 0.0, None, None, )
paddle.full_like(Tensor([0, 232],"float32"), 0.0, None, None, )
paddle.full_like(Tensor([219, 0],"float32"), 0.0, None, None, )
paddle.full_like(Tensor([0, 232],"float32"), 0.0, VarType(bfloat16), None, )
paddle.full_like(Tensor([219, 0],"float32"), 0.0, VarType(bfloat16), None, )
paddle.full_like(Tensor([0, 232],"int32"), 0.0, Dtype(int16), None, )
paddle.full_like(Tensor([219, 0],"int32"), 0.0, Dtype(int16), None, )
paddle.full_like(Tensor([0, 232],"int32"), 0.0, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 0.0, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 0.0, VarType(float32), None, )
paddle.full_like(Tensor([219, 0],"int32"), 0.0, VarType(float32), None, )
paddle.full_like(Tensor([0, 232],"int32"), 1.0, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1.0, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 1e-10, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1e-10, None, None, )
paddle.full_like(Tensor([0, 232],"int32"), 1e-100, None, None, )
paddle.full_like(Tensor([219, 0],"int32"), 1e-100, None, None, )
paddle.full_like(Tensor([0, 10000],"float32"), 0.0, )
paddle.full_like(Tensor([3, 0],"float32"), 0.0, )
paddle.full_like(Tensor([0, 40],"float32"), 1.0, )
paddle.full_like(Tensor([3, 0],"float32"), 1.0, )
paddle.full_like(Tensor([0, 40],"float32"), -1.0, )
paddle.full_like(Tensor([3, 0],"float32"), -1.0, )
paddle.full_like(Tensor([0, 1, 6],"float64"), fill_value=6, )
paddle.full_like(Tensor([4, 0, 6],"float64"), fill_value=6, )
paddle.full_like(Tensor([4, 1, 0],"float64"), fill_value=6, )
paddle.full_like(Tensor([0, 1],"float32"), fill_value=6, )
paddle.full_like(Tensor([4, 0],"float32"), fill_value=6, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=41, )
paddle.full_like(Tensor([4, 0],"float64"), fill_value=41, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=6, )
paddle.full_like(Tensor([4, 0],"float64"), fill_value=6, )
paddle.full_like(Tensor([0, 5, 2],"float32"), 0, )
paddle.full_like(Tensor([4, 0, 2],"float32"), 0, )
paddle.full_like(Tensor([4, 5, 0],"float32"), 0, )
paddle.full_like(Tensor([0, 5, 2],"float64"), 0, )
paddle.full_like(Tensor([4, 0, 2],"float64"), 0, )
paddle.full_like(Tensor([4, 5, 0],"float64"), 0, )
paddle.full_like(Tensor([0, 7, 1],"float64"), fill_value=5, )
paddle.full_like(Tensor([4, 0, 1],"float64"), fill_value=5, )
paddle.full_like(Tensor([4, 7, 0],"float64"), fill_value=5, )
paddle.full_like(Tensor([400, 0],"float64"), 0.0, )
paddle.full_like(Tensor([400, 0],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([400, 0],"float64"), -2.220446049250313e-16, )
paddle.full_like(Tensor([400, 0],"float64"), math.inf, )
paddle.full_like(Tensor([400, 0],"float64"), -math.inf, )
paddle.full_like(Tensor([0, 1, 4],"float64"), fill_value=2, )
paddle.full_like(Tensor([5, 0, 4],"float64"), fill_value=2, )
paddle.full_like(Tensor([5, 1, 0],"float64"), fill_value=2, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=11, )
paddle.full_like(Tensor([5, 0],"float64"), fill_value=11, )
paddle.full_like(Tensor([0, 3],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([5, 0],"float64"), 0.9999998807907104, )
paddle.full_like(Tensor([0, 3],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([5, 0],"float64"), 1.1754943508222875e-38, )
paddle.full_like(Tensor([0],"float32"), 1.0, )
paddle.full_like(Tensor([0],"float32"), 1e-20, )
paddle.full_like(Tensor([0],"float64"), 1.0, )
paddle.full_like(Tensor([0],"float64"), 1e-20, )
paddle.full_like(Tensor([0, 1],"float64"), fill_value=23, )
paddle.full_like(Tensor([7, 0],"float64"), fill_value=23, )
paddle.gammainc(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammainc(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammainc(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammainc(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammainc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammainc(Tensor([0, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammainc(Tensor([3, 0],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gammainc(Tensor([0, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammainc(Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 4, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 5],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 4, 0],"float32"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammaincc(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 4, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 5],"float64"), )
paddle.gammaincc(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.gammaincc(Tensor([0, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 0],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([0, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([0, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 0],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gammaincc(Tensor([0, 40],"float32"), y=Tensor([0, 40],"float32"), )
paddle.gammaincc(Tensor([3, 0],"float32"), y=Tensor([3, 0],"float32"), )
paddle.gcd(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.gcd(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.gcd(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.gcd(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )
paddle.gcd(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.gcd(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.gcd(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.gcd(Tensor([6],"int32"), Tensor([0],"int32"), )
paddle.gcd(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.heaviside(Tensor([0],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([1],"float32"), Tensor([0, 2048],"float32"), )
paddle.heaviside(Tensor([1],"float32"), Tensor([300, 0],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([0, 13, 1],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([100, 0, 1],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.heaviside(Tensor([0, 13, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([100, 0, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 0],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([100, 13, 17],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([0, 17],"float32"), Tensor([0, 17],"float32"), )
paddle.heaviside(Tensor([13, 0],"float32"), Tensor([13, 0],"float32"), )
paddle.heaviside(Tensor([0, 17],"float64"), Tensor([13, 17],"float64"), )
paddle.heaviside(Tensor([13, 0],"float64"), Tensor([13, 17],"float64"), )
paddle.heaviside(Tensor([13, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.heaviside(Tensor([13, 17],"float64"), Tensor([13, 0],"float64"), )
paddle.heaviside(Tensor([0, 17],"float64"), Tensor([0, 17],"float64"), )
paddle.heaviside(Tensor([13, 0],"float64"), Tensor([13, 0],"float64"), )
paddle.heaviside(Tensor([0, 17],"int32"), Tensor([13, 17],"int32"), )
paddle.heaviside(Tensor([13, 0],"int32"), Tensor([13, 17],"int32"), )
paddle.heaviside(Tensor([13, 17],"int32"), Tensor([0, 17],"int32"), )
paddle.heaviside(Tensor([13, 17],"int32"), Tensor([13, 0],"int32"), )
paddle.heaviside(Tensor([0, 17],"int32"), Tensor([0, 17],"int32"), )
paddle.heaviside(Tensor([13, 0],"int32"), Tensor([13, 0],"int32"), )
paddle.heaviside(Tensor([0, 17],"int64"), Tensor([13, 17],"int64"), )
paddle.heaviside(Tensor([13, 0],"int64"), Tensor([13, 17],"int64"), )
paddle.heaviside(Tensor([13, 17],"int64"), Tensor([0, 17],"int64"), )
paddle.heaviside(Tensor([13, 17],"int64"), Tensor([13, 0],"int64"), )
paddle.heaviside(Tensor([0, 17],"int64"), Tensor([0, 17],"int64"), )
paddle.heaviside(Tensor([13, 0],"int64"), Tensor([13, 0],"int64"), )
paddle.heaviside(Tensor([0, 100, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 0, 13, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 0, 17],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 0],"float32"), Tensor([100, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([0, 13, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 0, 17],"float32"), )
paddle.heaviside(Tensor([2, 100, 13, 17],"float32"), Tensor([100, 13, 0],"float32"), )
paddle.heaviside(Tensor([2048],"float32"), Tensor([0, 2048],"float32"), )
paddle.heaviside(Tensor([2048],"float32"), Tensor([300, 0],"float32"), )
paddle.heaviside(Tensor([0, 2048],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([300, 0],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([0],"float32"), )
paddle.heaviside(Tensor([0, 2048],"float32"), Tensor([2048],"float32"), )
paddle.heaviside(Tensor([300, 0],"float32"), Tensor([2048],"float32"), )
paddle.heaviside(Tensor([0, 2048],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([300, 0],"float32"), Tensor([300, 2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([0, 2048],"float32"), )
paddle.heaviside(Tensor([300, 2048],"float32"), Tensor([300, 0],"float32"), )
paddle.heaviside(Tensor([0, 2048],"float32"), Tensor([0, 2048],"float32"), )
paddle.heaviside(Tensor([300, 0],"float32"), Tensor([300, 0],"float32"), )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([0, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([4, 0],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([0, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 0],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([0],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([0],"float64"),), weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=tuple(Tensor([5],"float64"),Tensor([3],"float64"),), weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([0, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 0, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 0],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([0, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 0],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([0, 2],"float32"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 0],"float32"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([0, 2],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 0],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([0, 2],"float64"), bins=list[3,3,], weights=Tensor([4],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 0],"float64"), bins=list[3,3,], weights=Tensor([4],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list[3,3,], weights=Tensor([0],"float64"), ranges=None, density=False, )
paddle.hsplit(Tensor([0, 6, 3],"int64"), 2, )
paddle.hsplit(Tensor([4, 0, 3],"int64"), 2, )
paddle.hsplit(Tensor([4, 6, 0],"int64"), 2, )
paddle.hsplit(Tensor([0, 6, 3],"int64"), 3, )
paddle.hsplit(Tensor([4, 0, 3],"int64"), 3, )
paddle.hsplit(Tensor([4, 6, 0],"int64"), 3, )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 0, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 6, 0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0, 6, 3],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 0, 3],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 6, 0],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([0, 6],"int64"), 2, )
paddle.hsplit(Tensor([4, 0],"int64"), 2, )
paddle.hsplit(Tensor([0, 6],"int64"), 3, )
paddle.hsplit(Tensor([4, 0],"int64"), 3, )
paddle.hsplit(Tensor([0, 6],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 0],"int64"), list[-1,], )
paddle.hsplit(Tensor([0, 6],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0, 6],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0, 6],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 0],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([0],"bool"), 3, )
paddle.hsplit(Tensor([0],"float16"), 3, )
paddle.hsplit(Tensor([0],"float32"), 3, )
paddle.hsplit(Tensor([0],"float64"), 3, )
paddle.hsplit(Tensor([0],"int32"), 3, )
paddle.hsplit(Tensor([0],"int64"), 2, )
paddle.hsplit(Tensor([0],"int64"), 3, )
paddle.hsplit(Tensor([0],"int64"), list[-1,], )
paddle.hsplit(Tensor([0],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([0],"int64"), list[2,4,], )
paddle.hsplit(Tensor([0],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([0],"uint8"), 3, )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.hstack(list[Tensor([0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.hstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.hstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.hstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.hstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.hypot(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.hypot(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.hypot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.hypot(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.hypot(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.hypot(Tensor([0, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.hypot(Tensor([10, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([10, 0],"float32"), )
paddle.hypot(Tensor([0, 20],"float32"), Tensor([0, 20],"float32"), )
paddle.hypot(Tensor([6],"float32"), Tensor([0],"float32"), )
paddle.i0(Tensor([0, 20, 1],"float32"), )
paddle.i0(Tensor([10, 0, 1],"float32"), )
paddle.i0(Tensor([10, 20, 0],"float32"), )
paddle.i0(Tensor([0],"float32"), )
paddle.i0(Tensor([0],"float64"), )
paddle.i0e(Tensor([0],"float32"), )
paddle.i0e(Tensor([0],"float64"), )
paddle.i1(Tensor([0],"float64"), )
paddle.i1(Tensor([0],"float32"), )
paddle.i1e(Tensor([0],"float64"), )
paddle.i1e(Tensor([0],"float32"), )
paddle.imag(Tensor([0, 10, 10, 20],"complex128"), )
paddle.imag(Tensor([10, 0, 10, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 0, 20],"complex128"), )
paddle.imag(Tensor([10, 10, 10, 0],"complex128"), )
paddle.imag(Tensor([0, 20, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex128"), )
paddle.imag(Tensor([0, 20, 2, 3],"complex64"), )
paddle.imag(Tensor([2, 0, 2, 3],"complex64"), )
paddle.imag(Tensor([2, 20, 0, 3],"complex64"), )
paddle.imag(Tensor([2, 20, 2, 0],"complex64"), )
paddle.imag(Tensor([0, 3],"complex128"), )
paddle.imag(Tensor([2, 0],"complex128"), )
paddle.imag(Tensor([0, 3],"complex64"), )
paddle.imag(Tensor([2, 0],"complex64"), )
paddle.index_fill(Tensor([0, 15, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 0, 10],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 0],"bool"), Tensor([5],"int32"), 1, True, )
paddle.index_fill(Tensor([10, 15, 10],"bool"), Tensor([0],"int32"), 1, True, )
paddle.index_fill(Tensor([0, 15, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 0, 10],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 0],"float16"), Tensor([5],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([10, 15, 10],"float16"), Tensor([0],"int64"), 1, 0.5, )
paddle.index_fill(Tensor([0, 15, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 0, 10],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 0],"int64"), Tensor([5],"int32"), 1, -1, )
paddle.index_fill(Tensor([10, 15, 10],"int64"), Tensor([0],"int32"), 1, -1, )
paddle.index_fill(Tensor([0],"int64"), Tensor([28],"int64"), 0, 5, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 5, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 5, )
paddle.index_fill(Tensor([0],"int64"), Tensor([30],"int64"), 0, 7, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 7, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 7, )
paddle.index_fill(Tensor([0],"int64"), Tensor([38],"int64"), 0, 6, )
paddle.index_fill(Tensor([128],"int64"), Tensor([0],"int64"), 0, 6, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 6, )
paddle.index_fill(Tensor([0, 40],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([20, 0],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([20, 40],"float32"), Tensor([0],"int64"), 1, -1, )
paddle.index_fill(Tensor([0, 40],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([20, 0],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([20, 40],"float64"), Tensor([0],"int64"), 0, -1, )
paddle.index_fill(Tensor([0],"int64"), Tensor([4],"int64"), 0, 2, )
paddle.index_fill(Tensor([4],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.index_fill(Tensor([0],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.index_fill(Tensor([0],"int64"), Tensor([5],"int64"), 0, 2, )
paddle.index_fill(Tensor([8],"int64"), Tensor([0],"int64"), 0, 2, )
paddle.inner(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.inner(Tensor([2, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.inner(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.inner(Tensor([2, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.inner(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.inner(Tensor([2, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.inner(Tensor([0],"float32"), Tensor([2],"float32"), )
paddle.inner(Tensor([2],"float32"), Tensor([0],"float32"), )
paddle.inner(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.inner(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), )
paddle.inner(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), )
paddle.inner(Tensor([0, 50],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([20, 0],"float64"), Tensor([50],"float64"), )
paddle.inner(Tensor([20, 50],"float64"), Tensor([0],"float64"), )
paddle.inner(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), )
paddle.inner(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), )
paddle.is_complex(Tensor([0, 14, 5, 14],"complex128"), )
paddle.is_complex(Tensor([1, 0, 5, 14],"complex128"), )
paddle.is_complex(Tensor([1, 14, 0, 14],"complex128"), )
paddle.is_complex(Tensor([1, 14, 5, 0],"complex128"), )
paddle.is_complex(Tensor([0, 2, 2],"float32"), )
paddle.is_complex(Tensor([1, 0, 2],"float32"), )
paddle.is_complex(Tensor([1, 2, 0],"float32"), )
paddle.is_complex(Tensor([0, 2],"float32"), )
paddle.is_complex(Tensor([1, 0],"float32"), )
paddle.is_complex(Tensor([0],"float32"), )
paddle.is_complex(Tensor([0, 10, 20],"float32"), )
paddle.is_complex(Tensor([10, 0, 20],"float32"), )
paddle.is_complex(Tensor([10, 10, 0],"float32"), )
paddle.is_complex(Tensor([0],"int64"), )
paddle.is_complex(Tensor([0, 100],"float32"), )
paddle.is_complex(Tensor([100, 0],"float32"), )
paddle.is_complex(Tensor([0, 20, 2],"float16"), )
paddle.is_complex(Tensor([12, 0, 2],"float16"), )
paddle.is_complex(Tensor([12, 20, 0],"float16"), )
paddle.is_complex(Tensor([0, 20, 2],"float32"), )
paddle.is_complex(Tensor([12, 0, 2],"float32"), )
paddle.is_complex(Tensor([12, 20, 0],"float32"), )
paddle.is_complex(Tensor([0, 20, 2],"float64"), )
paddle.is_complex(Tensor([12, 0, 2],"float64"), )
paddle.is_complex(Tensor([12, 20, 0],"float64"), )
paddle.is_complex(Tensor([0, 16],"float32"), )
paddle.is_complex(Tensor([16, 0],"float32"), )
paddle.is_complex(Tensor([0, 1],"float64"), )
paddle.is_complex(Tensor([2, 0],"float64"), )
paddle.is_complex(Tensor([2, 0, 2],"float32"), )
paddle.is_complex(Tensor([2, 2, 0],"float32"), )
paddle.is_complex(Tensor([2, 0],"float32"), )
paddle.is_complex(Tensor([0, 3, 4, 5],"bfloat16"), )
paddle.is_complex(Tensor([2, 0, 4, 5],"bfloat16"), )
paddle.is_complex(Tensor([2, 3, 0, 5],"bfloat16"), )
paddle.is_complex(Tensor([2, 3, 4, 0],"bfloat16"), )
paddle.is_complex(Tensor([0, 3, 4, 5],"float64"), )
paddle.is_complex(Tensor([2, 0, 4, 5],"float64"), )
paddle.is_complex(Tensor([2, 3, 0, 5],"float64"), )
paddle.is_complex(Tensor([2, 3, 4, 0],"float64"), )
paddle.is_complex(Tensor([0, 3, 4],"float32"), )
paddle.is_complex(Tensor([2, 0, 4],"float32"), )
paddle.is_complex(Tensor([2, 3, 0],"float32"), )
paddle.is_complex(Tensor([0, 3, 4],"float64"), )
paddle.is_complex(Tensor([2, 0, 4],"float64"), )
paddle.is_complex(Tensor([2, 3, 0],"float64"), )
paddle.is_complex(Tensor([0, 3],"complex128"), )
paddle.is_complex(Tensor([2, 0],"complex128"), )
paddle.is_complex(Tensor([0, 3],"complex64"), )
paddle.is_complex(Tensor([2, 0],"complex64"), )
paddle.is_complex(Tensor([0, 3],"float32"), )
paddle.is_complex(Tensor([0, 3],"float64"), )
paddle.is_complex(Tensor([0, 4],"complex128"), )
paddle.is_complex(Tensor([0, 4],"complex64"), )
paddle.is_complex(Tensor([0, 6144],"float32"), )
paddle.is_complex(Tensor([0],"float64"), )
paddle.is_complex(Tensor([0, 20, 3],"float32"), )
paddle.is_complex(Tensor([3, 0, 3],"float32"), )
paddle.is_complex(Tensor([3, 20, 0],"float32"), )
paddle.is_complex(Tensor([3, 0],"float32"), )
paddle.is_complex(Tensor([3, 0],"float64"), )
paddle.is_complex(Tensor([0, 4, 5, 6, 8],"float32"), )
paddle.is_complex(Tensor([3, 0, 5, 6, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 0, 6, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 5, 0, 8],"float32"), )
paddle.is_complex(Tensor([3, 4, 5, 6, 0],"float32"), )
paddle.is_complex(Tensor([0, 4],"float32"), )
paddle.is_complex(Tensor([0, 4],"float64"), )
paddle.is_complex(Tensor([4, 0],"float32"), )
paddle.is_complex(Tensor([4, 0],"float64"), )
paddle.is_complex(Tensor([0, 6],"float32"), )
paddle.is_complex(Tensor([0, 5],"float32"), )
paddle.is_complex(Tensor([5, 0],"float32"), )
paddle.is_complex(Tensor([0, 5],"float64"), )
paddle.is_complex(Tensor([5, 0],"float64"), )
paddle.is_complex(Tensor([0, 6],"float64"), )
paddle.is_complex(Tensor([0, 50, 20],"float64"), )
paddle.is_complex(Tensor([50, 0, 20],"float64"), )
paddle.is_complex(Tensor([50, 50, 0],"float64"), )
paddle.is_complex(Tensor([6, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 3, 32, 26],"float32"), )
paddle.is_floating_point(Tensor([1, 0, 32, 26],"float32"), )
paddle.is_floating_point(Tensor([1, 3, 0, 26],"float32"), )
paddle.is_floating_point(Tensor([1, 3, 32, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 3, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([1, 0, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([1, 3, 0, 8],"float32"), )
paddle.is_floating_point(Tensor([1, 3, 8, 0],"float32"), )
paddle.is_floating_point(Tensor([0],"float16"), )
paddle.is_floating_point(Tensor([0],"float32"), )
paddle.is_floating_point(Tensor([0, 10],"float32"), )
paddle.is_floating_point(Tensor([10, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 100],"float32"), )
paddle.is_floating_point(Tensor([100, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 10],"float16"), )
paddle.is_floating_point(Tensor([1000, 0],"float16"), )
paddle.is_floating_point(Tensor([1000, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1000],"float16"), )
paddle.is_floating_point(Tensor([0, 1000],"float32"), )
paddle.is_floating_point(Tensor([1024, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1024],"float32"), )
paddle.is_floating_point(Tensor([0, 2],"float32"), )
paddle.is_floating_point(Tensor([0, 256, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 256, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 256, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 256, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 256, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 256, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 4096],"float32"), )
paddle.is_floating_point(Tensor([0, 512, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 512, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([1024, 512, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 512, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 512, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([1024, 512, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 84],"float32"), )
paddle.is_floating_point(Tensor([120, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 128, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([128, 0, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([128, 128, 0, 3],"float16"), )
paddle.is_floating_point(Tensor([128, 128, 3, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 128, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([128, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([128, 128, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([128, 128, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([128, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([128, 256, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([128, 256, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([128, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([128, 256, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([128, 256, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 256],"float16"), )
paddle.is_floating_point(Tensor([128, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 256],"float32"), )
paddle.is_floating_point(Tensor([128, 0],"float32"), )
paddle.is_floating_point(Tensor([128, 512, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([128, 512, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([128, 512, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([128, 512, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 6, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([16, 0, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([16, 6, 0, 5],"float32"), )
paddle.is_floating_point(Tensor([16, 6, 5, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 64, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([192, 0, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([192, 64, 0, 5],"float32"), )
paddle.is_floating_point(Tensor([192, 64, 5, 0],"float32"), )
paddle.is_floating_point(Tensor([2, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 3, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([2, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 3, 4, 4],"float32"), )
paddle.is_floating_point(Tensor([2, 0, 4, 4],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 0, 4],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 4, 0],"float32"), )
paddle.is_floating_point(Tensor([2, 0, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 0, 8],"float32"), )
paddle.is_floating_point(Tensor([2, 3, 8, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 4],"float16"), )
paddle.is_floating_point(Tensor([2, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 4],"float32"), )
paddle.is_floating_point(Tensor([0, 1, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([20, 0, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([20, 1, 0, 5],"float32"), )
paddle.is_floating_point(Tensor([20, 1, 5, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 102],"float16"), )
paddle.is_floating_point(Tensor([2048, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 102],"float32"), )
paddle.is_floating_point(Tensor([2048, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1024, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 1024, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 1024, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 1024, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([2048, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([2048, 1024, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([2048, 1024, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([2048, 512, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([2048, 512, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([2048, 512, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([2048, 512, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 0],"float32"), )
paddle.is_floating_point(Tensor([256, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 1024, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 1024, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([256, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 1024, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 1024, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 256, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([256, 0, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([256, 256, 0, 3],"float16"), )
paddle.is_floating_point(Tensor([256, 256, 3, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 256, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 256, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 256, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 384, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 384, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([256, 384, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([256, 512, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 512, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([256, 512, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 512, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 64, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 64, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([256, 64, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 64, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 64, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([256, 64, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 16, 64, 1024],"float32"), )
paddle.is_floating_point(Tensor([3, 0, 64, 1024],"float32"), )
paddle.is_floating_point(Tensor([3, 16, 0, 1024],"float32"), )
paddle.is_floating_point(Tensor([3, 16, 64, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 16, 64],"float32"), )
paddle.is_floating_point(Tensor([3, 0, 64],"float32"), )
paddle.is_floating_point(Tensor([3, 16, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 28, 28],"float32"), )
paddle.is_floating_point(Tensor([3, 0, 28],"float32"), )
paddle.is_floating_point(Tensor([3, 28, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 8, 8],"float32"), )
paddle.is_floating_point(Tensor([3, 0, 8],"float32"), )
paddle.is_floating_point(Tensor([3, 8, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 192, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([384, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([384, 192, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([384, 192, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 2, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([4, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([4, 2, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([4, 2, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 6],"float16"), )
paddle.is_floating_point(Tensor([4, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 6],"float32"), )
paddle.is_floating_point(Tensor([4, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 120],"float32"), )
paddle.is_floating_point(Tensor([400, 0],"float32"), )
paddle.is_floating_point(Tensor([4096, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 5],"float32"), )
paddle.is_floating_point(Tensor([5, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 20, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([50, 0, 5, 5],"float32"), )
paddle.is_floating_point(Tensor([50, 20, 0, 5],"float32"), )
paddle.is_floating_point(Tensor([50, 20, 5, 0],"float32"), )
paddle.is_floating_point(Tensor([512, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 1024, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 1024, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([512, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 1024, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 1024, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 128, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 128, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 128, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 128, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 128, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 128, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 2048, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 2048, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 2048, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 2048, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 2048, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 2048, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([512, 256, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([512, 256, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([512, 256, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([512, 256, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 512, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([512, 0, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([512, 512, 0, 3],"float16"), )
paddle.is_floating_point(Tensor([512, 512, 3, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 512, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([512, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([512, 512, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([512, 512, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([6, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([6, 1, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([6, 1, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 1, 11, 11],"float32"), )
paddle.is_floating_point(Tensor([64, 0, 11, 11],"float32"), )
paddle.is_floating_point(Tensor([64, 1, 0, 11],"float32"), )
paddle.is_floating_point(Tensor([64, 1, 11, 0],"float32"), )
paddle.is_floating_point(Tensor([64, 0, 1, 1],"float16"), )
paddle.is_floating_point(Tensor([64, 256, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([64, 256, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([64, 0, 1, 1],"float32"), )
paddle.is_floating_point(Tensor([64, 256, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([64, 256, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 3, 7, 7],"float16"), )
paddle.is_floating_point(Tensor([64, 0, 7, 7],"float16"), )
paddle.is_floating_point(Tensor([64, 3, 0, 7],"float16"), )
paddle.is_floating_point(Tensor([64, 3, 7, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 3, 7, 7],"float32"), )
paddle.is_floating_point(Tensor([64, 0, 7, 7],"float32"), )
paddle.is_floating_point(Tensor([64, 3, 0, 7],"float32"), )
paddle.is_floating_point(Tensor([64, 3, 7, 0],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 0, 1],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 1, 0],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 0, 1],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 1, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 64, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([64, 0, 3, 3],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 0, 3],"float16"), )
paddle.is_floating_point(Tensor([64, 64, 3, 0],"float16"), )
paddle.is_floating_point(Tensor([0, 64, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([64, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([64, 64, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 4, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([8, 0, 3, 3],"float32"), )
paddle.is_floating_point(Tensor([8, 4, 0, 3],"float32"), )
paddle.is_floating_point(Tensor([8, 4, 3, 0],"float32"), )
paddle.is_floating_point(Tensor([0, 8],"float32"), )
paddle.is_floating_point(Tensor([8, 0],"float32"), )
paddle.is_floating_point(Tensor([800, 0],"float32"), )
paddle.is_floating_point(Tensor([84, 0],"float32"), )
paddle.is_floating_point(Tensor([96, 0],"float32"), )
paddle.isclose(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isfinite(Tensor([0, 17, 10],"int32"), )
paddle.isfinite(Tensor([11, 0, 10],"int32"), )
paddle.isfinite(Tensor([11, 17, 0],"int32"), )
paddle.isfinite(Tensor([0, 17],"float32"), )
paddle.isfinite(Tensor([11, 0],"float32"), )
paddle.isfinite(Tensor([0],"int64"), )
paddle.isfinite(Tensor([0, 3, 4, 5],"float64"), )
paddle.isfinite(Tensor([2, 0, 4, 5],"float64"), )
paddle.isfinite(Tensor([2, 3, 0, 5],"float64"), )
paddle.isfinite(Tensor([2, 3, 4, 0],"float64"), )
paddle.isfinite(Tensor([0, 3],"float32"), )
paddle.isfinite(Tensor([2, 0],"float32"), )
paddle.isfinite(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isfinite(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"float16"), Tensor([4, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([0, 5, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 0, 5],"float16"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float16"), Tensor([4, 5, 0],"float16"), True, True, )
paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([0, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 0, 5],"float32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 0],"float32"), True, True, )
paddle.isin(Tensor([0, 2, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"float64"), Tensor([4, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"float64"), Tensor([4, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([0, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 0, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 5, 0],"float64"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"float64"), Tensor([4, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"float64"), Tensor([4, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([0, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 0, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 5, 0],"float64"), True, True, )
paddle.isin(Tensor([0, 2, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"int32"), Tensor([4, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"int32"), Tensor([4, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([0, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 0, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 5, 0],"int32"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"int32"), Tensor([4, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"int32"), Tensor([4, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([0, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 0, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 5, 0],"int32"), True, True, )
paddle.isin(Tensor([0, 2, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 0, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 0, 10],"int64"), Tensor([4, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 0],"int64"), Tensor([4, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([0, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 0, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 5, 0],"int64"), True, False, )
paddle.isin(Tensor([0, 2, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 0, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 0, 10],"int64"), Tensor([4, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 0],"int64"), Tensor([4, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([0, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 0, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 5, 0],"int64"), True, True, )
paddle.isin(Tensor([0, 5, 10],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 0, 10],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 0],"bfloat16"), Tensor([100],"bfloat16"), True, False, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([0],"bfloat16"), True, False, )
paddle.isin(Tensor([0, 5, 10],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([2, 0, 10],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([2, 5, 0],"bfloat16"), Tensor([100],"bfloat16"), True, True, )
paddle.isin(Tensor([2, 5, 10],"bfloat16"), Tensor([0],"bfloat16"), True, True, )
paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, False, )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, False, )
paddle.isin(Tensor([0, 5, 100],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([2, 0, 100],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([2, 5, 0],"float16"), Tensor([500],"float16"), True, True, )
paddle.isin(Tensor([2, 5, 100],"float16"), Tensor([0],"float16"), True, True, )
paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, False, )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, False, )
paddle.isin(Tensor([0, 5, 100],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([2, 0, 100],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([2, 5, 0],"float32"), Tensor([500],"float32"), True, True, )
paddle.isin(Tensor([2, 5, 100],"float32"), Tensor([0],"float32"), True, True, )
paddle.isin(Tensor([0, 5, 100],"float64"), Tensor([500],"float64"), True, False, )
paddle.isin(Tensor([2, 0, 100],"float64"), Tensor([500],"float64"), True, False, )
paddle.isin(Tensor([2, 5, 0],"float64"), Tensor([500],"float64"), True, False, )
paddle.isin(Tensor([2, 5, 100],"float64"), Tensor([0],"float64"), True, False, )
paddle.isin(Tensor([0, 5, 100],"float64"), Tensor([500],"float64"), True, True, )
paddle.isin(Tensor([2, 0, 100],"float64"), Tensor([500],"float64"), True, True, )
paddle.isin(Tensor([2, 5, 0],"float64"), Tensor([500],"float64"), True, True, )
paddle.isin(Tensor([2, 5, 100],"float64"), Tensor([0],"float64"), True, True, )
paddle.isin(Tensor([0, 5, 100],"int32"), Tensor([500],"int32"), True, False, )
paddle.isin(Tensor([2, 0, 100],"int32"), Tensor([500],"int32"), True, False, )
paddle.isin(Tensor([2, 5, 0],"int32"), Tensor([500],"int32"), True, False, )
paddle.isin(Tensor([2, 5, 100],"int32"), Tensor([0],"int32"), True, False, )
paddle.isin(Tensor([0, 5, 100],"int32"), Tensor([500],"int32"), True, True, )
paddle.isin(Tensor([2, 0, 100],"int32"), Tensor([500],"int32"), True, True, )
paddle.isin(Tensor([2, 5, 0],"int32"), Tensor([500],"int32"), True, True, )
paddle.isin(Tensor([2, 5, 100],"int32"), Tensor([0],"int32"), True, True, )
paddle.isin(Tensor([0, 5, 100],"int64"), Tensor([500],"int64"), True, False, )
paddle.isin(Tensor([2, 0, 100],"int64"), Tensor([500],"int64"), True, False, )
paddle.isin(Tensor([2, 5, 0],"int64"), Tensor([500],"int64"), True, False, )
paddle.isin(Tensor([2, 5, 100],"int64"), Tensor([0],"int64"), True, False, )
paddle.isin(Tensor([0, 5, 100],"int64"), Tensor([500],"int64"), True, True, )
paddle.isin(Tensor([2, 0, 100],"int64"), Tensor([500],"int64"), True, True, )
paddle.isin(Tensor([2, 5, 0],"int64"), Tensor([500],"int64"), True, True, )
paddle.isin(Tensor([2, 5, 100],"int64"), Tensor([0],"int64"), True, True, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 8],"bfloat16"), Tensor([0, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([4, 0],"bfloat16"), Tensor([2, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float16"), Tensor([0, 3],"float16"), False, True, )
paddle.isin(Tensor([4, 0],"float16"), Tensor([2, 0],"float16"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.isin(Tensor([0, 8],"float32"), Tensor([0, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 0],"float32"), Tensor([2, 0],"float32"), False, True, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([0, 3],"float64"), False, False, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([2, 0],"float64"), False, False, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([0, 3],"float64"), False, False, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 0],"float64"), False, False, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([2, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([0, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([2, 0],"float64"), False, True, )
paddle.isin(Tensor([0, 8],"float64"), Tensor([0, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 0],"float64"), Tensor([2, 0],"float64"), False, True, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([2, 3],"int32"), False, False, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 3],"int32"), False, False, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([0, 3],"int32"), False, False, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([2, 0],"int32"), False, False, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([0, 3],"int32"), False, False, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 0],"int32"), False, False, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([2, 3],"int32"), False, True, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 3],"int32"), False, True, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([0, 3],"int32"), False, True, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([2, 0],"int32"), False, True, )
paddle.isin(Tensor([0, 8],"int32"), Tensor([0, 3],"int32"), False, True, )
paddle.isin(Tensor([4, 0],"int32"), Tensor([2, 0],"int32"), False, True, )
paddle.isin(Tensor([0, 8],"int64"), Tensor([2, 3],"int64"), False, False, )
paddle.isin(Tensor([4, 0],"int64"), Tensor([2, 3],"int64"), False, False, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([0, 3],"int64"), False, False, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([2, 0],"int64"), False, False, )
paddle.isin(Tensor([0, 8],"int64"), Tensor([0, 3],"int64"), False, False, )
paddle.isin(Tensor([4, 0],"int64"), Tensor([2, 0],"int64"), False, False, )
paddle.isin(Tensor([0, 8],"int64"), Tensor([2, 3],"int64"), False, True, )
paddle.isin(Tensor([4, 0],"int64"), Tensor([2, 3],"int64"), False, True, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([0, 3],"int64"), False, True, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([2, 0],"int64"), False, True, )
paddle.isin(Tensor([0, 8],"int64"), Tensor([0, 3],"int64"), False, True, )
paddle.isin(Tensor([4, 0],"int64"), Tensor([2, 0],"int64"), False, True, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([4, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([4, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, False, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 0],"bfloat16"), False, False, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([4, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 64],"bfloat16"), Tensor([4, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 64],"bfloat16"), Tensor([0, 256],"bfloat16"), False, True, )
paddle.isin(Tensor([8, 0],"bfloat16"), Tensor([4, 0],"bfloat16"), False, True, )
paddle.isin(Tensor([0, 64],"float16"), Tensor([4, 256],"float16"), False, False, )
paddle.isin(Tensor([8, 0],"float16"), Tensor([4, 256],"float16"), False, False, )
paddle.isin(Tensor([8, 64],"float16"), Tensor([0, 256],"float16"), False, False, )
paddle.isin(Tensor([8, 64],"float16"), Tensor([4, 0],"float16"), False, False, )
paddle.isin(Tensor([0, 64],"float16"), Tensor([0, 256],"float16"), False, False, )
paddle.isin(Tensor([8, 0],"float16"), Tensor([4, 0],"float16"), False, False, )
paddle.isin(Tensor([0, 64],"float16"), Tensor([4, 256],"float16"), False, True, )
paddle.isin(Tensor([8, 0],"float16"), Tensor([4, 256],"float16"), False, True, )
paddle.isin(Tensor([8, 64],"float16"), Tensor([0, 256],"float16"), False, True, )
paddle.isin(Tensor([8, 64],"float16"), Tensor([4, 0],"float16"), False, True, )
paddle.isin(Tensor([0, 64],"float16"), Tensor([0, 256],"float16"), False, True, )
paddle.isin(Tensor([8, 0],"float16"), Tensor([4, 0],"float16"), False, True, )
paddle.isin(Tensor([0, 64],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 0],"float32"), Tensor([4, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([0, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 0],"float32"), False, False, )
paddle.isin(Tensor([0, 64],"float32"), Tensor([0, 256],"float32"), False, False, )
paddle.isin(Tensor([8, 0],"float32"), Tensor([4, 0],"float32"), False, False, )
paddle.isin(Tensor([0, 64],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 0],"float32"), Tensor([4, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([0, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 64],"float32"), Tensor([4, 0],"float32"), False, True, )
paddle.isin(Tensor([0, 64],"float32"), Tensor([0, 256],"float32"), False, True, )
paddle.isin(Tensor([8, 0],"float32"), Tensor([4, 0],"float32"), False, True, )
paddle.isin(Tensor([0, 64],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 0],"float64"), Tensor([4, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([0, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 0],"float64"), False, False, )
paddle.isin(Tensor([0, 64],"float64"), Tensor([0, 256],"float64"), False, False, )
paddle.isin(Tensor([8, 0],"float64"), Tensor([4, 0],"float64"), False, False, )
paddle.isin(Tensor([0, 64],"float64"), Tensor([4, 256],"float64"), False, True, )
paddle.isin(Tensor([8, 0],"float64"), Tensor([4, 256],"float64"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([0, 256],"float64"), False, True, )
paddle.isin(Tensor([8, 64],"float64"), Tensor([4, 0],"float64"), False, True, )
paddle.isin(Tensor([0, 64],"float64"), Tensor([0, 256],"float64"), False, True, )
paddle.isin(Tensor([8, 0],"float64"), Tensor([4, 0],"float64"), False, True, )
paddle.isin(Tensor([0, 64],"int32"), Tensor([4, 256],"int32"), False, False, )
paddle.isin(Tensor([8, 0],"int32"), Tensor([4, 256],"int32"), False, False, )
paddle.isin(Tensor([8, 64],"int32"), Tensor([0, 256],"int32"), False, False, )
paddle.isin(Tensor([8, 64],"int32"), Tensor([4, 0],"int32"), False, False, )
paddle.isin(Tensor([0, 64],"int32"), Tensor([0, 256],"int32"), False, False, )
paddle.isin(Tensor([8, 0],"int32"), Tensor([4, 0],"int32"), False, False, )
paddle.isin(Tensor([0, 64],"int32"), Tensor([4, 256],"int32"), False, True, )
paddle.isin(Tensor([8, 0],"int32"), Tensor([4, 256],"int32"), False, True, )
paddle.isin(Tensor([8, 64],"int32"), Tensor([0, 256],"int32"), False, True, )
paddle.isin(Tensor([8, 64],"int32"), Tensor([4, 0],"int32"), False, True, )
paddle.isin(Tensor([0, 64],"int32"), Tensor([0, 256],"int32"), False, True, )
paddle.isin(Tensor([8, 0],"int32"), Tensor([4, 0],"int32"), False, True, )
paddle.isin(Tensor([0, 64],"int64"), Tensor([4, 256],"int64"), False, False, )
paddle.isin(Tensor([8, 0],"int64"), Tensor([4, 256],"int64"), False, False, )
paddle.isin(Tensor([8, 64],"int64"), Tensor([0, 256],"int64"), False, False, )
paddle.isin(Tensor([8, 64],"int64"), Tensor([4, 0],"int64"), False, False, )
paddle.isin(Tensor([0, 64],"int64"), Tensor([0, 256],"int64"), False, False, )
paddle.isin(Tensor([8, 0],"int64"), Tensor([4, 0],"int64"), False, False, )
paddle.isin(Tensor([0, 64],"int64"), Tensor([4, 256],"int64"), False, True, )
paddle.isin(Tensor([8, 0],"int64"), Tensor([4, 256],"int64"), False, True, )
paddle.isin(Tensor([8, 64],"int64"), Tensor([0, 256],"int64"), False, True, )
paddle.isin(Tensor([8, 64],"int64"), Tensor([4, 0],"int64"), False, True, )
paddle.isin(Tensor([0, 64],"int64"), Tensor([0, 256],"int64"), False, True, )
paddle.isin(Tensor([8, 0],"int64"), Tensor([4, 0],"int64"), False, True, )
paddle.isinf(Tensor([0, 12],"float32"), )
paddle.isinf(Tensor([10, 0],"float32"), )
paddle.isinf(Tensor([0, 12],"float64"), )
paddle.isinf(Tensor([10, 0],"float64"), )
paddle.isinf(Tensor([0, 17, 10],"int16"), )
paddle.isinf(Tensor([11, 0, 10],"int16"), )
paddle.isinf(Tensor([11, 17, 0],"int16"), )
paddle.isinf(Tensor([0, 17, 10],"int32"), )
paddle.isinf(Tensor([11, 0, 10],"int32"), )
paddle.isinf(Tensor([11, 17, 0],"int32"), )
paddle.isinf(Tensor([0, 17],"float32"), )
paddle.isinf(Tensor([11, 0],"float32"), )
paddle.isinf(Tensor([0],"int64"), )
paddle.isinf(Tensor([0],"uint8"), )
paddle.isinf(Tensor([0, 2],"float64"), )
paddle.isinf(Tensor([2, 0],"float64"), )
paddle.isinf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isinf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isinf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isinf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isinf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isinf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isinf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isinf(Tensor([0],"float32"), )
paddle.isinf(Tensor([0],"float64"), )
paddle.isinf(Tensor([0, 5, 2],"float32"), )
paddle.isinf(Tensor([4, 0, 2],"float32"), )
paddle.isinf(Tensor([4, 5, 0],"float32"), )
paddle.isinf(Tensor([0, 5, 2],"float64"), )
paddle.isinf(Tensor([4, 0, 2],"float64"), )
paddle.isinf(Tensor([4, 5, 0],"float64"), )
paddle.isinf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isinf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isnan(Tensor([0],"float32"), )
paddle.isnan(Tensor([0, 17, 10],"int32"), )
paddle.isnan(Tensor([11, 0, 10],"int32"), )
paddle.isnan(Tensor([11, 17, 0],"int32"), )
paddle.isnan(Tensor([0, 17],"float32"), )
paddle.isnan(Tensor([11, 0],"float32"), )
paddle.isnan(Tensor([0, 1],"float64"), )
paddle.isnan(Tensor([114, 0],"float64"), )
paddle.isnan(Tensor([0],"float64"), )
paddle.isnan(Tensor([0],"float16"), )
paddle.isnan(Tensor([0],"int64"), )
paddle.isnan(Tensor([0, 5, 3],"float32"), )
paddle.isnan(Tensor([148, 0, 3],"float32"), )
paddle.isnan(Tensor([148, 5, 0],"float32"), )
paddle.isnan(Tensor([0, 64],"float32"), )
paddle.isnan(Tensor([16, 0],"float32"), )
paddle.isnan(Tensor([0, 64],"float64"), )
paddle.isnan(Tensor([16, 0],"float64"), )
paddle.isnan(Tensor([0, 2],"float32"), )
paddle.isnan(Tensor([1948, 0],"float32"), )
paddle.isnan(Tensor([0, 100],"float32"), )
paddle.isnan(Tensor([2, 0],"float32"), )
paddle.isnan(Tensor([0, 3, 4, 5],"float32"), )
paddle.isnan(Tensor([2, 0, 4, 5],"float32"), )
paddle.isnan(Tensor([2, 3, 0, 5],"float32"), )
paddle.isnan(Tensor([2, 3, 4, 0],"float32"), )
paddle.isnan(Tensor([0, 3, 4, 5],"float64"), )
paddle.isnan(Tensor([2, 0, 4, 5],"float64"), )
paddle.isnan(Tensor([2, 3, 0, 5],"float64"), )
paddle.isnan(Tensor([2, 3, 4, 0],"float64"), )
paddle.isnan(Tensor([0, 3],"float32"), )
paddle.isnan(Tensor([0, 4, 2],"float32"), )
paddle.isnan(Tensor([2, 0, 2],"float32"), )
paddle.isnan(Tensor([2, 4, 0],"float32"), )
paddle.isnan(Tensor([0, 4, 2],"float64"), )
paddle.isnan(Tensor([2, 0, 2],"float64"), )
paddle.isnan(Tensor([2, 4, 0],"float64"), )
paddle.isnan(Tensor([0, 4],"float32"), )
paddle.isnan(Tensor([0],"int32"), )
paddle.isnan(Tensor([0, 10],"float32"), )
paddle.isnan(Tensor([3, 0],"float32"), )
paddle.isnan(Tensor([3, 0, 2],"float32"), )
paddle.isnan(Tensor([3, 4, 0],"float32"), )
paddle.isnan(Tensor([3, 0, 2],"float64"), )
paddle.isnan(Tensor([3, 4, 0],"float64"), )
paddle.isnan(Tensor([0, 4, 2],"int32"), )
paddle.isnan(Tensor([3, 0, 2],"int32"), )
paddle.isnan(Tensor([3, 4, 0],"int32"), )
paddle.isnan(Tensor([0, 4, 2],"int64"), )
paddle.isnan(Tensor([3, 0, 2],"int64"), )
paddle.isnan(Tensor([3, 4, 0],"int64"), )
paddle.isnan(Tensor([0, 4],"float16"), )
paddle.isnan(Tensor([3, 0],"float16"), )
paddle.isnan(Tensor([0, 4],"float64"), )
paddle.isnan(Tensor([3, 0],"float64"), )
paddle.isnan(Tensor([0, 5],"float32"), )
paddle.isnan(Tensor([400, 0],"float64"), )
paddle.isnan(Tensor([5, 0],"float32"), )
paddle.isnan(Tensor([5, 0],"float64"), )
paddle.isnan(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isnan(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isneginf(Tensor([0, 17, 10],"int16"), )
paddle.isneginf(Tensor([11, 0, 10],"int16"), )
paddle.isneginf(Tensor([11, 17, 0],"int16"), )
paddle.isneginf(Tensor([0, 17, 10],"int32"), )
paddle.isneginf(Tensor([11, 0, 10],"int32"), )
paddle.isneginf(Tensor([11, 17, 0],"int32"), )
paddle.isneginf(Tensor([0, 17],"float32"), )
paddle.isneginf(Tensor([11, 0],"float32"), )
paddle.isneginf(Tensor([0],"int64"), )
paddle.isneginf(Tensor([0],"uint8"), )
paddle.isneginf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isneginf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isneginf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isneginf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isneginf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isneginf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isneginf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isneginf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isneginf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isneginf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isneginf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isposinf(Tensor([0, 17, 10],"int16"), )
paddle.isposinf(Tensor([11, 0, 10],"int16"), )
paddle.isposinf(Tensor([11, 17, 0],"int16"), )
paddle.isposinf(Tensor([0, 17, 10],"int32"), )
paddle.isposinf(Tensor([11, 0, 10],"int32"), )
paddle.isposinf(Tensor([11, 17, 0],"int32"), )
paddle.isposinf(Tensor([0, 17],"float32"), )
paddle.isposinf(Tensor([11, 0],"float32"), )
paddle.isposinf(Tensor([0],"int64"), )
paddle.isposinf(Tensor([0],"uint8"), )
paddle.isposinf(Tensor([0, 3, 4, 5],"float64"), )
paddle.isposinf(Tensor([2, 0, 4, 5],"float64"), )
paddle.isposinf(Tensor([2, 3, 0, 5],"float64"), )
paddle.isposinf(Tensor([2, 3, 4, 0],"float64"), )
paddle.isposinf(Tensor([0, 3, 4, 5],"int8"), )
paddle.isposinf(Tensor([2, 0, 4, 5],"int8"), )
paddle.isposinf(Tensor([2, 3, 0, 5],"int8"), )
paddle.isposinf(Tensor([2, 3, 4, 0],"int8"), )
paddle.isposinf(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.isposinf(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.isposinf(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.isreal(Tensor([0, 3],"bfloat16"), )
paddle.isreal(Tensor([2, 0],"bfloat16"), )
paddle.isreal(Tensor([0, 3],"bool"), )
paddle.isreal(Tensor([2, 0],"bool"), )
paddle.isreal(Tensor([0, 3],"complex128"), )
paddle.isreal(Tensor([2, 0],"complex128"), )
paddle.isreal(Tensor([0, 3],"complex64"), )
paddle.isreal(Tensor([2, 0],"complex64"), )
paddle.isreal(Tensor([0, 3],"float16"), )
paddle.isreal(Tensor([2, 0],"float16"), )
paddle.isreal(Tensor([0, 3],"float32"), )
paddle.isreal(Tensor([2, 0],"float32"), )
paddle.isreal(Tensor([0, 3],"float64"), )
paddle.isreal(Tensor([2, 0],"float64"), )
paddle.isreal(Tensor([0, 3],"int16"), )
paddle.isreal(Tensor([2, 0],"int16"), )
paddle.isreal(Tensor([0, 3],"int32"), )
paddle.isreal(Tensor([2, 0],"int32"), )
paddle.isreal(Tensor([0, 3],"int64"), )
paddle.isreal(Tensor([2, 0],"int64"), )
paddle.isreal(Tensor([0, 32],"bfloat16"), )
paddle.isreal(Tensor([64, 0],"bfloat16"), )
paddle.isreal(Tensor([0, 32],"bool"), )
paddle.isreal(Tensor([64, 0],"bool"), )
paddle.isreal(Tensor([0, 32],"float16"), )
paddle.isreal(Tensor([64, 0],"float16"), )
paddle.isreal(Tensor([0, 32],"float32"), )
paddle.isreal(Tensor([64, 0],"float32"), )
paddle.isreal(Tensor([0, 32],"float64"), )
paddle.isreal(Tensor([64, 0],"float64"), )
paddle.isreal(Tensor([0, 32],"int16"), )
paddle.isreal(Tensor([64, 0],"int16"), )
paddle.isreal(Tensor([0, 32],"int32"), )
paddle.isreal(Tensor([64, 0],"int32"), )
paddle.isreal(Tensor([0, 32],"int64"), )
paddle.isreal(Tensor([64, 0],"int64"), )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0, 3, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 0, 2],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 0],"float32"), )
paddle.kron(Tensor([0, 10],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([10, 0],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 0, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 0],"float32"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.kron(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 0],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([0, 2],"complex128"), Tensor([0, 3],"float64"), )
paddle.kron(Tensor([2, 0],"complex128"), Tensor([3, 0],"float64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 2, 0],"float32"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 0],"float32"), )
paddle.kron(Tensor([0, 2],"complex64"), Tensor([0, 3],"float32"), )
paddle.kron(Tensor([2, 0],"complex64"), Tensor([3, 0],"float32"), )
paddle.kron(Tensor([0, 2],"float32"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 0],"float32"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"float32"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"float32"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([0, 2],"float32"), Tensor([0, 3],"complex64"), )
paddle.kron(Tensor([2, 0],"float32"), Tensor([3, 0],"complex64"), )
paddle.kron(Tensor([0, 2],"float64"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 0],"float64"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"float64"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"float64"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([0, 2],"float64"), Tensor([0, 3],"complex128"), )
paddle.kron(Tensor([2, 0],"float64"), Tensor([3, 0],"complex128"), )
paddle.kron(Tensor([0, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 0, 4, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 0, 3, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 0, 5, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 0, 6],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 0],"float32"), Tensor([3, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([0, 5, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 0, 4],"float32"), )
paddle.kron(Tensor([5, 5, 4, 3, 5, 6],"float32"), Tensor([3, 5, 0],"float32"), )
paddle.lcm(Tensor([0],"int64"), Tensor([1],"int64"), )
paddle.lcm(Tensor([1],"int64"), Tensor([0],"int64"), )
paddle.lcm(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.lcm(Tensor([0, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([10, 0],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([10, 0],"int32"), )
paddle.lcm(Tensor([0, 20],"int32"), Tensor([0, 20],"int32"), )
paddle.lcm(Tensor([10, 0],"int32"), Tensor([10, 0],"int32"), )
paddle.lcm(Tensor([0],"int32"), Tensor([1],"int32"), )
paddle.lcm(Tensor([6],"int32"), Tensor([0],"int32"), )
paddle.lcm(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 28, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 28],"float32"), 0.36, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 28, 0],"float32"), 0.36, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1],"float32"), Tensor([0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 0, 1],"float32"), Tensor([3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 1, 0],"float32"), Tensor([3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.0, )
paddle.lerp(Tensor([1, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.0, )
paddle.lerp(Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 0, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 0, 4],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 4],"float64"), Tensor([1, 3, 4],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([0, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), Tensor([0, 3, 4],"float64"), )
paddle.lerp(Tensor([1, 0, 4],"float64"), Tensor([1, 0, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.lerp(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), Tensor([1, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([1, 3],"float64"), Tensor([1, 3],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), )
paddle.lerp(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.lerp(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([0],"float64"), Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.lerp(Tensor([0, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 0, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 0, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 0, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 0],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([0, 5, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 0, 1, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 0, 5, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 0, 5],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 1, 10, 5, 5],"float32"), Tensor([10, 5, 1, 5, 5],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 0, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 0, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 0],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([0, 10, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 0, 5, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 0, 5],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 0],"float32"), Tensor([5],"float32"), )
paddle.lerp(Tensor([10, 10, 5, 5],"float32"), Tensor([10, 10, 5, 5],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 0, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 0, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 0, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 0],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([0, 5, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 0, 10, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 0, 5, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 0, 1],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([10, 5, 10, 1, 5],"float32"), Tensor([10, 5, 10, 5, 1],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 1, 1],"float32"), Tensor([0, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 0, 1, 1],"float32"), Tensor([2, 0, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 0, 1],"float32"), Tensor([2, 3, 0, 8],"float32"), 0.3, )
paddle.lerp(Tensor([2, 1, 1, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 0.3, )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 1, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 1.1, )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.lerp(Tensor([0, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 0, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 0],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([0, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 0, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 0, 5],"float32"), 0.5, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 0],"float32"), 0.5, )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([0, 3, 8, 8],"float32"), Tensor([0, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 0, 8],"float32"), Tensor([2, 3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 3, 8, 0],"float32"), Tensor([2, 3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([0, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 0],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([0, 2, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 0, 5],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 0],"float32"), Tensor([2, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([0, 2, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 0, 2, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 0, 5],"float32"), )
paddle.lerp(Tensor([2, 5],"float32"), Tensor([2, 2, 5],"float32"), Tensor([2, 2, 2, 0],"float32"), )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 28],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([0, 28, 28],"float32"), Tensor([0, 28, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 0, 28],"float32"), Tensor([3, 0, 28],"float32"), 1.2, )
paddle.lerp(Tensor([3, 28, 0],"float32"), Tensor([3, 28, 0],"float32"), 1.2, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 0],"float32"), Tensor([3, 8, 0],"float32"), 2.1, )
paddle.lerp(Tensor([0, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 0],"float32"), Tensor([300, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([0, 2048],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 0],"float32"), Tensor([1],"float32"), )
paddle.lerp(Tensor([300, 2048],"float32"), Tensor([300, 2048],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 0],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 0, 6],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 0],"float64"), Tensor([4, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 0, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 6],"float64"), Tensor([4, 1, 6],"float64"), Tensor([4, 1, 0],"float64"), )
paddle.lerp(Tensor([0, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), Tensor([0, 1, 6],"float64"), )
paddle.lerp(Tensor([4, 0, 6],"float64"), Tensor([4, 0, 6],"float64"), Tensor([4, 0, 6],"float64"), )
paddle.lerp(Tensor([4, 1, 0],"float64"), Tensor([4, 1, 0],"float64"), Tensor([4, 1, 0],"float64"), )
paddle.lerp(Tensor([0, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 0],"float32"), Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([0, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 0],"float32"), Tensor([4, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.lerp(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4, 0],"float32"), )
paddle.lerp(Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.lerp(Tensor([0, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 0],"float64"), Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([0, 1],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 0],"float64"), Tensor([4, 1],"float64"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.lerp(Tensor([4, 1],"float64"), Tensor([4, 1],"float64"), Tensor([4, 0],"float64"), )
paddle.lerp(Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.lerp(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.lerp(Tensor([0, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 0, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 0, 1],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 0],"float64"), Tensor([4, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 0, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 1],"float64"), Tensor([4, 7, 1],"float64"), Tensor([4, 7, 0],"float64"), )
paddle.lerp(Tensor([0, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), Tensor([0, 7, 1],"float64"), )
paddle.lerp(Tensor([4, 0, 1],"float64"), Tensor([4, 0, 1],"float64"), Tensor([4, 0, 1],"float64"), )
paddle.lerp(Tensor([4, 7, 0],"float64"), Tensor([4, 7, 0],"float64"), Tensor([4, 7, 0],"float64"), )
paddle.lerp(Tensor([0],"float32"), Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.lerp(Tensor([4],"float32"), Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.lerp(Tensor([4],"float32"), Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.lerp(Tensor([0, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 0, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 0],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([0, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 0, 4],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 0],"float64"), Tensor([5, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 0, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 4],"float64"), Tensor([5, 1, 4],"float64"), Tensor([5, 1, 0],"float64"), )
paddle.lerp(Tensor([0, 1, 4],"float64"), Tensor([0, 1, 4],"float64"), Tensor([0, 1, 4],"float64"), )
paddle.lerp(Tensor([5, 0, 4],"float64"), Tensor([5, 0, 4],"float64"), Tensor([5, 0, 4],"float64"), )
paddle.lerp(Tensor([5, 1, 0],"float64"), Tensor([5, 1, 0],"float64"), Tensor([5, 1, 0],"float64"), )
paddle.lerp(Tensor([0, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([0, 1],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.lerp(Tensor([5, 1],"float64"), Tensor([5, 1],"float64"), Tensor([5, 0],"float64"), )
paddle.lerp(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.lerp(Tensor([0, 1],"float64"), Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([7, 0],"float64"), Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([0, 1],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 0],"float64"), Tensor([7, 1],"float64"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), Tensor([0, 1],"float64"), )
paddle.lerp(Tensor([7, 1],"float64"), Tensor([7, 1],"float64"), Tensor([7, 0],"float64"), )
paddle.lerp(Tensor([7, 0],"float64"), Tensor([7, 0],"float64"), Tensor([7, 0],"float64"), )
paddle.lgamma(Tensor([0, 1],"float32"), )
paddle.lgamma(Tensor([1, 0],"float32"), )
paddle.lgamma(Tensor([0, 2, 2],"float32"), )
paddle.lgamma(Tensor([1, 0, 2],"float32"), )
paddle.lgamma(Tensor([1, 2, 0],"float32"), )
paddle.lgamma(Tensor([0, 2],"float32"), )
paddle.lgamma(Tensor([0, 4],"float32"), )
paddle.lgamma(Tensor([0],"float32"), )
paddle.lgamma(Tensor([10, 0],"float32"), )
paddle.lgamma(Tensor([0, 1],"float64"), )
paddle.lgamma(Tensor([10, 0],"float64"), )
paddle.lgamma(Tensor([0, 10, 10, 2],"float64"), )
paddle.lgamma(Tensor([10, 0, 10, 2],"float64"), )
paddle.lgamma(Tensor([10, 10, 0, 2],"float64"), )
paddle.lgamma(Tensor([10, 10, 10, 0],"float64"), )
paddle.lgamma(Tensor([0, 10, 10],"float64"), )
paddle.lgamma(Tensor([10, 0, 10],"float64"), )
paddle.lgamma(Tensor([10, 10, 0],"float64"), )
paddle.lgamma(Tensor([0, 12],"float32"), )
paddle.lgamma(Tensor([0, 20, 1],"float32"), )
paddle.lgamma(Tensor([10, 0, 1],"float32"), )
paddle.lgamma(Tensor([10, 20, 0],"float32"), )
paddle.lgamma(Tensor([0, 20, 2],"float32"), )
paddle.lgamma(Tensor([10, 0, 2],"float32"), )
paddle.lgamma(Tensor([0, 20, 2],"float64"), )
paddle.lgamma(Tensor([10, 0, 2],"float64"), )
paddle.lgamma(Tensor([10, 20, 0],"float64"), )
paddle.lgamma(Tensor([0, 100],"float64"), )
paddle.lgamma(Tensor([100, 0],"float64"), )
paddle.lgamma(Tensor([114, 0],"float64"), )
paddle.lgamma(Tensor([0],"float64"), )
paddle.lgamma(Tensor([0, 1, 1],"float32"), )
paddle.lgamma(Tensor([148, 0, 1],"float32"), )
paddle.lgamma(Tensor([148, 1, 0],"float32"), )
paddle.lgamma(Tensor([1948, 0],"float32"), )
paddle.lgamma(Tensor([2, 0],"float32"), )
paddle.lgamma(Tensor([2, 0],"float64"), )
paddle.lgamma(Tensor([0, 2],"float64"), )
paddle.lgamma(Tensor([0, 3],"float32"), )
paddle.lgamma(Tensor([0, 3],"float64"), )
paddle.lgamma(Tensor([0, 5, 2],"float64"), )
paddle.lgamma(Tensor([2, 0, 2],"float64"), )
paddle.lgamma(Tensor([2, 5, 0],"float64"), )
paddle.lgamma(Tensor([0, 5],"float64"), )
paddle.lgamma(Tensor([4, 0],"float32"), )
paddle.lgamma(Tensor([400, 0],"float64"), )
paddle.lgamma(Tensor([7, 0],"float32"), )
paddle.lgamma(Tensor([0, 1, 1],"float64"), )
paddle.lgamma(Tensor([9, 0, 1],"float64"), )
paddle.lgamma(Tensor([9, 1, 0],"float64"), )
paddle.linalg.cholesky(Tensor([0, 2],"float32"), )
paddle.linalg.cholesky(Tensor([2, 0],"float32"), )
paddle.linalg.cholesky(Tensor([0, 2],"float64"), )
paddle.linalg.cholesky(Tensor([2, 0],"float64"), )
paddle.linalg.cholesky(Tensor([0, 3],"float64"), )
paddle.linalg.cholesky(Tensor([3, 0],"float64"), )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 2],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 30, 2],"float64"), Tensor([0, 30, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 0, 2],"float64"), Tensor([2, 0, 30],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([1, 30, 0],"float64"), Tensor([2, 30, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 2],"float64"), Tensor([20, 0],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([0, 2],"float64"), Tensor([0, 20],"float64"), upper=True, )
paddle.linalg.cholesky_solve(Tensor([20, 0],"float64"), Tensor([20, 0],"float64"), upper=True, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -1, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 4, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 0, 3, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 0, 3],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 3, 0],"float32"), None, )
paddle.linalg.cond(Tensor([0, 4, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 0, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 3],"float32"), )
paddle.linalg.cond(Tensor([3, 0],"float32"), )
paddle.linalg.cond(Tensor([0, 3],"float32"), p="fro", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 3],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([3, 0],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=-1, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=-1, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=2, )
paddle.linalg.cond(Tensor([0, 3],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([3, 0],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([0, 5, 4, 1],"float32"), 2, )
paddle.linalg.cond(Tensor([3, 0, 4, 1],"float32"), 2, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), 2, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5, 4, 1],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 0, 4, 1],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5, 4, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 0, 4, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 5, 0, 1],"float32"), None, )
paddle.linalg.cond(Tensor([3, 5, 4, 0],"float32"), None, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), "fro", )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), "fro", )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), "fro", )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), "nuc", )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), "nuc", )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), "nuc", )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 1, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -1, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -2, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), math.inf, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), math.inf, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([0, 6, 6],"float64"), None, )
paddle.linalg.cond(Tensor([3, 0, 6],"float64"), None, )
paddle.linalg.cond(Tensor([3, 6, 0],"float64"), None, )
paddle.linalg.cond(Tensor([0, 2, 10],"float32"), 2, )
paddle.linalg.cond(Tensor([4, 0, 10],"float32"), 2, )
paddle.linalg.cond(Tensor([4, 2, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 2, 10],"float32"), -2, )
paddle.linalg.cond(Tensor([4, 0, 10],"float32"), -2, )
paddle.linalg.cond(Tensor([4, 2, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 2, 10],"float32"), None, )
paddle.linalg.cond(Tensor([4, 0, 10],"float32"), None, )
paddle.linalg.cond(Tensor([4, 2, 0],"float32"), None, )
paddle.linalg.cond(Tensor([0, 5],"float32"), "fro", )
paddle.linalg.cond(Tensor([5, 0],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 5],"float32"), "nuc", )
paddle.linalg.cond(Tensor([5, 0],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 5],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([5, 0],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 5],"float32"), None, )
paddle.linalg.cond(Tensor([5, 0],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([9, 0],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7],"float64"), None, )
paddle.linalg.cond(Tensor([9, 0],"float64"), None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([0],"int32"), )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([0],"int32"), )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([0],"float64"), )
paddle.linalg.cov(Tensor([0],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int64"), aweights=Tensor([0],"float64"), )
paddle.linalg.cov(Tensor([0],"float32"), )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([0],"int32"), )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([0, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 0],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([0],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([0],"float64"), )
paddle.linalg.cov(Tensor([0, 4],"float32"), )
paddle.linalg.cov(Tensor([3, 0],"float32"), )
paddle.linalg.det(Tensor([0, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 0, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 0, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 0, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 0, 6],"complex64"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 0],"complex64"), )
paddle.linalg.det(Tensor([0, 3, 3],"float32"), )
paddle.linalg.det(Tensor([3, 0, 3],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0],"float32"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"complex128"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"complex128"), )
paddle.linalg.det(Tensor([0, 3, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 0, 5, 5],"float32"), )
paddle.linalg.det(Tensor([3, 3, 0, 5],"float32"), )
paddle.linalg.det(Tensor([3, 3, 5, 0],"float32"), )
paddle.linalg.det(Tensor([0, 3],"float32"), )
paddle.linalg.det(Tensor([3, 0],"float32"), )
paddle.linalg.eigvals(Tensor([0, 128],"complex128"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 0],"complex128"), name="large_x", )
paddle.linalg.eigvals(Tensor([0, 128],"complex64"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 0],"complex64"), name="large_x", )
paddle.linalg.eigvals(Tensor([0, 128],"float32"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 0],"float32"), name="large_x", )
paddle.linalg.eigvals(Tensor([0, 128],"float64"), name="large_x", )
paddle.linalg.eigvals(Tensor([128, 0],"float64"), name="large_x", )
paddle.linalg.eigvals(Tensor([0, 6],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 6],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 6],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 6],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 0, 2],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 2, 0],"complex128"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 0, 2],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 2, 0],"complex64"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 0, 2],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 2, 0],"float32"), name="small_x", )
paddle.linalg.eigvals(Tensor([0, 9, 2, 2],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 0, 2, 2],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 0, 2],"float64"), name="small_x", )
paddle.linalg.eigvals(Tensor([6, 9, 2, 0],"float64"), name="small_x", )
paddle.linalg.eigvalsh(Tensor([0, 5, 5],"complex64"), )
paddle.linalg.eigvalsh(Tensor([2, 0, 5],"complex64"), )
paddle.linalg.eigvalsh(Tensor([2, 5, 0],"complex64"), )
paddle.linalg.eigvalsh(Tensor([0, 5, 5],"float32"), )
paddle.linalg.eigvalsh(Tensor([2, 0, 5],"float32"), )
paddle.linalg.eigvalsh(Tensor([2, 5, 0],"float32"), )
paddle.linalg.eigvalsh(Tensor([0, 32],"float32"), )
paddle.linalg.eigvalsh(Tensor([32, 0],"float32"), )
paddle.linalg.eigvalsh(Tensor([0, 5],"complex64"), )
paddle.linalg.eigvalsh(Tensor([5, 0],"complex64"), )
paddle.linalg.eigvalsh(Tensor([0, 5],"float32"), )
paddle.linalg.eigvalsh(Tensor([5, 0],"float32"), )
paddle.linalg.inv(Tensor([0, 3],"float32"), )
paddle.linalg.inv(Tensor([3, 0],"float32"), )
paddle.linalg.inv(Tensor([0, 3],"float64"), )
paddle.linalg.inv(Tensor([3, 0],"float64"), )
paddle.linalg.inv(Tensor([0, 4],"float64"), )
paddle.linalg.inv(Tensor([4, 0],"float64"), )
paddle.linalg.inv(Tensor([0, 5],"float64"), )
paddle.linalg.inv(Tensor([5, 0],"float64"), )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 5],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 5],"float32"), Tensor([0, 8],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 3],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 7, 3],"float64"), Tensor([0, 7, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 3],"float64"), Tensor([10, 0, 6],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 7, 0],"float64"), Tensor([10, 7, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 6],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 8, 6],"float64"), Tensor([0, 8, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 0, 6],"float64"), Tensor([10, 0, 10],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([10, 8, 0],"float64"), Tensor([10, 8, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 3, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 0, 10],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([0, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 0, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 10],"float32"), Tensor([2, 3, 0],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 3, 10],"float32"), Tensor([0, 3, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 0, 10],"float32"), Tensor([2, 0, 4],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([2, 3, 0],"float32"), Tensor([2, 3, 0],"float32"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 100],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 0],"float64"), Tensor([200, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([0, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 100],"float64"), Tensor([200, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 100],"float64"), Tensor([0, 50],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 8],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2, 8],"float32"), Tensor([0, 2, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 0, 8],"float32"), Tensor([3, 0, 15],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([3, 2, 0],"float32"), Tensor([3, 2, 0],"float32"), rcond=None, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 2],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 0],"float64"), Tensor([3, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([0, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 2],"float64"), Tensor([3, 0],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 2],"float64"), Tensor([0, 3],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), rcond=1e-07, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 10],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 10],"float64"), Tensor([0, 8],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 4],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([0, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 4],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 4],"float64"), Tensor([0, 3],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=1e-15, driver="gelsd", )
paddle.linalg.lstsq(Tensor([0, 5],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([0, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 5],"float64"), Tensor([0, 1],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), rcond=None, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 600],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 0],"float64"), Tensor([50, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([0, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 600],"float64"), Tensor([50, 0],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 600],"float64"), Tensor([0, 300],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([50, 0],"float64"), Tensor([50, 0],"float64"), rcond=1e-15, driver="gelss", )
paddle.linalg.lstsq(Tensor([0, 2],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 0],"float32"), Tensor([8, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([0, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 2],"float32"), Tensor([8, 0],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([0, 2],"float32"), Tensor([0, 10],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([8, 0],"float32"), Tensor([8, 0],"float32"), rcond=1e-15, driver="gelsy", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 9],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([0, 9],"float32"), Tensor([0, 5],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.lstsq(Tensor([9, 0],"float32"), Tensor([9, 0],"float32"), rcond=1e-15, driver="gels", )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 0],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_power(Tensor([0, 4],"float64"), -2, )
paddle.linalg.matrix_power(Tensor([4, 0],"float64"), -2, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([1, 0],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.015, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=0.2, rtol=0.05, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), hermitian=True, atol=None, rtol=1.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 10],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 0],"float32"), tol=Tensor([2],"float32"), )
paddle.linalg.matrix_rank(Tensor([10, 10],"float32"), tol=Tensor([0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), None, True, Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), None, True, Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), None, True, Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 200],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 200],"float64"), Tensor([0, 200],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([200, 0],"float64"), Tensor([200, 0],"float64"), True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([3, 0],"float32"), 0.1, True, )
paddle.linalg.matrix_rank(Tensor([0, 3],"float64"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 0],"float64"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([0, 4],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 5],"float64"), hermitian=False, atol=Tensor([3, 0],"float64"), rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 5],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float64"), hermitian=True, atol=0.5, rtol=None, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), None, False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([0, 4],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 0],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), None, False, Tensor([3, 4],"float32"), Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 6],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 0],"float32"), Tensor([3, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([0, 4],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 5, 6],"float32"), Tensor([3, 0],"float32"), False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 0, 5],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0],"float32"), tol=0.1, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), 0.1, hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=0.01, rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 1],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([0, 1],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 1],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 4],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=0.01, )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([0, 4],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 0],"float32"), rtol=Tensor([3, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([0, 4],"float32"), )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), hermitian=False, atol=Tensor([3, 4],"float32"), rtol=Tensor([3, 0],"float32"), )
paddle.linalg.matrix_rank(Tensor([0, 4, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 0, 7, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 0, 8],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 0],"float64"), Tensor([3, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([0, 4],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([3, 4, 7, 8],"float64"), Tensor([3, 0],"float32"), hermitian=False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([0, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 0],"float64"), Tensor([1, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), None, False, Tensor([1, 4],"float64"), Tensor([1, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), None, False, Tensor([0, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), None, False, Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 1],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), False, )
paddle.linalg.matrix_rank(Tensor([5, 0],"float64"), Tensor([1, 0],"float64"), False, )
paddle.linalg.multi_dot(list[Tensor([0],"float32"),Tensor([4, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([0, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 0],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 5],"float32"),Tensor([0],"float32"),], )
paddle.linalg.norm(Tensor([0, 2],"float32"), 2.0, )
paddle.linalg.norm(Tensor([1, 0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0],"float32"), p=math.inf, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=1.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=2.5, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=3.0, axis=-1, )
paddle.linalg.norm(Tensor([0, 10, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([10, 0, 20],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([10, 10, 0],"float32"), p=math.inf, axis=-1, )
paddle.linalg.norm(Tensor([0, 16],"float32"), 2.0, )
paddle.linalg.norm(Tensor([16, 0],"float32"), 2.0, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"bfloat16"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"bfloat16"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"bfloat16"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"bfloat16"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([0, 3, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 0, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 0, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([2, 3, 4, 0],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([0],"float32"), )
paddle.linalg.norm(Tensor([0],"float32"), p="fro", axis=0, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, )
paddle.linalg.norm(Tensor([0],"float32"), p=1, axis=0, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 20, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 0, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 0],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([0, 6],"float32"), )
paddle.linalg.norm(Tensor([4, 0],"float32"), )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 6],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([4, 0],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(Tensor([0, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([5, 0, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([5, 5, 0],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([0, 50, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 0, 20],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(Tensor([50, 50, 0],"float64"), p=2.0, axis=-1, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.ormqr(Tensor([0, 3],"float32"), Tensor([3],"float32"), Tensor([3, 3],"float32"), )
paddle.linalg.ormqr(Tensor([3, 0],"float32"), Tensor([3],"float32"), Tensor([3, 3],"float32"), )
paddle.linalg.ormqr(Tensor([3, 3],"float32"), Tensor([0],"float32"), Tensor([3, 3],"float32"), )
paddle.linalg.ormqr(Tensor([3, 3],"float32"), Tensor([3],"float32"), Tensor([0, 3],"float32"), )
paddle.linalg.ormqr(Tensor([3, 3],"float32"), Tensor([3],"float32"), Tensor([3, 0],"float32"), )
paddle.linalg.ormqr(Tensor([0, 3],"complex128"), Tensor([3],"complex128"), Tensor([3, 4],"complex128"), )
paddle.linalg.ormqr(Tensor([4, 0],"complex128"), Tensor([3],"complex128"), Tensor([3, 4],"complex128"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex128"), Tensor([0],"complex128"), Tensor([3, 4],"complex128"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex128"), Tensor([3],"complex128"), Tensor([0, 4],"complex128"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex128"), Tensor([3],"complex128"), Tensor([3, 0],"complex128"), )
paddle.linalg.ormqr(Tensor([0, 3],"complex64"), Tensor([3],"complex64"), Tensor([3, 4],"complex64"), )
paddle.linalg.ormqr(Tensor([4, 0],"complex64"), Tensor([3],"complex64"), Tensor([3, 4],"complex64"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex64"), Tensor([0],"complex64"), Tensor([3, 4],"complex64"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex64"), Tensor([3],"complex64"), Tensor([0, 4],"complex64"), )
paddle.linalg.ormqr(Tensor([4, 3],"complex64"), Tensor([3],"complex64"), Tensor([3, 0],"complex64"), )
paddle.linalg.ormqr(Tensor([0, 3],"float16"), Tensor([3],"float16"), Tensor([3, 4],"float16"), )
paddle.linalg.ormqr(Tensor([4, 0],"float16"), Tensor([3],"float16"), Tensor([3, 4],"float16"), )
paddle.linalg.ormqr(Tensor([4, 3],"float16"), Tensor([0],"float16"), Tensor([3, 4],"float16"), )
paddle.linalg.ormqr(Tensor([4, 3],"float16"), Tensor([3],"float16"), Tensor([0, 4],"float16"), )
paddle.linalg.ormqr(Tensor([4, 3],"float16"), Tensor([3],"float16"), Tensor([3, 0],"float16"), )
paddle.linalg.ormqr(Tensor([0, 3],"float32"), Tensor([3],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([4, 0],"float32"), Tensor([3],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([4, 3],"float32"), Tensor([0],"float32"), Tensor([3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([4, 3],"float32"), Tensor([3],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.ormqr(Tensor([4, 3],"float32"), Tensor([3],"float32"), Tensor([3, 0],"float32"), )
paddle.linalg.ormqr(Tensor([0, 3],"float64"), Tensor([3],"float64"), Tensor([3, 4],"float64"), )
paddle.linalg.ormqr(Tensor([4, 0],"float64"), Tensor([3],"float64"), Tensor([3, 4],"float64"), )
paddle.linalg.ormqr(Tensor([4, 3],"float64"), Tensor([0],"float64"), Tensor([3, 4],"float64"), )
paddle.linalg.ormqr(Tensor([4, 3],"float64"), Tensor([3],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.ormqr(Tensor([4, 3],"float64"), Tensor([3],"float64"), Tensor([3, 0],"float64"), )
paddle.linalg.ormqr(Tensor([0, 4, 3],"float32"), Tensor([5, 3],"float32"), Tensor([5, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 0, 3],"float32"), Tensor([5, 3],"float32"), Tensor([5, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 0],"float32"), Tensor([5, 3],"float32"), Tensor([5, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 3],"float32"), Tensor([0, 3],"float32"), Tensor([5, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 3],"float32"), Tensor([5, 0],"float32"), Tensor([5, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 3],"float32"), Tensor([5, 3],"float32"), Tensor([0, 3, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 3],"float32"), Tensor([5, 3],"float32"), Tensor([5, 0, 4],"float32"), )
paddle.linalg.ormqr(Tensor([5, 4, 3],"float32"), Tensor([5, 3],"float32"), Tensor([5, 3, 0],"float32"), )
paddle.linalg.pca_lowrank(Tensor([0, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([1, 100, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([0, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 17, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 17, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([1, 0, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([1, 40, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([0, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([100, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([100, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([100, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([100, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([100, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([17, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([17, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 100, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 100, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 100, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 100, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 100, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 100, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 17, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 17, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 17, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 4, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 4, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 4, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 4, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 4, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 40, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 40, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 3, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 0, 40, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 0, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([2, 3, 40, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 4],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 4],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 40],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 40],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 40],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 100, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 17, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 17, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 4, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([3, 0, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([3, 40, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([0, 100],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([4, 0],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 100],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 17],"float64"), q=2, )
paddle.linalg.pca_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.pca_lowrank(Tensor([0, 100],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([40, 0],"float64"), q=12, )
paddle.linalg.pca_lowrank(Tensor([0, 100],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([40, 0],"float64"), q=6, )
paddle.linalg.pca_lowrank(Tensor([0, 100],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([40, 0],"float64"), q=8, )
paddle.linalg.pca_lowrank(Tensor([0, 5],"float64"), None, center=False, )
paddle.linalg.pca_lowrank(Tensor([5, 0],"float64"), None, center=False, )
paddle.linalg.pinv(Tensor([0, 200, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 0, 300],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([2, 200, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 0, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 0],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([0, 5, 5],"complex64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 0, 5],"complex64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 0],"complex64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float32"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float32"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float32"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float32"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float32"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float32"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 0, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 5, 0],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([0, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 0, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 6, 5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([0, 5],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 0],"complex128"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([0, 5],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.pinv(Tensor([5, 0],"float64"), rcond=1e-15, hermitian=True, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float32"), Tensor([6, 0],"float32"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 4],"float64"), )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 10],"float64"), Tensor([0, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 0],"float64"), Tensor([4, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.linalg.solve(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.linalg.solve(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.linalg.solve(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.linalg.solve(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.linalg.solve(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3, 3],"float64"), Tensor([0, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 0],"float64"), Tensor([1, 3, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3],"float64"), Tensor([1, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 0],"float64"), Tensor([1, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([1, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([3, 0],"float64"), Tensor([1, 0],"float64"), left=False, )
paddle.linalg.solve(Tensor([0, 3],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([3, 0],"float64"), Tensor([3],"float64"), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([0],"float64"), )
paddle.linalg.svd_lowrank(Tensor([0, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 100, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 17, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([1, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 0, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([1, 40, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([100, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([100, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([100, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([17, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([17, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 100, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 100, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 100, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 100, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 17, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 17, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 17, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 4, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 4, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 40, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 40, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 3, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 0, 40, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 0, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([2, 3, 40, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 40],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 40],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 40],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 100, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 4],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 4],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 17, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([3, 0, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([3, 40, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=2, )
paddle.linalg.svd_lowrank(Tensor([0, 17],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([4, 0],"float64"), q=4, )
paddle.linalg.svd_lowrank(Tensor([0, 100],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([40, 0],"float64"), q=12, )
paddle.linalg.svd_lowrank(Tensor([0, 100],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([40, 0],"float64"), q=6, )
paddle.linalg.svd_lowrank(Tensor([0, 100],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([40, 0],"float64"), q=8, )
paddle.linalg.svd_lowrank(Tensor([0, 5],"float64"), None, )
paddle.linalg.svd_lowrank(Tensor([5, 0],"float64"), None, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 0, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 0, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 0],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 0],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 0, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 0],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([0, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 0],"float64"), p=2, axis=1, keepdim=True, )
paddle.linspace(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), dtype="float32", )
paddle.linspace(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"int32"), dtype="float32", )
paddle.linspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"int32"), dtype="float32", )
paddle.linspace(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"int32"), dtype="float32", )
paddle.log(Tensor([0, 1],"float32"), )
paddle.log(Tensor([1, 0],"float32"), )
paddle.log(Tensor([0, 2],"float32"), )
paddle.log(Tensor([0, 2],"float64"), )
paddle.log(Tensor([1, 0],"float64"), )
paddle.log(Tensor([0],"float32"), )
paddle.log(Tensor([0],"float64"), )
paddle.log(Tensor([0, 1],"float64"), )
paddle.log(Tensor([10, 0],"float64"), )
paddle.log(Tensor([0, 10, 10, 2],"float64"), )
paddle.log(Tensor([10, 0, 10, 2],"float64"), )
paddle.log(Tensor([10, 10, 0, 2],"float64"), )
paddle.log(Tensor([10, 10, 10, 0],"float64"), )
paddle.log(Tensor([0, 12],"float32"), )
paddle.log(Tensor([10, 0],"float32"), )
paddle.log(Tensor([0, 12],"float64"), )
paddle.log(Tensor([0, 2, 1],"float32"), )
paddle.log(Tensor([10, 0, 1],"float32"), )
paddle.log(Tensor([10, 2, 0],"float32"), )
paddle.log(Tensor([0, 20, 1],"float32"), )
paddle.log(Tensor([10, 20, 0],"float32"), )
paddle.log(Tensor([0, 20],"float64"), )
paddle.log(Tensor([0, 200, 100],"float64"), )
paddle.log(Tensor([100, 0, 100],"float64"), )
paddle.log(Tensor([100, 200, 0],"float64"), )
paddle.log(Tensor([0, 200, 99],"float64"), )
paddle.log(Tensor([100, 0, 99],"float64"), )
paddle.log(Tensor([0, 2, 2, 3],"float32"), )
paddle.log(Tensor([1000, 0, 2, 3],"float32"), )
paddle.log(Tensor([1000, 2, 0, 3],"float32"), )
paddle.log(Tensor([1000, 2, 2, 0],"float32"), )
paddle.log(Tensor([0, 2, 2],"float32"), )
paddle.log(Tensor([1000, 0, 2],"float32"), )
paddle.log(Tensor([1000, 2, 0],"float32"), )
paddle.log(Tensor([0, 2, 3],"float32"), )
paddle.log(Tensor([100000, 0, 3],"float32"), )
paddle.log(Tensor([100000, 2, 0],"float32"), )
paddle.log(Tensor([100000, 0],"float32"), )
paddle.log(Tensor([2, 0],"float32"), )
paddle.log(Tensor([2, 0],"float64"), )
paddle.log(Tensor([2, 0, 2],"float32"), )
paddle.log(Tensor([2, 2, 0],"float32"), )
paddle.log(Tensor([0, 3],"float32"), )
paddle.log(Tensor([0, 3],"float64"), )
paddle.log(Tensor([0, 5, 2, 3],"float32"), )
paddle.log(Tensor([2, 0, 2, 3],"float32"), )
paddle.log(Tensor([2, 5, 0, 3],"float32"), )
paddle.log(Tensor([2, 5, 2, 0],"float32"), )
paddle.log(Tensor([0, 5, 2],"float32"), )
paddle.log(Tensor([2, 5, 0],"float32"), )
paddle.log(Tensor([0, 5, 2],"float64"), )
paddle.log(Tensor([2, 0, 2],"float64"), )
paddle.log(Tensor([2, 5, 0],"float64"), )
paddle.log(Tensor([20000, 0, 3],"float32"), )
paddle.log(Tensor([20000, 2, 0],"float32"), )
paddle.log(Tensor([20000, 0],"float32"), )
paddle.log(Tensor([3, 0],"float32"), )
paddle.log(Tensor([3, 0],"float64"), )
paddle.log(Tensor([3, 0, 1],"float32"), )
paddle.log(Tensor([3, 2, 0],"float32"), )
paddle.log(Tensor([3, 0, 2, 3],"float32"), )
paddle.log(Tensor([3, 2, 0, 3],"float32"), )
paddle.log(Tensor([3, 2, 2, 0],"float32"), )
paddle.log(Tensor([3, 0, 2],"float32"), )
paddle.log(Tensor([0, 2, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 2, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 2],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 3],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 3],"float64"), name="Categorical_log_prob", )
paddle.log(Tensor([3, 0],"float64"), name="Categorical_log_prob", )
paddle.log(Tensor([0],"float32"), name="Categorical_log_prob", )
paddle.log(Tensor([0, 32, 128],"float32"), )
paddle.log(Tensor([32, 0, 128],"float32"), )
paddle.log(Tensor([32, 32, 0],"float32"), )
paddle.log(Tensor([0, 32],"float32"), )
paddle.log(Tensor([32, 0],"float32"), )
paddle.log(Tensor([4, 0, 2, 3],"float32"), )
paddle.log(Tensor([4, 2, 0, 3],"float32"), )
paddle.log(Tensor([4, 2, 2, 0],"float32"), )
paddle.log(Tensor([4, 0, 2],"float32"), )
paddle.log(Tensor([4, 2, 0],"float32"), )
paddle.log(Tensor([0, 6],"float32"), )
paddle.log(Tensor([4, 0],"float32"), )
paddle.log(Tensor([0, 6],"float64"), )
paddle.log(Tensor([4, 0],"float64"), )
paddle.log(Tensor([5, 0],"float32"), )
paddle.log(Tensor([5, 0],"float64"), )
paddle.log(Tensor([0, 5],"float64"), )
paddle.log(Tensor([0, 6],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([5, 0],"float32"), name="Uniform_entropy", )
paddle.log(Tensor([0, 6],"float64"), name="Uniform_entropy", )
paddle.log(Tensor([5, 0],"float64"), name="Uniform_entropy", )
paddle.log(Tensor([0, 20],"float32"), )
paddle.log(Tensor([64, 0],"float32"), )
paddle.log(Tensor([0, 4, 100],"float64"), )
paddle.log(Tensor([8, 0, 100],"float64"), )
paddle.log(Tensor([8, 4, 0],"float64"), )
paddle.log(Tensor([0, 4, 1000],"float32"), )
paddle.log(Tensor([8, 0, 1000],"float32"), )
paddle.log(Tensor([8, 4, 0],"float32"), )
paddle.log(Tensor([0, 8],"float16"), )
paddle.log(Tensor([8, 0],"float16"), )
paddle.log(Tensor([0, 8],"float32"), )
paddle.log(Tensor([8, 0],"float32"), )
paddle.log10(Tensor([0, 40, 1723],"float32"), )
paddle.log10(Tensor([1, 0, 1723],"float32"), )
paddle.log10(Tensor([1, 40, 0],"float32"), )
paddle.log10(Tensor([0, 40, 419],"float32"), )
paddle.log10(Tensor([1, 0, 419],"float32"), )
paddle.log10(Tensor([0, 40, 480],"float32"), )
paddle.log10(Tensor([1, 0, 480],"float32"), )
paddle.log10(Tensor([0, 64, 1723],"float32"), )
paddle.log10(Tensor([1, 64, 0],"float32"), )
paddle.log10(Tensor([0, 64, 294],"float32"), )
paddle.log10(Tensor([1, 0, 294],"float32"), )
paddle.log10(Tensor([0, 64, 448],"float32"), )
paddle.log10(Tensor([1, 0, 448],"float32"), )
paddle.log10(Tensor([0, 64, 480],"float32"), )
paddle.log10(Tensor([0, 64, 493],"float32"), )
paddle.log10(Tensor([1, 0, 493],"float32"), )
paddle.log10(Tensor([0, 64, 530],"float32"), )
paddle.log10(Tensor([1, 0, 530],"float32"), )
paddle.log10(Tensor([0, 20, 1],"float32"), )
paddle.log10(Tensor([10, 0, 1],"float32"), )
paddle.log10(Tensor([10, 20, 0],"float32"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float32"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float32"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float32"), )
paddle.log1p(Tensor([0, 2, 3, 4],"float64"), )
paddle.log1p(Tensor([1, 0, 3, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 0, 4],"float64"), )
paddle.log1p(Tensor([1, 2, 3, 0],"float64"), )
paddle.log1p(Tensor([0, 12],"float64"), )
paddle.log1p(Tensor([10, 0],"float64"), )
paddle.log1p(Tensor([0, 20, 1],"float32"), )
paddle.log1p(Tensor([10, 0, 1],"float32"), )
paddle.log1p(Tensor([10, 20, 0],"float32"), )
paddle.log1p(Tensor([0, 20],"float64"), )
paddle.log1p(Tensor([0, 200, 300],"float32"), )
paddle.log1p(Tensor([10, 0, 300],"float32"), )
paddle.log1p(Tensor([10, 200, 0],"float32"), )
paddle.log1p(Tensor([0, 2],"float64"), )
paddle.log1p(Tensor([2, 0],"float64"), )
paddle.log1p(Tensor([0, 3, 4],"float32"), )
paddle.log1p(Tensor([2, 0, 4],"float32"), )
paddle.log1p(Tensor([2, 3, 0],"float32"), )
paddle.log1p(Tensor([0, 3],"float32"), )
paddle.log1p(Tensor([2, 0],"float32"), )
paddle.log1p(Tensor([0, 4],"float64"), )
paddle.log1p(Tensor([0],"float32"), )
paddle.log1p(Tensor([0],"float64"), )
paddle.log1p(Tensor([0, 3, 2],"float32"), )
paddle.log1p(Tensor([4, 0, 2],"float32"), )
paddle.log1p(Tensor([4, 3, 0],"float32"), )
paddle.log1p(Tensor([0, 3, 2],"float64"), )
paddle.log1p(Tensor([4, 0, 2],"float64"), )
paddle.log1p(Tensor([4, 3, 0],"float64"), )
paddle.log1p(Tensor([50000, 0],"float64"), )
paddle.log1p(Tensor([0, 5, 5],"float64"), )
paddle.log1p(Tensor([50000, 0, 5],"float64"), )
paddle.log1p(Tensor([50000, 5, 0],"float64"), )
paddle.log1p(Tensor([0, 16, 32],"complex128"), )
paddle.log1p(Tensor([8, 0, 32],"complex128"), )
paddle.log1p(Tensor([8, 16, 0],"complex128"), )
paddle.log1p(Tensor([0, 16, 32],"complex64"), )
paddle.log1p(Tensor([8, 0, 32],"complex64"), )
paddle.log1p(Tensor([8, 16, 0],"complex64"), )
paddle.log1p(Tensor([0, 16, 32],"float16"), )
paddle.log1p(Tensor([8, 0, 32],"float16"), )
paddle.log1p(Tensor([8, 16, 0],"float16"), )
paddle.log1p(Tensor([0, 16, 32],"float32"), )
paddle.log1p(Tensor([8, 0, 32],"float32"), )
paddle.log1p(Tensor([8, 16, 0],"float32"), )
paddle.log1p(Tensor([0, 16, 32],"float64"), )
paddle.log1p(Tensor([8, 0, 32],"float64"), )
paddle.log1p(Tensor([8, 16, 0],"float64"), )
paddle.logical_and(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_and(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_and(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_and(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_and(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_and(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_and(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_and(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_and(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_and(Tensor([0, 784],"bool"), Tensor([1000, 784],"bool"), )
paddle.logical_and(Tensor([1000, 0],"bool"), Tensor([1000, 784],"bool"), )
paddle.logical_and(Tensor([1000, 784],"bool"), Tensor([0, 784],"bool"), )
paddle.logical_and(Tensor([1000, 784],"bool"), Tensor([1000, 0],"bool"), )
paddle.logical_and(Tensor([0, 784],"bool"), Tensor([0, 784],"bool"), )
paddle.logical_and(Tensor([1000, 0],"bool"), Tensor([1000, 0],"bool"), )
paddle.logical_and(Tensor([0, 17, 10],"bool"), Tensor([11, 17, 10],"bool"), )
paddle.logical_and(Tensor([11, 0, 10],"bool"), Tensor([11, 17, 10],"bool"), )
paddle.logical_and(Tensor([11, 17, 0],"bool"), Tensor([11, 17, 10],"bool"), )
paddle.logical_and(Tensor([11, 17, 10],"bool"), Tensor([0, 17, 10],"bool"), )
paddle.logical_and(Tensor([11, 17, 10],"bool"), Tensor([11, 0, 10],"bool"), )
paddle.logical_and(Tensor([11, 17, 10],"bool"), Tensor([11, 17, 0],"bool"), )
paddle.logical_and(Tensor([0, 17, 10],"bool"), Tensor([0, 17, 10],"bool"), )
paddle.logical_and(Tensor([11, 0, 10],"bool"), Tensor([11, 0, 10],"bool"), )
paddle.logical_and(Tensor([11, 17, 0],"bool"), Tensor([11, 17, 0],"bool"), )
paddle.logical_and(Tensor([0, 17],"bool"), Tensor([11, 17],"bool"), )
paddle.logical_and(Tensor([11, 0],"bool"), Tensor([11, 17],"bool"), )
paddle.logical_and(Tensor([11, 17],"bool"), Tensor([0, 17],"bool"), )
paddle.logical_and(Tensor([11, 17],"bool"), Tensor([11, 0],"bool"), )
paddle.logical_and(Tensor([0, 17],"bool"), Tensor([0, 17],"bool"), )
paddle.logical_and(Tensor([11, 0],"bool"), Tensor([11, 0],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([132],"bool"), )
paddle.logical_and(Tensor([132],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_and(Tensor([0, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_and(Tensor([2, 0],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_and(Tensor([2, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_and(Tensor([2, 2],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_and(Tensor([0, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_and(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 5],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 4, 5],"bool"), Tensor([0, 3, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 0, 4, 5],"bool"), Tensor([2, 0, 4, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 0, 5],"bool"), Tensor([2, 3, 0, 5],"bool"), )
paddle.logical_and(Tensor([2, 3, 4, 0],"bool"), Tensor([2, 3, 4, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_and(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_and(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_and(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_and(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_and(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_and(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_and(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_and(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_and(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_and(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_and(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_and(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_and(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_and(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 7],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_and(Tensor([0, 17, 5, 6, 7],"bool"), Tensor([0, 17, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 0, 5, 6, 7],"bool"), Tensor([8, 0, 5, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 0, 6, 7],"bool"), Tensor([8, 17, 0, 6, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 0, 7],"bool"), Tensor([8, 17, 5, 0, 7],"bool"), )
paddle.logical_and(Tensor([8, 17, 5, 6, 0],"bool"), Tensor([8, 17, 5, 6, 0],"bool"), )
paddle.logical_not(Tensor([0, 3],"bool"), )
paddle.logical_not(Tensor([1, 0],"bool"), )
paddle.logical_not(Tensor([0, 4, 2],"int64"), )
paddle.logical_not(Tensor([1, 0, 2],"int64"), )
paddle.logical_not(Tensor([1, 4, 0],"int64"), )
paddle.logical_not(Tensor([0, 4],"int64"), )
paddle.logical_not(Tensor([1, 0],"int64"), )
paddle.logical_not(Tensor([0],"bool"), )
paddle.logical_not(Tensor([0, 20, 1],"float32"), )
paddle.logical_not(Tensor([10, 0, 1],"float32"), )
paddle.logical_not(Tensor([10, 20, 0],"float32"), )
paddle.logical_not(Tensor([0, 1000],"bool"), )
paddle.logical_not(Tensor([100, 0],"bool"), )
paddle.logical_not(Tensor([0, 1],"int64"), )
paddle.logical_not(Tensor([2, 0],"int64"), )
paddle.logical_not(Tensor([0, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_not(Tensor([2, 0],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_not(Tensor([2, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_not(Tensor([2, 2],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_not(Tensor([0, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_not(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_not(Tensor([0, 4],"bool"), )
paddle.logical_not(Tensor([2, 0],"bool"), )
paddle.logical_not(Tensor([0, 1, 2],"int64"), )
paddle.logical_not(Tensor([3, 0, 2],"int64"), )
paddle.logical_not(Tensor([3, 1, 0],"int64"), )
paddle.logical_not(Tensor([0, 1],"bool"), )
paddle.logical_not(Tensor([3, 0],"bool"), )
paddle.logical_not(Tensor([3, 0],"int64"), )
paddle.logical_not(Tensor([0, 4, 1],"int64"), )
paddle.logical_not(Tensor([3, 0, 1],"int64"), )
paddle.logical_not(Tensor([3, 4, 0],"int64"), )
paddle.logical_not(Tensor([0, 40],"bool"), )
paddle.logical_not(Tensor([30, 0],"bool"), )
paddle.logical_not(Tensor([0, 120],"bool"), )
paddle.logical_not(Tensor([300, 0],"bool"), )
paddle.logical_not(Tensor([5, 0],"int64"), )
paddle.logical_not(Tensor([50, 0],"bool"), )
paddle.logical_not(Tensor([0, 8, 9, 18],"bool"), )
paddle.logical_not(Tensor([6, 0, 9, 18],"bool"), )
paddle.logical_not(Tensor([6, 8, 0, 18],"bool"), )
paddle.logical_not(Tensor([6, 8, 9, 0],"bool"), )
paddle.logical_not(Tensor([8, 0],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([1],"bool"), )
paddle.logical_or(Tensor([1],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([0],"bool"), Tensor([0],"bool"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_or(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_or(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_or(Tensor([0, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_or(Tensor([2, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_or(Tensor([2, 2],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(Tensor([0, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_or(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_or(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_or(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_or(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_or(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_or(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_or(Tensor([0, 4],"bool"), Tensor([8, 4],"bool"), )
paddle.logical_or(Tensor([8, 0],"bool"), Tensor([8, 4],"bool"), )
paddle.logical_or(Tensor([8, 4],"bool"), Tensor([0, 4],"bool"), )
paddle.logical_or(Tensor([8, 4],"bool"), Tensor([8, 0],"bool"), )
paddle.logical_or(Tensor([0, 4],"bool"), Tensor([0, 4],"bool"), )
paddle.logical_or(Tensor([8, 0],"bool"), Tensor([8, 0],"bool"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([0, 20, 1],"float32"), Tensor([0, 20, 1],"float32"), )
paddle.logical_xor(Tensor([10, 0, 1],"float32"), Tensor([10, 0, 1],"float32"), )
paddle.logical_xor(Tensor([10, 20, 0],"float32"), Tensor([10, 20, 0],"float32"), )
paddle.logical_xor(Tensor([0, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_xor(Tensor([2, 0],"bool"), Tensor([2, 2],"bool"), )
paddle.logical_xor(Tensor([2, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_xor(Tensor([2, 2],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_xor(Tensor([0, 2],"bool"), Tensor([0, 2],"bool"), )
paddle.logical_xor(Tensor([2, 0],"bool"), Tensor([2, 0],"bool"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"bool"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"bool"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"bool"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"bool"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex128"), Tensor([0, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex128"), Tensor([4, 0, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex128"), Tensor([4, 3, 0],"int8"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"bool"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int16"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int32"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int64"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_xor(Tensor([0, 3, 2],"complex64"), Tensor([0, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 0, 2],"complex64"), Tensor([4, 0, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 0],"complex64"), Tensor([4, 3, 0],"int8"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.logical_xor(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int16"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int16"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int16"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int32"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int32"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int32"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int64"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int64"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int64"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex128"), )
paddle.logical_xor(Tensor([0, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logical_xor(Tensor([0, 3, 2],"int8"), Tensor([0, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 0, 2],"int8"), Tensor([4, 0, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 0],"int8"), Tensor([4, 3, 0],"complex64"), )
paddle.logit(Tensor([0, 20, 1],"float32"), 0.001, )
paddle.logit(Tensor([10, 0, 1],"float32"), 0.001, )
paddle.logit(Tensor([10, 20, 0],"float32"), 0.001, )
paddle.logit(Tensor([0],"float32"), 1e-08, )
paddle.logspace(Tensor([0],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(Tensor([1],"float32"), Tensor([0],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([0],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([0],"float32"), dtype="float32", )
paddle.logspace(Tensor([0],"float32"), Tensor([0],"float32"), Tensor([0],"int32"), Tensor([0],"float32"), dtype="float32", )
paddle.logsumexp(Tensor([0],"float32"), )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float16"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), 2, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([0, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 0, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 0, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 0],"float64"), None, False, )
paddle.logsumexp(Tensor([0, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([3, 0],"float32"), axis=None, )
paddle.logsumexp(Tensor([0, 5],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([3, 0],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.logsumexp(Tensor([0, 200, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 0, 40],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([30, 200, 0],"float32"), keepdim=False, )
paddle.logsumexp(Tensor([0, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 0, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([4, 5, 0],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([0],"float32"), axis=0, )
paddle.masked_fill(Tensor([0],"float32"), Tensor([300, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([0, 120],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([120],"float32"), Tensor([300, 120],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), -0.7255859375, )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), -0.7255859375, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), -0.7255859375, )
paddle.masked_fill(Tensor([0],"float16"), Tensor([168],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([168],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0],"float16"), Tensor([0],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0],"float32"), Tensor([168],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([168],"float32"), Tensor([0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([168],"float32"), Tensor([168],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0],"float32"), Tensor([0],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0, 3],"float32"), Tensor([1, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 0],"float32"), Tensor([1, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([0, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([1, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([1, 3],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0, 40],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 0],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([0, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([3, 0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([3, 1],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([3, 1],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 0],"float32"), Tensor([3, 1],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 40],"float32"), Tensor([0, 1],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 40],"float32"), Tensor([3, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([3, 40],"float32"), Tensor([3, 1],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([0, 40],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 0],"bool"), 0.2001953125, )
paddle.masked_fill(Tensor([0, 1],"float16"), Tensor([300, 40],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 0],"float16"), Tensor([300, 40],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([0, 40],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([300, 1],"float16"), Tensor([300, 40],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), 0.46430984139442444, )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), 0.46430984139442444, )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), 0.46430984139442444, )
paddle.masked_fill(Tensor([0, 40],"float32"), Tensor([40],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([300, 0],"float32"), Tensor([40],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([300, 40],"float32"), Tensor([40],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0, 3],"float32"), Tensor([50, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([50, 0],"float32"), Tensor([50, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([50, 3],"float32"), Tensor([0, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([50, 3],"float32"), Tensor([50, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([50, 3],"float32"), Tensor([50, 3],"bool"), Tensor([0],"float32"), )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([0, 8, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 0, 9, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 0, 18],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 0],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float16"), Tensor([6, 8, 9, 18],"bool"), Tensor([0],"float16"), )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 0],"bool"), 0.2732364237308502, )
paddle.masked_fill(Tensor([0, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 0, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 0, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 0],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([0, 8, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 0, 9, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 0, 18],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 0],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([6, 8, 9, 18],"float32"), Tensor([6, 8, 9, 18],"bool"), Tensor([0],"float32"), )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([0, 1],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([1, 0],"float32"), Tensor([1, 0],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 0, 2],"float32"), Tensor([1, 0, 2],"bool"), )
paddle.masked_select(Tensor([1, 2, 0],"float32"), Tensor([1, 2, 0],"bool"), )
paddle.masked_select(Tensor([0, 10],"float32"), Tensor([10, 10],"bool"), )
paddle.masked_select(Tensor([10, 0],"float32"), Tensor([10, 10],"bool"), )
paddle.masked_select(Tensor([10, 10],"float32"), Tensor([0, 10],"bool"), )
paddle.masked_select(Tensor([10, 10],"float32"), Tensor([10, 0],"bool"), )
paddle.masked_select(Tensor([0, 10],"float32"), Tensor([0, 10],"bool"), )
paddle.masked_select(Tensor([10, 0],"float32"), Tensor([10, 0],"bool"), )
paddle.masked_select(Tensor([0, 2],"float32"), Tensor([2, 2],"bool"), )
paddle.masked_select(Tensor([2, 0],"float32"), Tensor([2, 2],"bool"), )
paddle.masked_select(Tensor([2, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.masked_select(Tensor([2, 2],"float32"), Tensor([2, 0],"bool"), )
paddle.masked_select(Tensor([0, 2],"float32"), Tensor([0, 2],"bool"), )
paddle.masked_select(Tensor([2, 0],"float32"), Tensor([2, 0],"bool"), )
paddle.masked_select(Tensor([0, 4],"float32"), Tensor([3, 1],"bool"), )
paddle.masked_select(Tensor([3, 0],"float32"), Tensor([3, 1],"bool"), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([3, 0],"bool"), )
paddle.masked_select(Tensor([0, 4],"float32"), Tensor([0, 1],"bool"), )
paddle.masked_select(Tensor([3, 0],"float32"), Tensor([3, 0],"bool"), )
paddle.masked_select(Tensor([0, 50],"float64"), Tensor([50, 50],"bool"), )
paddle.masked_select(Tensor([50, 0],"float64"), Tensor([50, 50],"bool"), )
paddle.masked_select(Tensor([50, 50],"float64"), Tensor([0, 50],"bool"), )
paddle.masked_select(Tensor([50, 50],"float64"), Tensor([50, 0],"bool"), )
paddle.masked_select(Tensor([0, 50],"float64"), Tensor([0, 50],"bool"), )
paddle.masked_select(Tensor([50, 0],"float64"), Tensor([50, 0],"bool"), )
paddle.masked_select(Tensor([0, 6, 8],"float32"), Tensor([88, 6, 8],"bool"), )
paddle.masked_select(Tensor([88, 0, 8],"float32"), Tensor([88, 6, 8],"bool"), )
paddle.masked_select(Tensor([88, 6, 0],"float32"), Tensor([88, 6, 8],"bool"), )
paddle.masked_select(Tensor([88, 6, 8],"float32"), Tensor([0, 6, 8],"bool"), )
paddle.masked_select(Tensor([88, 6, 8],"float32"), Tensor([88, 0, 8],"bool"), )
paddle.masked_select(Tensor([88, 6, 8],"float32"), Tensor([88, 6, 0],"bool"), )
paddle.masked_select(Tensor([0, 6, 8],"float32"), Tensor([0, 6, 8],"bool"), )
paddle.masked_select(Tensor([88, 0, 8],"float32"), Tensor([88, 0, 8],"bool"), )
paddle.masked_select(Tensor([88, 6, 0],"float32"), Tensor([88, 6, 0],"bool"), )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([0, 1],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1, 0],"float32"), )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([1, 1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([0, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 100, 0],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([0, 100, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 0],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([1, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([0, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 100],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.matmul(Tensor([0, 100, 100],"float32"), Tensor([0, 100, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 100],"float32"), Tensor([1, 0, 32],"float32"), )
paddle.matmul(Tensor([0, 100, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 0, 32],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([32, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([1, 100, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 100, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 0, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 40, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 0, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 40, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([1, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([1, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([1, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 0],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([1, 100, 40],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 100, 50],"float32"), Tensor([50, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 50],"float32"), Tensor([50, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 0],"float32"), Tensor([50, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 50],"float32"), Tensor([0, 32],"float32"), )
paddle.matmul(Tensor([1, 100, 50],"float32"), Tensor([50, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 128],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 0, 32, 128],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 0, 128],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float16"), Tensor([1, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([0, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([1, 0, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([1, 128, 0, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float16"), Tensor([1, 128, 128, 0],"float16"), )
paddle.matmul(Tensor([0, 128, 32, 128],"float16"), Tensor([0, 128, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 0, 32, 128],"float16"), Tensor([1, 0, 128, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 0, 128],"float16"), Tensor([1, 128, 0, 32],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float16"), Tensor([1, 128, 128, 0],"float16"), )
paddle.matmul(Tensor([0, 128, 32, 128],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 128],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 128],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([0, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([1, 0, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([1, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 128],"float32"), Tensor([1, 128, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 128],"float32"), Tensor([0, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 128],"float32"), Tensor([1, 0, 128, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 128],"float32"), Tensor([1, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 128, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float16"), Tensor([1, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([0, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([1, 0, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([1, 128, 0, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float16"), Tensor([1, 128, 32, 0],"float16"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float16"), Tensor([0, 128, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float16"), Tensor([1, 0, 32, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float16"), Tensor([1, 128, 0, 128],"float16"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float16"), Tensor([1, 128, 32, 0],"float16"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([0, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 0, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 0, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float32"), Tensor([0, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 0, 32, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float32"), Tensor([1, 128, 0, 128],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 128, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 0],"float32"), Tensor([1, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([0, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 0, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 32, 32],"float32"), Tensor([1, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float32"), Tensor([0, 128, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 0, 32, 32],"float32"), )
paddle.matmul(Tensor([1, 128, 0, 32],"float32"), Tensor([1, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([0, 16, 32, 16],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 16],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 0, 16],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 0],"float32"), Tensor([1, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([0, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([1, 0, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([1, 16, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 16],"float32"), Tensor([1, 16, 16, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 32, 16],"float32"), Tensor([0, 16, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 16],"float32"), Tensor([1, 0, 16, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 0, 16],"float32"), Tensor([1, 16, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 0],"float32"), Tensor([1, 16, 16, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 32, 32],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 0, 32],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 0],"float32"), Tensor([1, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([0, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([1, 0, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([1, 16, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 32],"float32"), Tensor([1, 16, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 32, 32],"float32"), Tensor([0, 16, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 0, 32, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 0, 32],"float32"), Tensor([1, 16, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 16, 32, 0],"float32"), Tensor([1, 16, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 0],"float64"), Tensor([1, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 0],"float64"), Tensor([1, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 0],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([1, 17, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 1723, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 0, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 1723, 0],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([0, 40],"float32"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([64, 0],"float32"), )
paddle.matmul(Tensor([0, 1723, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 0, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 1723, 0],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 1723, 64],"float32"), Tensor([0, 64],"float32"), )
paddle.matmul(Tensor([0, 18],"float32"), Tensor([1],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([1],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), transpose_x=True, transpose_y=False, )
paddle.matmul(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([18],"float32"), )
paddle.matmul(Tensor([1, 18],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0, 2, 50],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 0, 50],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 0],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 50],"complex128"), Tensor([0, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 50],"complex128"), Tensor([1, 0, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 50],"complex128"), Tensor([1, 50, 0],"complex128"), )
paddle.matmul(Tensor([0, 2, 50],"complex128"), Tensor([0, 50, 2],"complex128"), )
paddle.matmul(Tensor([1, 0, 50],"complex128"), Tensor([1, 0, 2],"complex128"), )
paddle.matmul(Tensor([1, 2, 0],"complex128"), Tensor([1, 50, 0],"complex128"), )
paddle.matmul(Tensor([0, 2, 50],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 0, 50],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 2, 0],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 2, 50],"complex64"), Tensor([0, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 2, 50],"complex64"), Tensor([1, 0, 2],"complex64"), )
paddle.matmul(Tensor([1, 2, 50],"complex64"), Tensor([1, 50, 0],"complex64"), )
paddle.matmul(Tensor([0, 2, 50],"complex64"), Tensor([0, 50, 2],"complex64"), )
paddle.matmul(Tensor([1, 0, 50],"complex64"), Tensor([1, 0, 2],"complex64"), )
paddle.matmul(Tensor([1, 2, 0],"complex64"), Tensor([1, 50, 0],"complex64"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([1, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([1, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 4],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([0, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 0, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 0, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 4],"float32"), Tensor([1, 3, 2, 4, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 4],"float32"), Tensor([0, 3, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 4],"float32"), Tensor([1, 0, 2, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 4],"float32"), Tensor([1, 3, 0, 4, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 4],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 4, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float16"), Tensor([1, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([0, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float16"), Tensor([1, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float16"), Tensor([0, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float16"), Tensor([1, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float16"), Tensor([1, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float16"), Tensor([1, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float16"), Tensor([1, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 5],"float32"), Tensor([1, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 0, 2, 5, 5],"float32"), Tensor([1, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 5, 5],"float32"), Tensor([1, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 0, 5],"float32"), Tensor([1, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([1, 3, 2, 5, 0],"float32"), Tensor([1, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 0, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 0, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 0],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([0, 8],"float16"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float16"), Tensor([6, 0],"float16"), )
paddle.matmul(Tensor([0, 3, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 0, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 0, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 0],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([0, 8],"float32"), )
paddle.matmul(Tensor([1, 3, 5, 6],"float32"), Tensor([6, 0],"float32"), )
paddle.matmul(Tensor([0, 30, 40, 200],"float32"), Tensor([30, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 0, 40, 200],"float32"), Tensor([30, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 0, 200],"float32"), Tensor([30, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 0],"float32"), Tensor([30, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 200],"float32"), Tensor([0, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 200],"float32"), Tensor([30, 0, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 200],"float32"), Tensor([30, 1, 0, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 200],"float32"), Tensor([30, 1, 200, 0],"float32"), )
paddle.matmul(Tensor([0, 30, 40, 200],"float32"), Tensor([0, 1, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 0, 40, 200],"float32"), Tensor([30, 0, 200, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 0, 200],"float32"), Tensor([30, 1, 0, 40],"float32"), )
paddle.matmul(Tensor([1, 30, 40, 0],"float32"), Tensor([30, 1, 200, 0],"float32"), )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 32],"float64"), Tensor([0, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 32],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([0, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([1, 0],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([1, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([0, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([0, 100, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([1, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([0, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([0, 100, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([1, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 17],"float64"), Tensor([1, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([0, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 17, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([0, 17, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 17],"float64"), Tensor([1, 0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 17, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([1, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 17],"float64"), Tensor([1, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([1, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([0, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([0, 17, 4],"float64"), )
paddle.matmul(Tensor([1, 0, 17],"float64"), Tensor([1, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([1, 0, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 0],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([1, 4, 17],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([1, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([1, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 0, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([0, 100, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 0, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([1, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([1, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([1, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([0, 100, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([1, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([1, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([1, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([0, 100, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([1, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([1, 0, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 0],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([1, 40, 100],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 448, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 448, 0],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 448, 64],"float32"), Tensor([0, 64],"float32"), )
paddle.matmul(Tensor([1, 448, 64],"float32"), Tensor([64, 0],"float32"), )
paddle.matmul(Tensor([0, 480, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 480, 0],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 480, 64],"float32"), Tensor([0, 40],"float32"), )
paddle.matmul(Tensor([1, 480, 64],"float32"), Tensor([64, 0],"float32"), )
paddle.matmul(Tensor([0, 493, 64],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 493, 0],"float32"), Tensor([64, 40],"float32"), )
paddle.matmul(Tensor([1, 493, 64],"float32"), Tensor([0, 40],"float32"), )
paddle.matmul(Tensor([1, 493, 64],"float32"), Tensor([64, 0],"float32"), )
paddle.matmul(Tensor([0, 530, 64],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 530, 0],"float32"), Tensor([64, 64],"float32"), )
paddle.matmul(Tensor([1, 530, 64],"float32"), Tensor([0, 64],"float32"), )
paddle.matmul(Tensor([1, 530, 64],"float32"), Tensor([64, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 128, 128],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 128, 128],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 128],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 0],"float32"), Tensor([1, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([0, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([1, 0, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([1, 8, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 128],"float32"), Tensor([1, 8, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 128, 128],"float32"), Tensor([0, 8, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 128, 128],"float32"), Tensor([1, 0, 128, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 128],"float32"), Tensor([1, 8, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 0],"float32"), Tensor([1, 8, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 128, 16],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 0, 128, 16],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 0],"float32"), Tensor([1, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([0, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([1, 0, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([1, 8, 0, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 16],"float32"), Tensor([1, 8, 16, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 128, 16],"float32"), Tensor([0, 8, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 0, 128, 16],"float32"), Tensor([1, 0, 16, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 128],"float32"), )
paddle.matmul(Tensor([1, 8, 128, 0],"float32"), Tensor([1, 8, 16, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 32, 32],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 32],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 0],"float32"), Tensor([1, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([0, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([1, 0, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([1, 8, 0, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 32],"float32"), Tensor([1, 8, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 32, 32],"float32"), Tensor([0, 8, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 32],"float32"), Tensor([1, 0, 32, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 32],"float32"), Tensor([1, 8, 0, 8],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 0],"float32"), Tensor([1, 8, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 32, 8],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 8],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 0],"float32"), Tensor([1, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([0, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([1, 8, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 8],"float32"), Tensor([1, 8, 8, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 32, 8],"float32"), Tensor([0, 8, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 0, 32, 8],"float32"), Tensor([1, 0, 8, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 8],"float32"), Tensor([1, 8, 0, 32],"float32"), )
paddle.matmul(Tensor([1, 8, 32, 0],"float32"), Tensor([1, 8, 8, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 64, 16],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 64, 16],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 0],"float32"), Tensor([1, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([0, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 0, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 16],"float32"), Tensor([1, 8, 64, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 64, 16],"float32"), Tensor([0, 8, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 0, 64, 16],"float32"), Tensor([1, 0, 64, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 0, 16],"float32"), Tensor([1, 8, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([1, 8, 64, 0],"float32"), Tensor([1, 8, 64, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 64, 64],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 0],"float32"), Tensor([1, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([0, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([1, 0, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([1, 8, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 64],"float32"), Tensor([1, 8, 64, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 64, 64],"float32"), Tensor([0, 8, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 0, 64, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 0, 64],"float32"), Tensor([1, 8, 0, 16],"float32"), )
paddle.matmul(Tensor([1, 8, 64, 0],"float32"), Tensor([1, 8, 64, 0],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.matmul(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([10, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10, 16],"float32"), )
paddle.matmul(Tensor([10, 0],"float32"), Tensor([10, 16],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10, 0],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10, 10],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([10],"float32"), )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0],"float32"), Tensor([10],"float32"), True, True, )
paddle.matmul(Tensor([10],"float32"), Tensor([0],"float32"), True, True, )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), True, True, )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([100, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([40, 21],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([40, 21],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([0, 21],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([0, 21],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([100, 0],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([100, 40],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 40],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 1000],"float32"), Tensor([1000, 1000],"float32"), )
paddle.matmul(Tensor([1000, 0],"float32"), Tensor([1000, 1000],"float32"), )
paddle.matmul(Tensor([1000, 1000],"float32"), Tensor([0, 1000],"float32"), )
paddle.matmul(Tensor([1000, 1000],"float32"), Tensor([1000, 0],"float32"), )
paddle.matmul(Tensor([0, 1000],"float32"), Tensor([0, 1000],"float32"), )
paddle.matmul(Tensor([1000, 0],"float32"), Tensor([1000, 0],"float32"), )
paddle.matmul(Tensor([0, 1024],"float32"), Tensor([1024, 1024],"float32"), )
paddle.matmul(Tensor([1024, 0],"float32"), Tensor([1024, 1024],"float32"), )
paddle.matmul(Tensor([1024, 1024],"float32"), Tensor([0, 1024],"float32"), )
paddle.matmul(Tensor([1024, 1024],"float32"), Tensor([1024, 0],"float32"), )
paddle.matmul(Tensor([0, 1024],"float32"), Tensor([0, 1024],"float32"), )
paddle.matmul(Tensor([1024, 0],"float32"), Tensor([1024, 0],"float32"), )
paddle.matmul(Tensor([0, 32],"float16"), Tensor([12, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float16"), Tensor([12, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([0, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float16"), Tensor([12, 0],"float16"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float16"), Tensor([0, 128],"float16"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float16"), Tensor([12, 0],"float16"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([12, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float32"), Tensor([12, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([0, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 32],"float32"), Tensor([12, 0],"float32"), transpose_x=True, )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([0, 128],"float32"), transpose_x=True, )
paddle.matmul(Tensor([12, 0],"float32"), Tensor([12, 0],"float32"), transpose_x=True, )
paddle.matmul(Tensor([0, 8],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([15, 0],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([15, 8],"float16"), Tensor([0, 6],"float16"), )
paddle.matmul(Tensor([15, 8],"float16"), Tensor([8, 0],"float16"), )
paddle.matmul(Tensor([0, 8],"float16"), Tensor([0, 6],"float16"), )
paddle.matmul(Tensor([15, 0],"float16"), Tensor([8, 0],"float16"), )
paddle.matmul(Tensor([0, 8],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([15, 0],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([15, 8],"float32"), Tensor([0, 6],"float32"), )
paddle.matmul(Tensor([15, 8],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([0, 8],"float32"), Tensor([0, 6],"float32"), )
paddle.matmul(Tensor([15, 0],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([16, 0, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([16, 1, 0],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([16, 1, 8],"float32"), Tensor([0, 128],"float32"), )
paddle.matmul(Tensor([16, 1, 8],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([0, 12],"float32"), Tensor([12, 10],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([12, 10],"float32"), )
paddle.matmul(Tensor([16, 12],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([16, 12],"float32"), Tensor([12, 0],"float32"), )
paddle.matmul(Tensor([0, 12],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([12, 0],"float32"), )
paddle.matmul(Tensor([0, 12],"float64"), Tensor([12, 10],"float64"), )
paddle.matmul(Tensor([16, 0],"float64"), Tensor([12, 10],"float64"), )
paddle.matmul(Tensor([16, 12],"float64"), Tensor([0, 10],"float64"), )
paddle.matmul(Tensor([16, 12],"float64"), Tensor([12, 0],"float64"), )
paddle.matmul(Tensor([0, 12],"float64"), Tensor([0, 10],"float64"), )
paddle.matmul(Tensor([16, 0],"float64"), Tensor([12, 0],"float64"), )
paddle.matmul(Tensor([0, 128, 32, 128],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 0, 32, 128],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 0, 128],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 0],"float32"), Tensor([16, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([0, 128, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([16, 0, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([16, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 128],"float32"), Tensor([16, 128, 128, 0],"float32"), )
paddle.matmul(Tensor([16, 0, 32, 128],"float32"), Tensor([16, 0, 128, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 0, 128],"float32"), Tensor([16, 128, 0, 32],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 0],"float32"), Tensor([16, 128, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 128, 32, 32],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 0, 32, 32],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 0, 32],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 0],"float32"), Tensor([16, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([0, 128, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([16, 0, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([16, 128, 0, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 32],"float32"), Tensor([16, 128, 32, 0],"float32"), )
paddle.matmul(Tensor([16, 0, 32, 32],"float32"), Tensor([16, 0, 32, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 0, 32],"float32"), Tensor([16, 128, 0, 128],"float32"), )
paddle.matmul(Tensor([16, 128, 32, 0],"float32"), Tensor([16, 128, 32, 0],"float32"), )
paddle.matmul(Tensor([0, 128],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([16, 128],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([16, 128],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([0, 128],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 12],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 0, 12],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 0],"float32"), Tensor([16, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 12],"float32"), Tensor([0, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 12],"float32"), Tensor([16, 0, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 12],"float32"), Tensor([16, 12, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 12],"float32"), Tensor([0, 12, 10],"float32"), )
paddle.matmul(Tensor([16, 0, 12],"float32"), Tensor([16, 0, 10],"float32"), )
paddle.matmul(Tensor([16, 16, 0],"float32"), Tensor([16, 12, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 0, 128, 128],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 128],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([0, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 0, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 0, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 128, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float64"), Tensor([0, 16, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 0, 128, 128],"float64"), Tensor([16, 0, 128, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 128],"float64"), Tensor([16, 16, 0, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 0, 128, 128],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 128],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([0, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 0, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 128, 128],"float64"), Tensor([16, 16, 0, 32],"float64"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float64"), Tensor([0, 16, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 0, 128, 128],"float64"), Tensor([16, 0, 128, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 128],"float64"), Tensor([16, 16, 0, 32],"float64"), )
paddle.matmul(Tensor([0, 16, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([0, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 0, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 16],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 16],"float64"), Tensor([0, 16, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 16],"float64"), Tensor([16, 0, 128, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 0],"float64"), Tensor([16, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([0, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 0, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 128, 32],"float64"), Tensor([16, 16, 128, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 128, 32],"float64"), Tensor([0, 16, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 128, 32],"float64"), Tensor([16, 0, 128, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 5, 5],"float32"), Tensor([16, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 0, 5, 5],"float32"), Tensor([16, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 0, 5],"float32"), Tensor([16, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 0],"float32"), Tensor([16, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([0, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([16, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([16, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 5],"float32"), Tensor([16, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([0, 16, 5, 5],"float32"), Tensor([0, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 0, 5, 5],"float32"), Tensor([16, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 0, 5],"float32"), Tensor([16, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([16, 16, 5, 0],"float32"), Tensor([16, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([0, 16, 512, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 16],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([0, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 0, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 0, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 16],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 16],"float64"), Tensor([0, 16, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 16],"float64"), Tensor([16, 0, 512, 16],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 32],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([0, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 0, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 0, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 32],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 32],"float64"), Tensor([0, 16, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 32],"float64"), Tensor([16, 0, 512, 32],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([0, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 0, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 0, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 512, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([0, 16, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 0, 512, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 0, 16],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([0, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 0, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 0, 32],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([0, 16, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 0, 512, 32],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 0, 32],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([0, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 0, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 512, 512],"float64"), Tensor([16, 16, 0, 64],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 512],"float64"), Tensor([0, 16, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 0, 512, 512],"float64"), Tensor([16, 0, 512, 64],"float64"), )
paddle.matmul(Tensor([16, 16, 0, 512],"float64"), Tensor([16, 16, 0, 64],"float64"), )
paddle.matmul(Tensor([0, 16, 512, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 0],"float64"), Tensor([16, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([0, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 0, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 512, 64],"float64"), Tensor([16, 16, 512, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 16, 512, 64],"float64"), Tensor([0, 16, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 0, 512, 64],"float64"), Tensor([16, 0, 512, 64],"float64"), False, True, )
paddle.matmul(Tensor([16, 16, 0, 64],"float64"), Tensor([16, 16, 0, 64],"float64"), False, True, )
paddle.matmul(Tensor([0, 784],"float32"), Tensor([784, 784],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([784, 784],"float32"), )
paddle.matmul(Tensor([16, 784],"float32"), Tensor([0, 784],"float32"), )
paddle.matmul(Tensor([16, 784],"float32"), Tensor([784, 0],"float32"), )
paddle.matmul(Tensor([0, 784],"float32"), Tensor([0, 784],"float32"), )
paddle.matmul(Tensor([16, 0],"float32"), Tensor([784, 0],"float32"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([0, 17],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([0, 17],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([1, 4],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([1, 4],"float64"), )
paddle.matmul(Tensor([17, 1],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([17, 16],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([17, 16],"float64"), )
paddle.matmul(Tensor([17, 17],"float64"), Tensor([0, 16],"float64"), )
paddle.matmul(Tensor([17, 17],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([0, 16],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([17, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([17, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 0, 100],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 1, 0],"complex128"), Tensor([100],"complex128"), )
paddle.matmul(Tensor([2, 1, 100],"complex128"), Tensor([0],"complex128"), )
paddle.matmul(Tensor([0, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 0, 100],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 1, 0],"complex64"), Tensor([100],"complex64"), )
paddle.matmul(Tensor([2, 1, 100],"complex64"), Tensor([0],"complex64"), )
paddle.matmul(Tensor([0, 1, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([2, 0, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([2, 1, 0],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([2, 1, 16],"float32"), Tensor([0, 128],"float32"), )
paddle.matmul(Tensor([2, 1, 16],"float32"), Tensor([16, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float16"), Tensor([1, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([0, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 0, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 0, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float16"), Tensor([1, 3, 2, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float16"), Tensor([0, 3, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float16"), Tensor([1, 0, 2, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float16"), Tensor([1, 3, 0, 4],"float16"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float16"), Tensor([1, 3, 2, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float32"), Tensor([1, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([0, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 0, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 0, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float32"), Tensor([1, 3, 2, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float32"), Tensor([0, 3, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float32"), Tensor([1, 0, 2, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float32"), Tensor([1, 3, 0, 4],"float32"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float32"), Tensor([1, 3, 2, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float64"), Tensor([1, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([0, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 0, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 2],"float64"), Tensor([1, 3, 2, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 1, 5, 2],"float64"), Tensor([0, 3, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 5, 2],"float64"), Tensor([1, 0, 2, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 0, 2],"float64"), Tensor([1, 3, 0, 4],"float64"), False, False, )
paddle.matmul(Tensor([2, 1, 5, 0],"float64"), Tensor([1, 3, 2, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 1],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([2, 1],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0, 100],"float32"), Tensor([100, 2],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([100, 2],"float32"), )
paddle.matmul(Tensor([2, 100],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([2, 100],"float32"), Tensor([100, 0],"float32"), )
paddle.matmul(Tensor([0, 100],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([100, 0],"float32"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 0],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 0],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([2, 128],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([2, 128],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([0, 2, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float16"), Tensor([2, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([0, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 0, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float16"), Tensor([2, 3, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float16"), Tensor([0, 3, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 2],"float16"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float16"), Tensor([2, 3, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 0, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float32"), Tensor([2, 3, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float32"), Tensor([0, 3, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 2],"float32"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float32"), Tensor([2, 3, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float64"), Tensor([1, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([0, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 0, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([1, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([0, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([1, 0, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float64"), Tensor([1, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 2, 3],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float64"), Tensor([2, 3, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 0, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 0, 2],"float64"), False, False, )
paddle.matmul(Tensor([2, 2, 0],"float64"), Tensor([2, 3, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([2, 1],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([0, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([0, 1],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([2],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([50000, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([50000, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([0, 2, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([50000, 0, 1],"float32"), )
paddle.matmul(Tensor([2, 2],"float32"), Tensor([50000, 2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([2, 0],"float64"), Tensor([2, 2],"float64"), )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 2],"float64"), Tensor([2, 0],"float64"), )
paddle.matmul(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), )
paddle.matmul(Tensor([0, 24],"float32"), Tensor([24, 24],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([24, 24],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 24],"float32"), Tensor([0, 24],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 24],"float32"), Tensor([24, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 24],"float32"), Tensor([0, 24],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([24, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([0, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 0, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([0, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([2, 0, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([0, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 0, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([0, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([2, 0, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 0, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 40, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([0, 3, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 0, 40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 40, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 0, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([0, 3, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 0, 40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([2, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 0, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([2, 3, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([0, 3, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([2, 0, 40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([2, 3, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 100, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 0],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 100, 40],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 0],"float64"), Tensor([2, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([0, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 0, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([0, 3, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([2, 0, 4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 0],"float64"), Tensor([2, 3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 0],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([0, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 0, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([0, 3, 4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([2, 0, 4, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 0, 2, 5, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 0, 5, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 0, 5],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 0],"float16"), Tensor([2, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([0, 3, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float16"), Tensor([2, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([2, 0, 2, 5, 5],"float16"), Tensor([2, 0, 2, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 0, 5, 5],"float16"), Tensor([2, 3, 0, 5, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 0, 5],"float16"), Tensor([2, 3, 2, 0, 4],"float16"), )
paddle.matmul(Tensor([2, 3, 2, 5, 0],"float16"), Tensor([2, 3, 2, 5, 0],"float16"), )
paddle.matmul(Tensor([0, 3, 2, 5, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 0, 2, 5, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 0, 5, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 0, 5],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 0],"float32"), Tensor([2, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([0, 3, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 5],"float32"), Tensor([2, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([2, 0, 2, 5, 5],"float32"), Tensor([2, 0, 2, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 0, 5, 5],"float32"), Tensor([2, 3, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 0, 5],"float32"), Tensor([2, 3, 2, 0, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 2, 5, 0],"float32"), Tensor([2, 3, 2, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 100],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 100],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([0, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 0, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 100],"float64"), Tensor([0, 3, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 100],"float64"), Tensor([2, 0, 100, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 100],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 100],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([0, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 0, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 100],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 100],"float64"), Tensor([0, 3, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 100],"float64"), Tensor([2, 0, 100, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 17],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 17],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 17],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([0, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 0, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 17, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 17],"float64"), Tensor([0, 3, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 17],"float64"), Tensor([2, 0, 17, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 17],"float64"), Tensor([2, 3, 0, 2],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 17, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 17],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 17],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 17],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([0, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 0, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 17],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 17],"float64"), Tensor([0, 3, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 17],"float64"), Tensor([2, 0, 17, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 17],"float64"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 0, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 0, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 0],"complex128"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex128"), Tensor([0, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex128"), Tensor([2, 0, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex128"), Tensor([2, 3, 0, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex128"), Tensor([2, 3, 5, 0],"complex128"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([0, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 0, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex128"), Tensor([0, 3, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex128"), Tensor([2, 0, 5, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex128"), Tensor([2, 3, 0, 4],"float64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex128"), Tensor([2, 3, 5, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 0, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 0, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 0],"complex64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex64"), Tensor([0, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex64"), Tensor([2, 0, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex64"), Tensor([2, 3, 0, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex64"), Tensor([2, 3, 5, 0],"complex64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([0, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 0, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 4, 5],"complex64"), Tensor([0, 3, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 0, 4, 5],"complex64"), Tensor([2, 0, 5, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 0, 5],"complex64"), Tensor([2, 3, 0, 4],"float32"), )
paddle.matmul(Tensor([2, 3, 4, 0],"complex64"), Tensor([2, 3, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 4, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([0, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 0, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 0, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 5, 0],"complex64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"float32"), Tensor([0, 3, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 0, 4, 5],"float32"), Tensor([2, 0, 5, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 0, 5],"float32"), Tensor([2, 3, 0, 4],"complex64"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float32"), Tensor([2, 3, 5, 0],"complex64"), )
paddle.matmul(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5, 0],"complex128"), )
paddle.matmul(Tensor([0, 3, 4, 5],"float64"), Tensor([0, 3, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 0, 5, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 0, 4],"complex128"), )
paddle.matmul(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 5, 0],"complex128"), )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([0, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 0, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 4, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([0, 4, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 0, 5],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 4, 0],"float16"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([0, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 0, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([2, 5, 0],"float16"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([0, 5, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([2, 0, 4],"float16"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([2, 5, 0],"float16"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float16"), Tensor([4],"float16"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 4, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([0, 4, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 5],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 4, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 0, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([2, 5, 0],"float32"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([0, 5, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([2, 5, 0],"float32"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float32"), Tensor([4],"float32"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([0, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 0, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 4, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 4, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 0, 5],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 4, 0],"float64"), False, False, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([0, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([2, 5, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([0, 5, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([2, 0, 4],"float64"), False, True, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([2, 5, 0],"float64"), False, True, )
paddle.matmul(Tensor([0, 3, 4],"float64"), Tensor([4],"float64"), False, False, )
paddle.matmul(Tensor([2, 0, 4],"float64"), Tensor([4],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 0],"float64"), Tensor([4],"float64"), False, False, )
paddle.matmul(Tensor([2, 3, 4],"float64"), Tensor([0],"float64"), False, False, )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([2, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 0, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([0, 3, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 0, 100, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 0, 12],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([2, 3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([2, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 0, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([0, 3, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 0, 100, 6],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 0],"float64"), Tensor([2, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([0, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 0, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 40, 100],"float64"), Tensor([2, 3, 0, 8],"float64"), )
paddle.matmul(Tensor([0, 3, 40, 100],"float64"), Tensor([0, 3, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 40, 100],"float64"), Tensor([2, 0, 100, 8],"float64"), )
paddle.matmul(Tensor([2, 3, 0, 100],"float64"), Tensor([2, 3, 0, 8],"float64"), )
paddle.matmul(Tensor([2, 0, 5, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 0, 6],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 5, 0],"float16"), Tensor([6, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float16"), Tensor([0, 8],"float16"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float16"), Tensor([6, 0],"float16"), )
paddle.matmul(Tensor([2, 0, 5, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([2, 3, 0, 6],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([2, 3, 5, 0],"float32"), Tensor([6, 8],"float32"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float32"), Tensor([0, 8],"float32"), )
paddle.matmul(Tensor([2, 3, 5, 6],"float32"), Tensor([6, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float16"), Tensor([3],"float16"), False, False, )
paddle.matmul(Tensor([2, 0],"float16"), Tensor([3],"float16"), False, False, )
paddle.matmul(Tensor([2, 3],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([2, 3],"float32"), True, False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2, 3],"float32"), True, False, )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([0, 3],"float32"), True, False, )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([2, 0],"float32"), True, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), True, False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([2, 0],"float32"), True, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 5],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([3, 5],"float32"), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([0, 5],"float32"), )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 5],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3],"float32"), False, False, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([3],"float32"), False, False, )
paddle.matmul(Tensor([2, 3],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([3],"float64"), False, False, )
paddle.matmul(Tensor([2, 0],"float64"), Tensor([3],"float64"), False, False, )
paddle.matmul(Tensor([2, 3],"float64"), Tensor([0],"float64"), False, False, )
paddle.matmul(Tensor([0, 32, 1, 33],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 33],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 0, 33],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 0],"float16"), Tensor([2, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([0, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([2, 0, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([2, 32, 0, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 33],"float16"), Tensor([2, 32, 33, 0],"float16"), )
paddle.matmul(Tensor([0, 32, 1, 33],"float16"), Tensor([0, 32, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 33],"float16"), Tensor([2, 0, 33, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 0, 33],"float16"), Tensor([2, 32, 0, 128],"float16"), )
paddle.matmul(Tensor([2, 32, 1, 0],"float16"), Tensor([2, 32, 33, 0],"float16"), )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([0, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 0, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 4, 0],"float16"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([0, 4, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 5],"float16"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 4, 0],"float16"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([0, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 0, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float16"), Tensor([2, 5, 0],"float16"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float16"), Tensor([0, 5, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float16"), Tensor([2, 0, 4],"float16"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float16"), Tensor([2, 5, 0],"float16"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([0, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 0, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 4, 0],"float32"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([0, 4, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 5],"float32"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 4, 0],"float32"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([0, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 0, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float32"), Tensor([2, 5, 0],"float32"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float32"), Tensor([0, 5, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float32"), Tensor([2, 0, 4],"float32"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float32"), Tensor([2, 5, 0],"float32"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([0, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 0, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 4, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 0, 5],"float64"), True, False, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 4, 0],"float64"), True, False, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([0, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 0, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 3],"float64"), Tensor([2, 5, 0],"float64"), True, True, )
paddle.matmul(Tensor([0, 4, 3],"float64"), Tensor([0, 5, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 0, 3],"float64"), Tensor([2, 0, 4],"float64"), True, True, )
paddle.matmul(Tensor([2, 4, 0],"float64"), Tensor([2, 5, 0],"float64"), True, True, )
paddle.matmul(Tensor([0, 42],"float32"), Tensor([42, 42],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([42, 42],"float32"), )
paddle.matmul(Tensor([2, 42],"float32"), Tensor([0, 42],"float32"), )
paddle.matmul(Tensor([2, 42],"float32"), Tensor([42, 0],"float32"), )
paddle.matmul(Tensor([0, 42],"float32"), Tensor([0, 42],"float32"), )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([42, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 1, 129],"float16"), Tensor([2, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 129],"float16"), Tensor([2, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 129],"float16"), Tensor([2, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 129],"float16"), Tensor([0, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 129],"float16"), Tensor([2, 0, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 129],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 129],"float16"), Tensor([2, 8, 129, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 1, 129],"float16"), Tensor([0, 8, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 129],"float16"), Tensor([2, 0, 129, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 129],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 129, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 1, 64],"float16"), Tensor([2, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([0, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 0, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 0, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 129, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 1, 64],"float16"), Tensor([0, 8, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 129, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 0, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 129, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 1, 64],"float16"), Tensor([2, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([0, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 0, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 64],"float16"), Tensor([2, 8, 65, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 1, 64],"float16"), Tensor([0, 8, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 1, 64],"float16"), Tensor([2, 0, 65, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 65, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 1, 65],"float16"), Tensor([2, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 65],"float16"), Tensor([2, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 65],"float16"), Tensor([2, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 65],"float16"), Tensor([0, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 65],"float16"), Tensor([2, 0, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 65],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 65],"float16"), Tensor([2, 8, 65, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 1, 65],"float16"), Tensor([0, 8, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 1, 65],"float16"), Tensor([2, 0, 65, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 65],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 1, 0],"float16"), Tensor([2, 8, 65, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 64, 128],"float16"), Tensor([2, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 64, 128],"float16"), Tensor([2, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 128],"float16"), Tensor([2, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 128],"float16"), Tensor([0, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 128],"float16"), Tensor([2, 0, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 128],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 128],"float16"), Tensor([2, 8, 128, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 64, 128],"float16"), Tensor([0, 8, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 64, 128],"float16"), Tensor([2, 0, 128, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 128],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 128, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([2, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([0, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 0, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 0, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 128, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([0, 8, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 0, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 128, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([0, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 0, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([0, 8, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 0, 64, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 0, 64],"float16"), )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 64, 0],"float16"), )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 0, 64],"float16"), Tensor([2, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([0, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 0, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 64],"float16"), Tensor([2, 8, 64, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 64, 64],"float16"), Tensor([0, 8, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 0, 64, 64],"float16"), Tensor([2, 0, 64, 64],"float16"), transpose_y=True, )
paddle.matmul(Tensor([2, 8, 64, 0],"float16"), Tensor([2, 8, 64, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 8],"float32"), Tensor([2, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 0, 8],"float32"), Tensor([2, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 8, 0],"float32"), Tensor([2, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 8, 8],"float32"), Tensor([0, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 8, 8],"float32"), Tensor([2, 0, 16],"float32"), )
paddle.matmul(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 8],"float32"), Tensor([0, 8, 16],"float32"), )
paddle.matmul(Tensor([2, 0, 8],"float32"), Tensor([2, 0, 16],"float32"), )
paddle.matmul(Tensor([2, 8, 0],"float32"), Tensor([2, 8, 0],"float32"), )
paddle.matmul(Tensor([0, 8],"float32"), Tensor([24, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 0],"float32"), Tensor([24, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 8],"float32"), Tensor([0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([2, 8],"float32"), Tensor([24, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 8],"float32"), Tensor([0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([0, 3],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([2, 0],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([2],"float16"), False, False, )
paddle.matmul(Tensor([2],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([0],"float16"), False, False, )
paddle.matmul(Tensor([0],"float16"), Tensor([3, 2],"float16"), False, True, )
paddle.matmul(Tensor([2],"float16"), Tensor([0, 2],"float16"), False, True, )
paddle.matmul(Tensor([2],"float16"), Tensor([3, 0],"float16"), False, True, )
paddle.matmul(Tensor([0],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([2, 0],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([2],"float32"), False, False, )
paddle.matmul(Tensor([2],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0],"float32"), Tensor([3, 2],"float32"), False, True, )
paddle.matmul(Tensor([2],"float32"), Tensor([0, 2],"float32"), False, True, )
paddle.matmul(Tensor([2],"float32"), Tensor([3, 0],"float32"), False, True, )
paddle.matmul(Tensor([0],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.matmul(Tensor([2],"float64"), Tensor([0, 3],"float64"), False, False, )
paddle.matmul(Tensor([2],"float64"), Tensor([2, 0],"float64"), False, False, )
paddle.matmul(Tensor([0],"float64"), Tensor([2],"float64"), False, False, )
paddle.matmul(Tensor([2],"float64"), Tensor([0],"float64"), False, False, )
paddle.matmul(Tensor([0],"float64"), Tensor([0],"float64"), False, False, )
paddle.matmul(Tensor([0],"float64"), Tensor([3, 2],"float64"), False, True, )
paddle.matmul(Tensor([2],"float64"), Tensor([0, 2],"float64"), False, True, )
paddle.matmul(Tensor([2],"float64"), Tensor([3, 0],"float64"), False, True, )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([1],"float32"), False, False, )
paddle.matmul(Tensor([3, 1],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 100, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([3, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 0, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 40, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 0, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 40, 0],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([3, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 0, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 100, 40],"float64"), Tensor([3, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([3, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([3, 0, 8],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([3, 0, 8],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([40, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([40, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([40, 6],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 40],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 0],"float64"), Tensor([40, 8],"float64"), )
paddle.matmul(Tensor([3, 100, 40],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 16, 64, 32],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 0, 64, 32],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 0, 32],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 0],"float16"), Tensor([3, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([0, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 0, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 16, 0, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 32],"float16"), Tensor([3, 16, 64, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 16, 64, 32],"float16"), Tensor([0, 16, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 0, 64, 32],"float16"), Tensor([3, 0, 64, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 0, 32],"float16"), Tensor([3, 16, 0, 32],"float16"), transpose_y=True, )
paddle.matmul(Tensor([3, 16, 64, 0],"float16"), Tensor([3, 16, 64, 0],"float16"), transpose_y=True, )
paddle.matmul(Tensor([0, 16, 64, 64],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 0, 64, 64],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 0, 64],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 0],"float16"), Tensor([3, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([0, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([3, 0, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([3, 16, 0, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 64],"float16"), Tensor([3, 16, 64, 0],"float16"), )
paddle.matmul(Tensor([0, 16, 64, 64],"float16"), Tensor([0, 16, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 0, 64, 64],"float16"), Tensor([3, 0, 64, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 0, 64],"float16"), Tensor([3, 16, 0, 32],"float16"), )
paddle.matmul(Tensor([3, 16, 64, 0],"float16"), Tensor([3, 16, 64, 0],"float16"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 0],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([0, 4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.matmul(Tensor([3, 17, 0],"float64"), Tensor([3, 4, 0],"float64"), )
paddle.matmul(Tensor([0, 17, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 0],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([0, 4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 0],"float64"), Tensor([4, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.matmul(Tensor([3, 17, 0],"float64"), Tensor([4, 4],"float64"), )
paddle.matmul(Tensor([3, 17, 4],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 2, 2],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 0, 2],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 2, 0],"float32"), Tensor([1, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 2, 2],"float32"), Tensor([0, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 2, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.matmul(Tensor([3, 2, 2],"float32"), Tensor([1, 2, 0],"float32"), )
paddle.matmul(Tensor([0, 2, 2],"float32"), Tensor([0, 2, 2],"float32"), )
paddle.matmul(Tensor([3, 0, 2],"float32"), Tensor([1, 0, 2],"float32"), )
paddle.matmul(Tensor([3, 2, 0],"float32"), Tensor([1, 2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([3, 2],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([3, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 2],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), False, False, )
paddle.matmul(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), False, False, )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 0],"float64"), Tensor([2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([2, 0, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([2, 3, 0],"float64"), )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([3, 1],"float64"), )
paddle.matmul(Tensor([3, 0],"float64"), Tensor([3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([3, 0],"float64"), )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([0, 1],"float64"), )
paddle.matmul(Tensor([3, 0],"float64"), Tensor([3, 0],"float64"), )
paddle.matmul(Tensor([0, 3],"float64"), Tensor([50000, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 0],"float64"), Tensor([50000, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([0, 2, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 0, 3, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 2, 0, 1],"float64"), )
paddle.matmul(Tensor([3, 3],"float64"), Tensor([50000, 2, 3, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([3, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([0, 100, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 100, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 100],"float64"), Tensor([3, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([0, 100, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 100],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([3, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 0, 17],"float64"), Tensor([3, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([0, 17, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 17, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 17],"float64"), Tensor([3, 0, 2],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 17, 0],"float64"), )
paddle.matmul(Tensor([0, 4, 17],"float64"), Tensor([3, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 17],"float64"), Tensor([3, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 0],"float64"), Tensor([3, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([0, 17, 4],"float64"), )
paddle.matmul(Tensor([3, 4, 17],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 17],"float64"), Tensor([3, 0, 4],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([3, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([3, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 100, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 0, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 100, 0],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 0, 12],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([3, 100, 0],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([3, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([3, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 100, 6],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 0, 6],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 0, 6],"float64"), )
paddle.matmul(Tensor([0, 40, 100],"float64"), Tensor([3, 100, 8],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 0],"float64"), Tensor([3, 100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([0, 100, 8],"float64"), )
paddle.matmul(Tensor([3, 40, 100],"float64"), Tensor([3, 0, 8],"float64"), )
paddle.matmul(Tensor([3, 0, 100],"float64"), Tensor([3, 0, 8],"float64"), )
paddle.matmul(Tensor([0],"float32"), Tensor([3],"float32"), False, False, )
paddle.matmul(Tensor([3],"float32"), Tensor([0],"float32"), False, False, )
paddle.matmul(Tensor([0, 1, 40, 200],"float32"), Tensor([1, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 0, 40, 200],"float32"), Tensor([1, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 0, 200],"float32"), Tensor([1, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 0],"float32"), Tensor([1, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 200],"float32"), Tensor([0, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 200],"float32"), Tensor([1, 0, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 200],"float32"), Tensor([1, 30, 0, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 200],"float32"), Tensor([1, 30, 200, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 40, 200],"float32"), Tensor([0, 30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 0, 40, 200],"float32"), Tensor([1, 0, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 0, 200],"float32"), Tensor([1, 30, 0, 40],"float32"), )
paddle.matmul(Tensor([30, 1, 40, 0],"float32"), Tensor([1, 30, 200, 0],"float32"), )
paddle.matmul(Tensor([0, 40, 200],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 0, 200],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 200],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 200],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 200],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.matmul(Tensor([0, 40, 200],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.matmul(Tensor([30, 0, 200],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.matmul(Tensor([30, 40, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.matmul(Tensor([30, 0],"float16"), Tensor([8, 6],"float16"), )
paddle.matmul(Tensor([30, 8],"float16"), Tensor([0, 6],"float16"), )
paddle.matmul(Tensor([30, 8],"float16"), Tensor([8, 0],"float16"), )
paddle.matmul(Tensor([30, 0],"float16"), Tensor([8, 0],"float16"), )
paddle.matmul(Tensor([30, 0],"float32"), Tensor([8, 6],"float32"), )
paddle.matmul(Tensor([30, 8],"float32"), Tensor([0, 6],"float32"), )
paddle.matmul(Tensor([30, 8],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([30, 0],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 5, 5],"float32"), Tensor([32, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 0, 5, 5],"float32"), Tensor([32, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 0, 5],"float32"), Tensor([32, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 0],"float32"), Tensor([32, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([0, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([32, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([32, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 5],"float32"), Tensor([32, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 0, 5, 5],"float32"), Tensor([32, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 0, 5],"float32"), Tensor([32, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 16, 5, 0],"float32"), Tensor([32, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([32, 0],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([32, 32],"float64"), Tensor([0, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([32, 32],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([32, 0],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 8, 4, 4],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 0, 4, 4],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 0, 4],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 0],"float32"), Tensor([32, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([0, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([32, 0, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([32, 8, 0, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 4],"float32"), Tensor([32, 8, 4, 0],"float32"), )
paddle.matmul(Tensor([0, 8, 4, 4],"float32"), Tensor([0, 8, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 0, 4, 4],"float32"), Tensor([32, 0, 4, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 0, 4],"float32"), Tensor([32, 8, 0, 64],"float32"), )
paddle.matmul(Tensor([32, 8, 4, 0],"float32"), Tensor([32, 8, 4, 0],"float32"), )
paddle.matmul(Tensor([4, 0, 8],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([4, 1, 0],"float32"), Tensor([8, 128],"float32"), )
paddle.matmul(Tensor([4, 1, 8],"float32"), Tensor([0, 128],"float32"), )
paddle.matmul(Tensor([4, 1, 8],"float32"), Tensor([8, 0],"float32"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([1, 17],"float64"), )
paddle.matmul(Tensor([4, 1],"float64"), Tensor([0, 17],"float64"), )
paddle.matmul(Tensor([4, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([0, 10, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 0, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 10, 0],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 10, 10],"float32"), Tensor([0, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 10, 10],"float32"), Tensor([20, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([10, 3],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([10, 3],"float32"), )
paddle.matmul(Tensor([4, 10],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([4, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 10],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([100, 2],"float64"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 4],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([100, 4],"float64"), )
paddle.matmul(Tensor([4, 100],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 12, 64, 88],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 0, 64, 88],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 0, 88],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 0],"float32"), Tensor([4, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([0, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([4, 0, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([4, 12, 0, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 88],"float32"), Tensor([4, 12, 88, 0],"float32"), )
paddle.matmul(Tensor([0, 12, 64, 88],"float32"), Tensor([0, 12, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 0, 64, 88],"float32"), Tensor([4, 0, 88, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 0, 88],"float32"), Tensor([4, 12, 0, 512],"float32"), )
paddle.matmul(Tensor([4, 12, 64, 0],"float32"), Tensor([4, 12, 88, 0],"float32"), )
paddle.matmul(Tensor([0, 16],"float32"), Tensor([16, 20],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([16, 20],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([16, 0],"float32"), )
paddle.matmul(Tensor([0, 16],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([16, 0],"float32"), )
paddle.matmul(Tensor([0, 16],"float32"), Tensor([32, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([32, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float32"), Tensor([32, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float32"), Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([32, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([128, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([128, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([0, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([0, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([16, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([16, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([16, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([16, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([32, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([32, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([32, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([32, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([48, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([48, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([48, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([48, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 16],"float64"), Tensor([96, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([96, 16],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 16],"float64"), Tensor([96, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([96, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([17, 2],"float64"), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([0, 2],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([17, 0],"float64"), )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([17, 4],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([17, 4],"float64"), )
paddle.matmul(Tensor([4, 17],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 17],"float64"), Tensor([0, 4],"float64"), )
paddle.matmul(Tensor([0, 22],"float32"), Tensor([22, 20],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([22, 20],"float32"), )
paddle.matmul(Tensor([4, 22],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([4, 22],"float32"), Tensor([22, 0],"float32"), )
paddle.matmul(Tensor([0, 22],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([22, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([4, 0, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([4, 3, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 10],"float32"), Tensor([10, 1000],"float32"), )
paddle.matmul(Tensor([4, 0, 10],"float32"), Tensor([10, 1000],"float32"), )
paddle.matmul(Tensor([4, 3, 0],"float32"), Tensor([10, 1000],"float32"), )
paddle.matmul(Tensor([4, 3, 10],"float32"), Tensor([0, 1000],"float32"), )
paddle.matmul(Tensor([0, 3, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.matmul(Tensor([4, 0, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.matmul(Tensor([4, 3, 0],"float64"), Tensor([10, 10],"float64"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.matmul(Tensor([0, 3, 10],"float64"), Tensor([10, 1000],"float64"), )
paddle.matmul(Tensor([4, 0, 10],"float64"), Tensor([10, 1000],"float64"), )
paddle.matmul(Tensor([4, 3, 0],"float64"), Tensor([10, 1000],"float64"), )
paddle.matmul(Tensor([4, 3, 10],"float64"), Tensor([0, 1000],"float64"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 2],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([3, 2],"float32"), )
paddle.matmul(Tensor([4, 3],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([4, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([32, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([32, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float32"), Tensor([0, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float32"), Tensor([32, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 32],"float32"), Tensor([0, 32],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([128, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([0, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([32, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([32, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([32, 8],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([32, 8],"float64"), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([32, 0],"float64"), )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([32, 0],"float64"), )
paddle.matmul(Tensor([0, 32],"float64"), Tensor([96, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([96, 32],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 32],"float64"), Tensor([96, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 34],"float32"), Tensor([34, 26],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([34, 26],"float32"), )
paddle.matmul(Tensor([4, 34],"float32"), Tensor([0, 26],"float32"), )
paddle.matmul(Tensor([4, 34],"float32"), Tensor([34, 0],"float32"), )
paddle.matmul(Tensor([0, 34],"float32"), Tensor([0, 26],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([34, 0],"float32"), )
paddle.matmul(Tensor([0, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([4, 4],"float32"), )
paddle.matmul(Tensor([4, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([4, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.matmul(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([4, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([4, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([4, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 4],"float64"), Tensor([0, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 4],"float64"), Tensor([4, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 4],"float64"), Tensor([0, 4],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([4, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 5, 10],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 5, 0],"float32"), Tensor([20, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 5, 10],"float32"), Tensor([0, 10],"float32"), transpose_y=True, )
paddle.matmul(Tensor([4, 5, 10],"float32"), Tensor([20, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 8],"float64"), Tensor([128, 8],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 0],"float64"), Tensor([128, 8],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 8],"float64"), Tensor([0, 8],"float64"), transpose_y=True, )
paddle.matmul(Tensor([4, 8],"float64"), Tensor([128, 0],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0, 8],"float64"), Tensor([0, 8],"float64"), transpose_y=True, )
paddle.matmul(Tensor([0],"float64"), Tensor([4],"float64"), )
paddle.matmul(Tensor([4],"float64"), Tensor([0],"float64"), )
paddle.matmul(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([1, 100],"float64"), )
paddle.matmul(Tensor([40, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.matmul(Tensor([40, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([0, 1],"float64"), Tensor([0, 100],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([1, 0],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([100, 12],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 12],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([100, 0],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 21],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([100, 21],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([0, 21],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 21],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([100, 6],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 6],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([40, 0],"float64"), Tensor([100, 8],"float64"), )
paddle.matmul(Tensor([40, 100],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 100],"float64"), Tensor([0, 8],"float64"), )
paddle.matmul(Tensor([0, 1025],"float32"), Tensor([1, 1025, 105],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 1025, 105],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([0, 1025, 105],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 0, 105],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 1025, 0],"float32"), )
paddle.matmul(Tensor([0, 1025],"float32"), Tensor([1, 1025, 120],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 1025, 120],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([0, 1025, 120],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 0, 120],"float32"), )
paddle.matmul(Tensor([0, 1025],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([0, 1025, 431],"float32"), )
paddle.matmul(Tensor([40, 1025],"float32"), Tensor([1, 0, 431],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([0, 257, 1723],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 0, 1723],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 257, 0],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 419],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 257, 419],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([0, 257, 419],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 0, 419],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 480],"float32"), )
paddle.matmul(Tensor([40, 0],"float32"), Tensor([1, 257, 480],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([0, 257, 480],"float32"), )
paddle.matmul(Tensor([40, 257],"float32"), Tensor([1, 0, 480],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([10, 10],"float32"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([0, 10],"float32"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([10, 20],"float32"), )
paddle.matmul(Tensor([5, 10],"float32"), Tensor([0, 20],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([2, 2],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([0, 2],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([2, 0],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([2, 3],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([0, 3],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([2, 4],"float32"), )
paddle.matmul(Tensor([5, 2],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([3, 4],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([3, 4],"float32"), )
paddle.matmul(Tensor([5, 3],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([5, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 3],"float32"), Tensor([0, 4],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.matmul(Tensor([0, 5],"float32"), Tensor([5, 5],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([5, 5],"float32"), )
paddle.matmul(Tensor([5, 5],"float32"), Tensor([0, 5],"float32"), )
paddle.matmul(Tensor([5, 5],"float32"), Tensor([5, 0],"float32"), )
paddle.matmul(Tensor([0, 5],"float32"), Tensor([0, 5],"float32"), )
paddle.matmul(Tensor([5, 0],"float32"), Tensor([5, 0],"float32"), )
paddle.matmul(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.matmul(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), )
paddle.matmul(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.matmul(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.matmul(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.matmul(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.matmul(Tensor([0, 2, 140, 140],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 0, 140, 140],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 0, 140],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 0],"float32"), Tensor([58, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([0, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([58, 0, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([58, 2, 0, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 140],"float32"), Tensor([58, 2, 140, 0],"float32"), )
paddle.matmul(Tensor([0, 2, 140, 140],"float32"), Tensor([0, 2, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 0, 140, 140],"float32"), Tensor([58, 0, 140, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 0, 140],"float32"), Tensor([58, 2, 0, 1],"float32"), )
paddle.matmul(Tensor([58, 2, 140, 0],"float32"), Tensor([58, 2, 140, 0],"float32"), )
paddle.matmul(Tensor([0, 3, 1, 20],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([6, 0, 1, 20],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([6, 3, 0, 20],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([6, 3, 1, 0],"float32"), Tensor([20, 32],"float32"), )
paddle.matmul(Tensor([6, 3, 1, 20],"float32"), Tensor([0, 32],"float32"), )
paddle.matmul(Tensor([6, 3, 1, 20],"float32"), Tensor([20, 0],"float32"), )
paddle.matmul(Tensor([0, 1025],"float32"), Tensor([1, 1025, 112],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 1025, 112],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([0, 1025, 112],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 0, 112],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 1025, 0],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 1025, 431],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([0, 1025, 431],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 0, 431],"float32"), )
paddle.matmul(Tensor([0, 1025],"float32"), Tensor([1, 1025, 74],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 1025, 74],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([0, 1025, 74],"float32"), )
paddle.matmul(Tensor([64, 1025],"float32"), Tensor([1, 0, 74],"float32"), )
paddle.matmul(Tensor([0, 16, 5, 5],"float32"), Tensor([64, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 0, 5, 5],"float32"), Tensor([64, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 0, 5],"float32"), Tensor([64, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 0],"float32"), Tensor([64, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([0, 16, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([64, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([64, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 5],"float32"), Tensor([64, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 0, 5, 5],"float32"), Tensor([64, 0, 5, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 0, 5],"float32"), Tensor([64, 16, 0, 5],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 16, 5, 0],"float32"), Tensor([64, 16, 5, 0],"float32"), False, True, None, )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 1723],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 1723],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 1723],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 257, 0],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 294],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 294],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 294],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 294],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 448],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 448],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 448],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 448],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 480],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 480],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 480],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 493],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 493],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 493],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 493],"float32"), )
paddle.matmul(Tensor([0, 257],"float32"), Tensor([1, 257, 530],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([1, 257, 530],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([0, 257, 530],"float32"), )
paddle.matmul(Tensor([64, 257],"float32"), Tensor([1, 0, 530],"float32"), )
paddle.matmul(Tensor([0, 96],"float32"), Tensor([96, 32],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([96, 32],"float32"), )
paddle.matmul(Tensor([64, 96],"float32"), Tensor([0, 32],"float32"), )
paddle.matmul(Tensor([64, 96],"float32"), Tensor([96, 0],"float32"), )
paddle.matmul(Tensor([0, 96],"float32"), Tensor([0, 32],"float32"), )
paddle.matmul(Tensor([64, 0],"float32"), Tensor([96, 0],"float32"), )
paddle.matmul(Tensor([8, 0, 16],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([16, 128],"float32"), )
paddle.matmul(Tensor([8, 1, 16],"float32"), Tensor([0, 128],"float32"), )
paddle.matmul(Tensor([8, 1, 16],"float32"), Tensor([16, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 4],"float32"), Tensor([8, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 4],"float32"), Tensor([8, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 4],"float32"), Tensor([0, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 4],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 4],"float32"), Tensor([8, 4, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 4],"float32"), Tensor([0, 4, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 4],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 5],"float32"), Tensor([8, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 5],"float32"), Tensor([8, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 5],"float32"), Tensor([0, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 5],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 5],"float32"), Tensor([8, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 5],"float32"), Tensor([0, 5, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 5],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 5, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 6],"float32"), Tensor([8, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 6],"float32"), Tensor([8, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 6],"float32"), Tensor([0, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 6],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 6],"float32"), Tensor([8, 6, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 6],"float32"), Tensor([0, 6, 8],"float32"), )
paddle.matmul(Tensor([8, 0, 6],"float32"), Tensor([8, 0, 8],"float32"), )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 6, 0],"float32"), )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([0, 4, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 0, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([8, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([0, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 5, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([0, 5, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 5, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([8, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 8],"float32"), Tensor([8, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([0, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 8],"float32"), Tensor([8, 6, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 1, 8],"float32"), Tensor([0, 6, 8],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 1, 0],"float32"), Tensor([8, 6, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 128, 256],"float32"), Tensor([768, 256],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 256],"float32"), Tensor([768, 256],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 128, 0],"float32"), Tensor([768, 256],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 128, 256],"float32"), Tensor([0, 256],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 128, 256],"float32"), Tensor([768, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0],"float32"), Tensor([128, 16],"float32"), )
paddle.matmul(Tensor([8, 128],"float32"), Tensor([0, 16],"float32"), )
paddle.matmul(Tensor([8, 128],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([8, 0],"float32"), Tensor([128, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 12],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 0, 12],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 0],"float32"), Tensor([8, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float32"), Tensor([0, 12, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float32"), Tensor([8, 0, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 12],"float32"), Tensor([8, 12, 0],"float32"), )
paddle.matmul(Tensor([8, 0, 12],"float32"), Tensor([8, 0, 10],"float32"), )
paddle.matmul(Tensor([8, 16, 0],"float32"), Tensor([8, 12, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 12],"float64"), Tensor([8, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 0, 12],"float64"), Tensor([8, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 0],"float64"), Tensor([8, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 12],"float64"), Tensor([0, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 12],"float64"), Tensor([8, 0, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 12],"float64"), Tensor([8, 12, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 12],"float64"), Tensor([0, 12, 10],"float64"), )
paddle.matmul(Tensor([8, 0, 12],"float64"), Tensor([8, 0, 10],"float64"), )
paddle.matmul(Tensor([8, 16, 0],"float64"), Tensor([8, 12, 0],"float64"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 0, 128, 128],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 0, 128],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 0],"float32"), Tensor([8, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([0, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([8, 0, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([8, 16, 0, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 128],"float32"), Tensor([8, 16, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 128, 128],"float32"), Tensor([0, 16, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 0, 128, 128],"float32"), Tensor([8, 0, 128, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 0, 128],"float32"), Tensor([8, 16, 0, 16],"float32"), )
paddle.matmul(Tensor([8, 16, 128, 0],"float32"), Tensor([8, 16, 128, 0],"float32"), )
paddle.matmul(Tensor([0, 16, 128, 16],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 128, 16],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 0, 16],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 0],"float32"), Tensor([8, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([0, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([8, 0, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([8, 16, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 16],"float32"), Tensor([8, 16, 128, 0],"float32"), transpose_y=True, )
paddle.matmul(Tensor([0, 16, 128, 16],"float32"), Tensor([0, 16, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 0, 128, 16],"float32"), Tensor([8, 0, 128, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 0, 16],"float32"), Tensor([8, 16, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(Tensor([8, 16, 128, 0],"float32"), Tensor([8, 16, 128, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([10, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 0],"float32"), y=Tensor([10, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 16],"float32"), y=Tensor([10, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([10, 0],"float32"), y=Tensor([10, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 512],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 0],"float32"), y=Tensor([10000, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 512],"float32"), y=Tensor([10000, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 512],"float32"), y=Tensor([0, 512],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([128, 0],"float32"), y=Tensor([10000, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 32, 1, 128],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 1, 128],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 0, 128],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 0],"float16"), y=Tensor([2, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([0, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([2, 0, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([2, 32, 0, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 128],"float16"), y=Tensor([2, 32, 33, 0],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 32, 1, 128],"float16"), y=Tensor([0, 32, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 1, 128],"float16"), y=Tensor([2, 0, 33, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 0, 128],"float16"), y=Tensor([2, 32, 0, 128],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 32, 1, 0],"float16"), y=Tensor([2, 32, 33, 0],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 8, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 16],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 0],"float32"), y=Tensor([2, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 16],"float32"), y=Tensor([2, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 8, 16],"float32"), y=Tensor([0, 8, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 0, 16],"float32"), y=Tensor([2, 0, 16],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([2, 8, 0],"float32"), y=Tensor([2, 8, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 2, 5],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([3, 0, 2, 5],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([3, 2, 0, 5],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([3, 2, 2, 0],"float64"), y=Tensor([5],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([3, 2, 2, 5],"float64"), y=Tensor([0],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([32, 0],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([32, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([32, 16],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matmul(x=Tensor([0, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([32, 0],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matmul(x=Tensor([0, 8, 4, 64],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 0, 4, 64],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 0, 64],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 0],"float32"), y=Tensor([32, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([0, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([32, 0, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([32, 8, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 64],"float32"), y=Tensor([32, 8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 8, 4, 64],"float32"), y=Tensor([0, 8, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 0, 4, 64],"float32"), y=Tensor([32, 0, 4, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 0, 64],"float32"), y=Tensor([32, 8, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([32, 8, 4, 0],"float32"), y=Tensor([32, 8, 4, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 20],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([4, 0],"float32"), y=Tensor([20, 40],"float32"), )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([0, 40],"float32"), )
paddle.matmul(x=Tensor([4, 20],"float32"), y=Tensor([20, 0],"float32"), )
paddle.matmul(x=Tensor([0, 20],"float32"), y=Tensor([0, 40],"float32"), )
paddle.matmul(x=Tensor([4, 0],"float32"), y=Tensor([20, 0],"float32"), )
paddle.matmul(x=Tensor([0, 3],"float64"), y=Tensor([3],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([4, 0],"float64"), y=Tensor([3],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([4, 3],"float64"), y=Tensor([0],"float64"), transpose_x=False, transpose_y=True, )
paddle.matmul(x=Tensor([0, 140, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 1],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 0],"float32"), y=Tensor([58, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 1],"float32"), y=Tensor([58, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 140, 1],"float32"), y=Tensor([0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 1],"float32"), y=Tensor([58, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 140, 0],"float32"), y=Tensor([58, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 140, 1],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 140, 1],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 0, 1],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 0],"float32"), y=Tensor([58, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([0, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([58, 0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([58, 2, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 1],"float32"), y=Tensor([58, 2, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 2, 140, 1],"float32"), y=Tensor([0, 2, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 0, 140, 1],"float32"), y=Tensor([58, 0, 140, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 0, 1],"float32"), y=Tensor([58, 2, 0, 1],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([58, 2, 140, 0],"float32"), y=Tensor([58, 2, 140, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 1, 64],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 0, 64],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 0],"float32"), y=Tensor([8, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([0, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([8, 0, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([8, 16, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 64],"float32"), y=Tensor([8, 16, 129, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 1, 64],"float32"), y=Tensor([0, 16, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 1, 64],"float32"), y=Tensor([8, 0, 129, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 0, 64],"float32"), y=Tensor([8, 16, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 1, 0],"float32"), y=Tensor([8, 16, 129, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 128, 64],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 128, 64],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 0, 64],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 0],"float16"), y=Tensor([8, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([0, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([8, 0, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([8, 16, 0, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float16"), y=Tensor([8, 16, 128, 0],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 128, 64],"float16"), y=Tensor([0, 16, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 128, 64],"float16"), y=Tensor([8, 0, 128, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 0, 64],"float16"), y=Tensor([8, 16, 0, 64],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 0],"float16"), y=Tensor([8, 16, 128, 0],"float16"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 128, 64],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 128, 64],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 0, 64],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 0],"float32"), y=Tensor([8, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([0, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([8, 0, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([8, 16, 0, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 64],"float32"), y=Tensor([8, 16, 128, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([0, 16, 128, 64],"float32"), y=Tensor([0, 16, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0, 128, 64],"float32"), y=Tensor([8, 0, 128, 64],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 16, 128, 0],"float32"), y=Tensor([8, 16, 128, 0],"float32"), transpose_y=True, )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([16, 32],"float32"), )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([8, 16],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([16, 0],"float32"), )
paddle.matmul(x=Tensor([0, 24],"float32"), y=Tensor([24, 32],"float32"), )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([24, 32],"float32"), )
paddle.matmul(x=Tensor([8, 24],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([8, 24],"float32"), y=Tensor([24, 0],"float32"), )
paddle.matmul(x=Tensor([0, 24],"float32"), y=Tensor([0, 32],"float32"), )
paddle.matmul(x=Tensor([8, 0],"float32"), y=Tensor([24, 0],"float32"), )
paddle.maximum(Tensor([0, 1],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([1, 1],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([0, 2, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float32"), Tensor([0, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 0, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 0, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.maximum(Tensor([0, 2, 3, 4],"float32"), Tensor([0, 2, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 0, 3, 4],"float32"), Tensor([1, 0, 3, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 0, 4],"float32"), Tensor([1, 2, 0, 1],"float32"), )
paddle.maximum(Tensor([1, 2, 3, 0],"float32"), Tensor([1, 2, 3, 0],"float32"), )
paddle.maximum(Tensor([0, 2, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 0, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 0, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 0],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float64"), Tensor([0, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 0, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 0, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 2, 3, 4],"float64"), Tensor([0, 2, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 0, 3, 4],"float64"), Tensor([1, 0, 3, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 0, 4],"float64"), Tensor([1, 2, 0, 4],"float64"), )
paddle.maximum(Tensor([1, 2, 3, 0],"float64"), Tensor([1, 2, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 40, 1723],"float32"), Tensor([1, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 0, 1723],"float32"), Tensor([1, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 0],"float32"), Tensor([1, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 1723],"float32"), Tensor([0, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 1723],"float32"), Tensor([1, 0, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 1723],"float32"), Tensor([1, 40, 0],"float32"), )
paddle.maximum(Tensor([0, 40, 1723],"float32"), Tensor([0, 40, 1723],"float32"), )
paddle.maximum(Tensor([1, 0, 1723],"float32"), Tensor([1, 0, 1723],"float32"), )
paddle.maximum(Tensor([1, 40, 0],"float32"), Tensor([1, 40, 0],"float32"), )
paddle.maximum(Tensor([0, 40, 419],"float32"), Tensor([1, 40, 419],"float32"), )
paddle.maximum(Tensor([1, 0, 419],"float32"), Tensor([1, 40, 419],"float32"), )
paddle.maximum(Tensor([1, 40, 0],"float32"), Tensor([1, 40, 419],"float32"), )
paddle.maximum(Tensor([1, 40, 419],"float32"), Tensor([0, 40, 419],"float32"), )
paddle.maximum(Tensor([1, 40, 419],"float32"), Tensor([1, 0, 419],"float32"), )
paddle.maximum(Tensor([1, 40, 419],"float32"), Tensor([1, 40, 0],"float32"), )
paddle.maximum(Tensor([0, 40, 419],"float32"), Tensor([0, 40, 419],"float32"), )
paddle.maximum(Tensor([1, 0, 419],"float32"), Tensor([1, 0, 419],"float32"), )
paddle.maximum(Tensor([0, 40, 480],"float32"), Tensor([1, 40, 480],"float32"), )
paddle.maximum(Tensor([1, 0, 480],"float32"), Tensor([1, 40, 480],"float32"), )
paddle.maximum(Tensor([1, 40, 0],"float32"), Tensor([1, 40, 480],"float32"), )
paddle.maximum(Tensor([1, 40, 480],"float32"), Tensor([0, 40, 480],"float32"), )
paddle.maximum(Tensor([1, 40, 480],"float32"), Tensor([1, 0, 480],"float32"), )
paddle.maximum(Tensor([1, 40, 480],"float32"), Tensor([1, 40, 0],"float32"), )
paddle.maximum(Tensor([0, 40, 480],"float32"), Tensor([0, 40, 480],"float32"), )
paddle.maximum(Tensor([1, 0, 480],"float32"), Tensor([1, 0, 480],"float32"), )
paddle.maximum(Tensor([0, 64, 1723],"float32"), Tensor([1, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 0, 1723],"float32"), Tensor([1, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 1723],"float32"), Tensor([0, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 1723],"float32"), Tensor([1, 0, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 1723],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 1723],"float32"), Tensor([0, 64, 1723],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 294],"float32"), Tensor([1, 64, 294],"float32"), )
paddle.maximum(Tensor([1, 0, 294],"float32"), Tensor([1, 64, 294],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 294],"float32"), )
paddle.maximum(Tensor([1, 64, 294],"float32"), Tensor([0, 64, 294],"float32"), )
paddle.maximum(Tensor([1, 64, 294],"float32"), Tensor([1, 0, 294],"float32"), )
paddle.maximum(Tensor([1, 64, 294],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 294],"float32"), Tensor([0, 64, 294],"float32"), )
paddle.maximum(Tensor([1, 0, 294],"float32"), Tensor([1, 0, 294],"float32"), )
paddle.maximum(Tensor([0, 64, 448],"float32"), Tensor([1, 64, 448],"float32"), )
paddle.maximum(Tensor([1, 0, 448],"float32"), Tensor([1, 64, 448],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 448],"float32"), )
paddle.maximum(Tensor([1, 64, 448],"float32"), Tensor([0, 64, 448],"float32"), )
paddle.maximum(Tensor([1, 64, 448],"float32"), Tensor([1, 0, 448],"float32"), )
paddle.maximum(Tensor([1, 64, 448],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 448],"float32"), Tensor([0, 64, 448],"float32"), )
paddle.maximum(Tensor([1, 0, 448],"float32"), Tensor([1, 0, 448],"float32"), )
paddle.maximum(Tensor([0, 64, 480],"float32"), Tensor([1, 64, 480],"float32"), )
paddle.maximum(Tensor([1, 0, 480],"float32"), Tensor([1, 64, 480],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 480],"float32"), )
paddle.maximum(Tensor([1, 64, 480],"float32"), Tensor([0, 64, 480],"float32"), )
paddle.maximum(Tensor([1, 64, 480],"float32"), Tensor([1, 0, 480],"float32"), )
paddle.maximum(Tensor([1, 64, 480],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 480],"float32"), Tensor([0, 64, 480],"float32"), )
paddle.maximum(Tensor([0, 64, 493],"float32"), Tensor([1, 64, 493],"float32"), )
paddle.maximum(Tensor([1, 0, 493],"float32"), Tensor([1, 64, 493],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 493],"float32"), )
paddle.maximum(Tensor([1, 64, 493],"float32"), Tensor([0, 64, 493],"float32"), )
paddle.maximum(Tensor([1, 64, 493],"float32"), Tensor([1, 0, 493],"float32"), )
paddle.maximum(Tensor([1, 64, 493],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 493],"float32"), Tensor([0, 64, 493],"float32"), )
paddle.maximum(Tensor([1, 0, 493],"float32"), Tensor([1, 0, 493],"float32"), )
paddle.maximum(Tensor([0, 64, 530],"float32"), Tensor([1, 64, 530],"float32"), )
paddle.maximum(Tensor([1, 0, 530],"float32"), Tensor([1, 64, 530],"float32"), )
paddle.maximum(Tensor([1, 64, 0],"float32"), Tensor([1, 64, 530],"float32"), )
paddle.maximum(Tensor([1, 64, 530],"float32"), Tensor([0, 64, 530],"float32"), )
paddle.maximum(Tensor([1, 64, 530],"float32"), Tensor([1, 0, 530],"float32"), )
paddle.maximum(Tensor([1, 64, 530],"float32"), Tensor([1, 64, 0],"float32"), )
paddle.maximum(Tensor([0, 64, 530],"float32"), Tensor([0, 64, 530],"float32"), )
paddle.maximum(Tensor([1, 0, 530],"float32"), Tensor([1, 0, 530],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.maximum(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0],"float64"), Tensor([1],"float64"), )
paddle.maximum(Tensor([1],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.maximum(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.maximum(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.maximum(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0, 200, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 0, 300],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 0],"float32"), Tensor([10, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 300],"float32"), Tensor([0, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 300],"float32"), Tensor([10, 0, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 300],"float32"), Tensor([10, 200, 0],"float32"), )
paddle.maximum(Tensor([0, 200, 300],"float32"), Tensor([0, 200, 300],"float32"), )
paddle.maximum(Tensor([10, 0, 300],"float32"), Tensor([10, 0, 300],"float32"), )
paddle.maximum(Tensor([10, 200, 0],"float32"), Tensor([10, 200, 0],"float32"), )
paddle.maximum(Tensor([0, 200, 300],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 0, 300],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 0],"int32"), Tensor([10, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 300],"int32"), Tensor([0, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 300],"int32"), Tensor([10, 0, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 300],"int32"), Tensor([10, 200, 0],"int32"), )
paddle.maximum(Tensor([0, 200, 300],"int32"), Tensor([0, 200, 300],"int32"), )
paddle.maximum(Tensor([10, 0, 300],"int32"), Tensor([10, 0, 300],"int32"), )
paddle.maximum(Tensor([10, 200, 0],"int32"), Tensor([10, 200, 0],"int32"), )
paddle.maximum(Tensor([0, 200, 300],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.maximum(Tensor([10, 0, 300],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.maximum(Tensor([10, 200, 0],"int64"), Tensor([10, 200, 300],"int64"), )
paddle.maximum(Tensor([10, 200, 300],"int64"), Tensor([0, 200, 300],"int64"), )
paddle.maximum(Tensor([10, 200, 300],"int64"), Tensor([10, 0, 300],"int64"), )
paddle.maximum(Tensor([10, 200, 300],"int64"), Tensor([10, 200, 0],"int64"), )
paddle.maximum(Tensor([0, 200, 300],"int64"), Tensor([0, 200, 300],"int64"), )
paddle.maximum(Tensor([10, 0, 300],"int64"), Tensor([10, 0, 300],"int64"), )
paddle.maximum(Tensor([10, 200, 0],"int64"), Tensor([10, 200, 0],"int64"), )
paddle.maximum(Tensor([0],"float32"), Tensor([1025],"float32"), )
paddle.maximum(Tensor([1025],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0, 10, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 0, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 10, 5],"float32"), Tensor([0, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 10, 5],"float32"), Tensor([2, 0, 5],"float32"), )
paddle.maximum(Tensor([2, 10, 5],"float32"), Tensor([2, 10, 0],"float32"), )
paddle.maximum(Tensor([0, 10, 5],"float32"), Tensor([0, 10, 5],"float32"), )
paddle.maximum(Tensor([2, 0, 5],"float32"), Tensor([2, 0, 5],"float32"), )
paddle.maximum(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), )
paddle.maximum(Tensor([0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([257],"float32"), )
paddle.maximum(Tensor([257],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.maximum(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.maximum(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.maximum(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.maximum(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.maximum(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.maximum(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.maximum(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.maximum(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.maximum(Tensor([0, 200, 40],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([30, 0, 40],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([30, 200, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([0, 1],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([1, 0],"float32"), )
paddle.maximum(Tensor([0, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.maximum(Tensor([30, 0, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 0],"float32"), Tensor([200, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([200, 0],"float32"), )
paddle.maximum(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([32],"float32"), )
paddle.maximum(Tensor([32],"float32"), Tensor([0],"float32"), )
paddle.maximum(Tensor([0, 20, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 0, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 20, 0],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 20, 20],"float16"), Tensor([0, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 20, 20],"float16"), Tensor([4, 0, 20],"float16"), )
paddle.maximum(Tensor([4, 20, 20],"float16"), Tensor([4, 20, 0],"float16"), )
paddle.maximum(Tensor([0, 20, 20],"float16"), Tensor([0, 20, 20],"float16"), )
paddle.maximum(Tensor([4, 0, 20],"float16"), Tensor([4, 0, 20],"float16"), )
paddle.maximum(Tensor([4, 20, 0],"float16"), Tensor([4, 20, 0],"float16"), )
paddle.maximum(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.maximum(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.maximum(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.maximum(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.maximum(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.maximum(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.maximum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.maximum(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.maximum(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.maximum(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.maximum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.maximum(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.maximum(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.maximum(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.maximum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.maximum(Tensor([0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.maximum(Tensor([40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.maximum(Tensor([0, 3],"float32"), Tensor([5, 3],"float32"), )
paddle.maximum(Tensor([5, 0],"float32"), Tensor([5, 3],"float32"), )
paddle.maximum(Tensor([5, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.maximum(Tensor([5, 3],"float32"), Tensor([5, 0],"float32"), )
paddle.maximum(Tensor([5, 0],"float32"), Tensor([5, 0],"float32"), )
paddle.mean(Tensor([0, 1, 1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 0, 1, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 0, 3],"float64"), )
paddle.mean(Tensor([1, 1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1, 100],"float32"), )
paddle.mean(Tensor([1, 0, 100],"float32"), )
paddle.mean(Tensor([1, 1, 0],"float32"), )
paddle.mean(Tensor([0, 1, 16, 16],"float32"), )
paddle.mean(Tensor([1, 0, 16, 16],"float32"), )
paddle.mean(Tensor([1, 1, 0, 16],"float32"), )
paddle.mean(Tensor([1, 1, 16, 0],"float32"), )
paddle.mean(Tensor([0, 1, 16, 16],"float64"), )
paddle.mean(Tensor([1, 0, 16, 16],"float64"), )
paddle.mean(Tensor([1, 1, 0, 16],"float64"), )
paddle.mean(Tensor([1, 1, 16, 0],"float64"), )
paddle.mean(Tensor([0, 1, 16, 8, 4],"float32"), )
paddle.mean(Tensor([1, 0, 16, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 0, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 16, 0, 4],"float32"), )
paddle.mean(Tensor([1, 1, 16, 8, 0],"float32"), )
paddle.mean(Tensor([0, 1, 17, 9, 5],"float16"), )
paddle.mean(Tensor([1, 0, 17, 9, 5],"float16"), )
paddle.mean(Tensor([1, 1, 0, 9, 5],"float16"), )
paddle.mean(Tensor([1, 1, 17, 0, 5],"float16"), )
paddle.mean(Tensor([1, 1, 17, 9, 0],"float16"), )
paddle.mean(Tensor([0, 1, 17, 9, 5],"float32"), )
paddle.mean(Tensor([1, 0, 17, 9, 5],"float32"), )
paddle.mean(Tensor([1, 1, 0, 9, 5],"float32"), )
paddle.mean(Tensor([1, 1, 17, 0, 5],"float32"), )
paddle.mean(Tensor([1, 1, 17, 9, 0],"float32"), )
paddle.mean(Tensor([0, 1, 2, 4, 10],"float16"), )
paddle.mean(Tensor([1, 0, 2, 4, 10],"float16"), )
paddle.mean(Tensor([1, 1, 0, 4, 10],"float16"), )
paddle.mean(Tensor([1, 1, 2, 0, 10],"float16"), )
paddle.mean(Tensor([1, 1, 2, 4, 0],"float16"), )
paddle.mean(Tensor([0, 1, 2, 4, 10],"float64"), )
paddle.mean(Tensor([1, 0, 2, 4, 10],"float64"), )
paddle.mean(Tensor([1, 1, 0, 4, 10],"float64"), )
paddle.mean(Tensor([1, 1, 2, 0, 10],"float64"), )
paddle.mean(Tensor([1, 1, 2, 4, 0],"float64"), )
paddle.mean(Tensor([0, 1, 2, 4, 4],"float64"), )
paddle.mean(Tensor([1, 0, 2, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 0, 4, 4],"float64"), )
paddle.mean(Tensor([1, 1, 2, 0, 4],"float64"), )
paddle.mean(Tensor([0, 1, 4, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 0, 4, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 1, 0, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 1, 4, 0, 2, 2],"float64"), )
paddle.mean(Tensor([1, 1, 4, 2, 0, 2],"float64"), )
paddle.mean(Tensor([1, 1, 4, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 1, 4, 4],"float32"), )
paddle.mean(Tensor([1, 0, 4, 4],"float32"), )
paddle.mean(Tensor([1, 1, 0, 4],"float32"), )
paddle.mean(Tensor([1, 1, 4, 0],"float32"), )
paddle.mean(Tensor([0, 1, 5],"float32"), )
paddle.mean(Tensor([1, 0, 5],"float32"), )
paddle.mean(Tensor([0, 1, 64, 32],"float16"), )
paddle.mean(Tensor([1, 0, 64, 32],"float16"), )
paddle.mean(Tensor([1, 1, 0, 32],"float16"), )
paddle.mean(Tensor([1, 1, 64, 0],"float16"), )
paddle.mean(Tensor([0, 1, 64, 32],"float64"), )
paddle.mean(Tensor([1, 0, 64, 32],"float64"), )
paddle.mean(Tensor([1, 1, 0, 32],"float64"), )
paddle.mean(Tensor([1, 1, 64, 0],"float64"), )
paddle.mean(Tensor([0, 1, 65, 129],"float16"), )
paddle.mean(Tensor([1, 0, 65, 129],"float16"), )
paddle.mean(Tensor([1, 1, 0, 129],"float16"), )
paddle.mean(Tensor([1, 1, 65, 0],"float16"), )
paddle.mean(Tensor([0, 1, 65, 129],"float64"), )
paddle.mean(Tensor([1, 0, 65, 129],"float64"), )
paddle.mean(Tensor([1, 1, 0, 129],"float64"), )
paddle.mean(Tensor([1, 1, 65, 0],"float64"), )
paddle.mean(Tensor([0, 1, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 0, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 1, 0, 10, 12],"float64"), )
paddle.mean(Tensor([1, 1, 8, 0, 12],"float64"), )
paddle.mean(Tensor([1, 1, 8, 10, 0],"float64"), )
paddle.mean(Tensor([0, 1, 8, 16],"float32"), )
paddle.mean(Tensor([1, 0, 8, 16],"float32"), )
paddle.mean(Tensor([1, 1, 8, 0],"float32"), )
paddle.mean(Tensor([0, 1, 8, 32],"float16"), )
paddle.mean(Tensor([1, 0, 8, 32],"float16"), )
paddle.mean(Tensor([1, 1, 8, 0],"float16"), )
paddle.mean(Tensor([0, 1, 8, 32],"float64"), )
paddle.mean(Tensor([1, 0, 8, 32],"float64"), )
paddle.mean(Tensor([1, 1, 8, 0],"float64"), )
paddle.mean(Tensor([0, 1, 8, 8, 4],"float32"), )
paddle.mean(Tensor([1, 0, 8, 8, 4],"float32"), )
paddle.mean(Tensor([1, 1, 8, 0, 4],"float32"), )
paddle.mean(Tensor([1, 1, 8, 8, 0],"float32"), )
paddle.mean(Tensor([0, 1],"float32"), )
paddle.mean(Tensor([1, 0],"float32"), )
paddle.mean(Tensor([0, 1],"float32"), name=None, )
paddle.mean(Tensor([1, 0],"float32"), name=None, )
paddle.mean(Tensor([0, 1],"float64"), )
paddle.mean(Tensor([1, 0],"float64"), )
paddle.mean(Tensor([0, 10, 100],"float16"), )
paddle.mean(Tensor([1, 0, 100],"float16"), )
paddle.mean(Tensor([1, 10, 0],"float16"), )
paddle.mean(Tensor([0, 100, 1],"float64"), )
paddle.mean(Tensor([1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 100, 0],"float64"), )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float16"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float16"), )
paddle.mean(Tensor([0, 100, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 0, 2, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 0, 2, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 0, 2],"float64"), )
paddle.mean(Tensor([1, 100, 2, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 100],"float64"), )
paddle.mean(Tensor([0, 120],"float64"), )
paddle.mean(Tensor([0, 2, 1, 1, 5],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1, 5],"float64"), )
paddle.mean(Tensor([1, 2, 0, 1, 5],"float64"), )
paddle.mean(Tensor([1, 2, 1, 0, 5],"float64"), )
paddle.mean(Tensor([1, 2, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 2, 2, 2, 2, 100],"float16"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 100],"float16"), )
paddle.mean(Tensor([1, 2, 0, 2, 2, 100],"float16"), )
paddle.mean(Tensor([1, 2, 2, 0, 2, 100],"float16"), )
paddle.mean(Tensor([1, 2, 2, 2, 0, 100],"float16"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 0],"float16"), )
paddle.mean(Tensor([0, 2, 2, 2, 2, 100],"float64"), )
paddle.mean(Tensor([1, 0, 2, 2, 2, 100],"float64"), )
paddle.mean(Tensor([1, 2, 0, 2, 2, 100],"float64"), )
paddle.mean(Tensor([1, 2, 2, 0, 2, 100],"float64"), )
paddle.mean(Tensor([1, 2, 2, 2, 0, 100],"float64"), )
paddle.mean(Tensor([1, 2, 2, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 2, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 0, 3, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 0, 4, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 0, 4, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 0, 3, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 0, 3],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 4, 3, 0],"float64"), )
paddle.mean(Tensor([0, 2, 3, 4, 5, 6],"float16"), )
paddle.mean(Tensor([1, 0, 3, 4, 5, 6],"float16"), )
paddle.mean(Tensor([1, 2, 0, 4, 5, 6],"float16"), )
paddle.mean(Tensor([1, 2, 3, 0, 5, 6],"float16"), )
paddle.mean(Tensor([1, 2, 3, 4, 0, 6],"float16"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 0],"float16"), )
paddle.mean(Tensor([0, 2, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([1, 0, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([1, 2, 0, 4, 5, 6],"float64"), )
paddle.mean(Tensor([1, 2, 3, 0, 5, 6],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 0, 6],"float64"), )
paddle.mean(Tensor([1, 2, 3, 4, 5, 0],"float64"), )
paddle.mean(Tensor([0, 2, 6, 6],"float32"), )
paddle.mean(Tensor([1, 0, 6, 6],"float32"), )
paddle.mean(Tensor([1, 2, 0, 6],"float32"), )
paddle.mean(Tensor([1, 2, 6, 0],"float32"), )
paddle.mean(Tensor([0, 2],"float64"), )
paddle.mean(Tensor([0, 200, 3],"float16"), )
paddle.mean(Tensor([1, 0, 3],"float16"), )
paddle.mean(Tensor([1, 200, 0],"float16"), )
paddle.mean(Tensor([0, 200, 3],"float64"), )
paddle.mean(Tensor([1, 0, 3],"float64"), )
paddle.mean(Tensor([1, 200, 0],"float64"), )
paddle.mean(Tensor([0, 28, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0, 28],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 28, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0, 3, 1, 1, 1],"float16"), )
paddle.mean(Tensor([1, 0, 1, 1, 1],"float16"), )
paddle.mean(Tensor([1, 3, 0, 1, 1],"float16"), )
paddle.mean(Tensor([1, 3, 1, 0, 1],"float16"), )
paddle.mean(Tensor([1, 3, 1, 1, 0],"float16"), )
paddle.mean(Tensor([0, 3, 1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 0, 1, 1, 1],"float64"), )
paddle.mean(Tensor([1, 3, 0, 1, 1],"float64"), )
paddle.mean(Tensor([1, 3, 1, 0, 1],"float64"), )
paddle.mean(Tensor([1, 3, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 3, 100],"float16"), )
paddle.mean(Tensor([1, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 100],"float64"), )
paddle.mean(Tensor([1, 0, 100],"float64"), )
paddle.mean(Tensor([1, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 2, 3],"float64"), )
paddle.mean(Tensor([1, 0, 2, 2, 3],"float64"), )
paddle.mean(Tensor([1, 3, 0, 2, 3],"float64"), )
paddle.mean(Tensor([1, 3, 2, 0, 3],"float64"), )
paddle.mean(Tensor([1, 3, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 6],"float64"), )
paddle.mean(Tensor([1, 0, 2, 6],"float64"), )
paddle.mean(Tensor([1, 3, 0, 6],"float64"), )
paddle.mean(Tensor([1, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 256, 256],"float32"), )
paddle.mean(Tensor([1, 0, 256, 256],"float32"), )
paddle.mean(Tensor([1, 3, 0, 256],"float32"), )
paddle.mean(Tensor([1, 3, 256, 0],"float32"), )
paddle.mean(Tensor([0, 3, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 0, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 0, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 3, 0, 3],"float64"), )
paddle.mean(Tensor([1, 3, 3, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 3, 5],"float32"), )
paddle.mean(Tensor([1, 0, 3, 5],"float32"), )
paddle.mean(Tensor([1, 3, 0, 5],"float32"), )
paddle.mean(Tensor([1, 3, 3, 0],"float32"), )
paddle.mean(Tensor([0, 3, 32, 32],"float32"), )
paddle.mean(Tensor([1, 0, 32, 32],"float32"), )
paddle.mean(Tensor([1, 3, 0, 32],"float32"), )
paddle.mean(Tensor([1, 3, 32, 0],"float32"), )
paddle.mean(Tensor([0, 3, 4, 1, 1],"float64"), )
paddle.mean(Tensor([1, 0, 4, 1, 1],"float64"), )
paddle.mean(Tensor([1, 3, 4, 0, 1],"float64"), )
paddle.mean(Tensor([1, 3, 4, 1, 0],"float64"), )
paddle.mean(Tensor([0, 3, 4, 2, 2],"float64"), )
paddle.mean(Tensor([1, 0, 4, 2, 2],"float64"), )
paddle.mean(Tensor([1, 3, 0, 2, 2],"float64"), )
paddle.mean(Tensor([1, 3, 4, 0, 2],"float64"), )
paddle.mean(Tensor([1, 3, 4, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 5, 5, 5],"float16"), )
paddle.mean(Tensor([1, 0, 5, 5, 5],"float16"), )
paddle.mean(Tensor([1, 3, 0, 5, 5],"float16"), )
paddle.mean(Tensor([1, 3, 5, 0, 5],"float16"), )
paddle.mean(Tensor([1, 3, 5, 5, 0],"float16"), )
paddle.mean(Tensor([0, 3, 5, 5, 5],"float64"), )
paddle.mean(Tensor([1, 0, 5, 5, 5],"float64"), )
paddle.mean(Tensor([1, 3, 0, 5, 5],"float64"), )
paddle.mean(Tensor([1, 3, 5, 0, 5],"float64"), )
paddle.mean(Tensor([1, 3, 5, 5, 0],"float64"), )
paddle.mean(Tensor([0, 3, 50],"float16"), )
paddle.mean(Tensor([1, 0, 50],"float16"), )
paddle.mean(Tensor([0, 3, 50],"float64"), )
paddle.mean(Tensor([1, 0, 50],"float64"), )
paddle.mean(Tensor([0, 3, 6, 3, 3],"float16"), )
paddle.mean(Tensor([1, 0, 6, 3, 3],"float16"), )
paddle.mean(Tensor([1, 3, 0, 3, 3],"float16"), )
paddle.mean(Tensor([1, 3, 6, 0, 3],"float16"), )
paddle.mean(Tensor([1, 3, 6, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 6, 3, 3],"float64"), )
paddle.mean(Tensor([1, 0, 6, 3, 3],"float64"), )
paddle.mean(Tensor([1, 3, 6, 0, 3],"float64"), )
paddle.mean(Tensor([1, 3, 6, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 6, 3, 4],"float64"), )
paddle.mean(Tensor([1, 0, 6, 3, 4],"float64"), )
paddle.mean(Tensor([1, 3, 0, 3, 4],"float64"), )
paddle.mean(Tensor([1, 3, 6, 0, 4],"float64"), )
paddle.mean(Tensor([0, 3, 6, 8, 3],"float16"), )
paddle.mean(Tensor([1, 0, 6, 8, 3],"float16"), )
paddle.mean(Tensor([1, 3, 0, 8, 3],"float16"), )
paddle.mean(Tensor([1, 3, 6, 8, 0],"float16"), )
paddle.mean(Tensor([0, 3, 6, 8, 3],"float64"), )
paddle.mean(Tensor([1, 0, 6, 8, 3],"float64"), )
paddle.mean(Tensor([1, 3, 0, 8, 3],"float64"), )
paddle.mean(Tensor([1, 3, 6, 8, 0],"float64"), )
paddle.mean(Tensor([0, 3, 6, 8, 4],"float64"), )
paddle.mean(Tensor([1, 0, 6, 8, 4],"float64"), )
paddle.mean(Tensor([1, 3, 0, 8, 4],"float64"), )
paddle.mean(Tensor([0, 3, 7, 7, 7],"float64"), )
paddle.mean(Tensor([1, 0, 7, 7, 7],"float64"), )
paddle.mean(Tensor([1, 3, 0, 7, 7],"float64"), )
paddle.mean(Tensor([1, 3, 7, 0, 7],"float64"), )
paddle.mean(Tensor([1, 3, 7, 7, 0],"float64"), )
paddle.mean(Tensor([0, 3, 7, 9, 11],"float64"), )
paddle.mean(Tensor([1, 0, 7, 9, 11],"float64"), )
paddle.mean(Tensor([1, 3, 0, 9, 11],"float64"), )
paddle.mean(Tensor([1, 3, 7, 0, 11],"float64"), )
paddle.mean(Tensor([1, 3, 7, 9, 0],"float64"), )
paddle.mean(Tensor([0, 3, 8, 10, 12],"float64"), )
paddle.mean(Tensor([1, 3, 0, 10, 12],"float64"), )
paddle.mean(Tensor([1, 3, 8, 0, 12],"float64"), )
paddle.mean(Tensor([1, 3, 8, 10, 0],"float64"), )
paddle.mean(Tensor([0, 3, 8, 3, 2],"float64"), )
paddle.mean(Tensor([1, 0, 8, 3, 2],"float64"), )
paddle.mean(Tensor([1, 3, 0, 3, 2],"float64"), )
paddle.mean(Tensor([1, 3, 8, 0, 2],"float64"), )
paddle.mean(Tensor([1, 3, 8, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 8, 7, 6],"float16"), )
paddle.mean(Tensor([1, 0, 8, 7, 6],"float16"), )
paddle.mean(Tensor([1, 3, 0, 7, 6],"float16"), )
paddle.mean(Tensor([1, 3, 8, 0, 6],"float16"), )
paddle.mean(Tensor([1, 3, 8, 7, 0],"float16"), )
paddle.mean(Tensor([0, 3, 8, 7, 6],"float64"), )
paddle.mean(Tensor([1, 0, 8, 7, 6],"float64"), )
paddle.mean(Tensor([1, 3, 0, 7, 6],"float64"), )
paddle.mean(Tensor([1, 3, 8, 0, 6],"float64"), )
paddle.mean(Tensor([1, 3, 8, 7, 0],"float64"), )
paddle.mean(Tensor([0, 4, 3, 2, 100],"float16"), )
paddle.mean(Tensor([1, 0, 3, 2, 100],"float16"), )
paddle.mean(Tensor([1, 4, 0, 2, 100],"float16"), )
paddle.mean(Tensor([1, 4, 3, 0, 100],"float16"), )
paddle.mean(Tensor([1, 4, 3, 2, 0],"float16"), )
paddle.mean(Tensor([0, 4, 32, 32],"float16"), )
paddle.mean(Tensor([1, 0, 32, 32],"float16"), )
paddle.mean(Tensor([1, 4, 0, 32],"float16"), )
paddle.mean(Tensor([1, 4, 32, 0],"float16"), )
paddle.mean(Tensor([0, 4, 4, 100],"float16"), )
paddle.mean(Tensor([1, 0, 4, 100],"float16"), )
paddle.mean(Tensor([1, 4, 0, 100],"float16"), )
paddle.mean(Tensor([1, 4, 4, 0],"float16"), )
paddle.mean(Tensor([0, 4, 4, 8],"float64"), )
paddle.mean(Tensor([1, 0, 4, 8],"float64"), )
paddle.mean(Tensor([1, 4, 0, 8],"float64"), )
paddle.mean(Tensor([1, 4, 4, 0],"float64"), )
paddle.mean(Tensor([0, 4],"float16"), )
paddle.mean(Tensor([1, 0],"float16"), )
paddle.mean(Tensor([0, 5, 2, 1, 3],"float64"), )
paddle.mean(Tensor([1, 0, 2, 1, 3],"float64"), )
paddle.mean(Tensor([1, 5, 0, 1, 3],"float64"), )
paddle.mean(Tensor([1, 5, 2, 0, 3],"float64"), )
paddle.mean(Tensor([1, 5, 2, 1, 0],"float64"), )
paddle.mean(Tensor([0, 5, 2, 2, 7],"float64"), )
paddle.mean(Tensor([1, 0, 2, 2, 7],"float64"), )
paddle.mean(Tensor([1, 5, 0, 2, 7],"float64"), )
paddle.mean(Tensor([1, 5, 2, 0, 7],"float64"), )
paddle.mean(Tensor([1, 5, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 5, 2],"float64"), )
paddle.mean(Tensor([1, 0, 2],"float64"), )
paddle.mean(Tensor([1, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5, 5, 3],"float64"), )
paddle.mean(Tensor([1, 0, 5, 5, 3],"float64"), )
paddle.mean(Tensor([1, 5, 0, 5, 3],"float64"), )
paddle.mean(Tensor([1, 5, 5, 0, 3],"float64"), )
paddle.mean(Tensor([1, 5, 5, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5],"float64"), )
paddle.mean(Tensor([1, 0, 5],"float64"), )
paddle.mean(Tensor([0, 5],"float16"), )
paddle.mean(Tensor([0, 50, 3],"float64"), )
paddle.mean(Tensor([1, 50, 0],"float64"), )
paddle.mean(Tensor([0, 6, 7, 4, 3],"float64"), )
paddle.mean(Tensor([1, 0, 7, 4, 3],"float64"), )
paddle.mean(Tensor([1, 6, 0, 4, 3],"float64"), )
paddle.mean(Tensor([1, 6, 7, 0, 3],"float64"), )
paddle.mean(Tensor([1, 6, 7, 4, 0],"float64"), )
paddle.mean(Tensor([0, 6, 7, 5, 3],"float64"), )
paddle.mean(Tensor([1, 0, 7, 5, 3],"float64"), )
paddle.mean(Tensor([1, 6, 0, 5, 3],"float64"), )
paddle.mean(Tensor([1, 6, 7, 5, 0],"float64"), )
paddle.mean(Tensor([0, 64, 64, 64],"float32"), )
paddle.mean(Tensor([1, 0, 64, 64],"float32"), )
paddle.mean(Tensor([1, 64, 0, 64],"float32"), )
paddle.mean(Tensor([1, 64, 64, 0],"float32"), )
paddle.mean(Tensor([0, 7, 3, 2, 3],"float64"), )
paddle.mean(Tensor([1, 0, 3, 2, 3],"float64"), )
paddle.mean(Tensor([1, 7, 0, 2, 3],"float64"), )
paddle.mean(Tensor([1, 7, 3, 0, 3],"float64"), )
paddle.mean(Tensor([1, 7, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 7, 3, 3, 3],"float64"), )
paddle.mean(Tensor([1, 7, 0, 3, 3],"float64"), )
paddle.mean(Tensor([1, 7, 3, 3, 0],"float64"), )
paddle.mean(Tensor([0, 7, 7, 7, 3],"float64"), )
paddle.mean(Tensor([1, 0, 7, 7, 3],"float64"), )
paddle.mean(Tensor([1, 7, 0, 7, 3],"float64"), )
paddle.mean(Tensor([1, 7, 7, 0, 3],"float64"), )
paddle.mean(Tensor([1, 7, 7, 7, 0],"float64"), )
paddle.mean(Tensor([0, 7, 8, 6, 3],"float64"), )
paddle.mean(Tensor([1, 0, 8, 6, 3],"float64"), )
paddle.mean(Tensor([1, 7, 0, 6, 3],"float64"), )
paddle.mean(Tensor([1, 7, 8, 0, 3],"float64"), )
paddle.mean(Tensor([1, 7, 8, 6, 0],"float64"), )
paddle.mean(Tensor([0, 8, 2],"float64"), )
paddle.mean(Tensor([1, 8, 0],"float64"), )
paddle.mean(Tensor([0, 8, 4, 3],"float64"), )
paddle.mean(Tensor([1, 0, 4, 3],"float64"), )
paddle.mean(Tensor([1, 8, 0, 3],"float64"), )
paddle.mean(Tensor([1, 8, 4, 0],"float64"), )
paddle.mean(Tensor([0, 8, 4, 4],"float64"), )
paddle.mean(Tensor([1, 0, 4, 4],"float64"), )
paddle.mean(Tensor([1, 8, 0, 4],"float64"), )
paddle.mean(Tensor([0, 8, 5, 5],"float64"), )
paddle.mean(Tensor([1, 0, 5, 5],"float64"), )
paddle.mean(Tensor([1, 8, 0, 5],"float64"), )
paddle.mean(Tensor([1, 8, 5, 0],"float64"), )
paddle.mean(Tensor([0, 8, 6, 6],"float64"), )
paddle.mean(Tensor([1, 0, 6, 6],"float64"), )
paddle.mean(Tensor([1, 8, 0, 6],"float64"), )
paddle.mean(Tensor([1, 8, 6, 0],"float64"), )
paddle.mean(Tensor([0, 8, 8],"float32"), )
paddle.mean(Tensor([1, 0, 8],"float32"), )
paddle.mean(Tensor([1, 8, 0],"float32"), )
paddle.mean(Tensor([0, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 0, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([1, 8, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([0],"float32"), )
paddle.mean(Tensor([0],"float32"), name=None, )
paddle.mean(Tensor([0],"float64"), )
paddle.mean(Tensor([10, 0],"float32"), )
paddle.mean(Tensor([0, 10, 10],"float16"), )
paddle.mean(Tensor([10, 0, 10],"float16"), )
paddle.mean(Tensor([10, 10, 0],"float16"), )
paddle.mean(Tensor([0, 10, 10],"float32"), )
paddle.mean(Tensor([10, 0, 10],"float32"), )
paddle.mean(Tensor([10, 10, 0],"float32"), )
paddle.mean(Tensor([0, 10, 10],"float64"), )
paddle.mean(Tensor([10, 0, 10],"float64"), )
paddle.mean(Tensor([10, 10, 0],"float64"), )
paddle.mean(Tensor([0, 10, 20],"float64"), )
paddle.mean(Tensor([10, 0, 20],"float64"), )
paddle.mean(Tensor([0, 10, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 0, 5],"float64"), name=None, )
paddle.mean(Tensor([10, 10, 0],"float64"), name=None, )
paddle.mean(Tensor([0, 10],"complex128"), )
paddle.mean(Tensor([10, 0],"complex128"), )
paddle.mean(Tensor([0, 10],"complex64"), )
paddle.mean(Tensor([10, 0],"complex64"), )
paddle.mean(Tensor([0, 10],"float16"), )
paddle.mean(Tensor([10, 0],"float16"), )
paddle.mean(Tensor([0, 10],"float32"), )
paddle.mean(Tensor([0, 10],"float32"), name=None, )
paddle.mean(Tensor([10, 0],"float32"), name=None, )
paddle.mean(Tensor([0, 10],"float64"), )
paddle.mean(Tensor([10, 0],"float64"), )
paddle.mean(Tensor([0, 12],"float16"), )
paddle.mean(Tensor([0, 12],"float32"), )
paddle.mean(Tensor([0, 12],"float64"), )
paddle.mean(Tensor([0, 16, 4, 4],"float32"), )
paddle.mean(Tensor([10, 0, 4, 4],"float32"), )
paddle.mean(Tensor([10, 16, 0, 4],"float32"), )
paddle.mean(Tensor([10, 16, 4, 0],"float32"), )
paddle.mean(Tensor([0, 16],"float32"), )
paddle.mean(Tensor([0, 2, 3, 2],"float32"), )
paddle.mean(Tensor([10, 0, 3, 2],"float32"), )
paddle.mean(Tensor([10, 2, 0, 2],"float32"), )
paddle.mean(Tensor([10, 2, 3, 0],"float32"), )
paddle.mean(Tensor([0, 2, 30, 30],"float32"), )
paddle.mean(Tensor([10, 0, 30, 30],"float32"), )
paddle.mean(Tensor([10, 2, 0, 30],"float32"), )
paddle.mean(Tensor([10, 2, 30, 0],"float32"), )
paddle.mean(Tensor([0, 2, 4, 1],"float64"), )
paddle.mean(Tensor([10, 0, 4, 1],"float64"), )
paddle.mean(Tensor([10, 2, 0, 1],"float64"), )
paddle.mean(Tensor([10, 2, 4, 0],"float64"), )
paddle.mean(Tensor([0, 2, 4],"float64"), )
paddle.mean(Tensor([10, 0, 4],"float64"), )
paddle.mean(Tensor([10, 2, 0],"float64"), )
paddle.mean(Tensor([0, 2, 5],"float32"), )
paddle.mean(Tensor([10, 0, 5],"float32"), )
paddle.mean(Tensor([10, 2, 0],"float32"), )
paddle.mean(Tensor([0, 2],"bfloat16"), )
paddle.mean(Tensor([10, 0],"bfloat16"), )
paddle.mean(Tensor([0, 2],"float16"), )
paddle.mean(Tensor([0, 2],"float32"), )
paddle.mean(Tensor([0, 2],"float32"), name=None, )
paddle.mean(Tensor([0, 20],"float64"), )
paddle.mean(Tensor([0, 3, 10],"float64"), )
paddle.mean(Tensor([10, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 3],"float64"), )
paddle.mean(Tensor([10, 0, 3],"float64"), )
paddle.mean(Tensor([10, 0, 32, 32],"float32"), )
paddle.mean(Tensor([10, 3, 0, 32],"float32"), )
paddle.mean(Tensor([10, 3, 32, 0],"float32"), )
paddle.mean(Tensor([0, 3, 5],"float64"), )
paddle.mean(Tensor([10, 0, 5],"float64"), )
paddle.mean(Tensor([0, 3, 6],"float64"), )
paddle.mean(Tensor([10, 0, 6],"float64"), )
paddle.mean(Tensor([0, 3],"float16"), )
paddle.mean(Tensor([0, 3],"float64"), )
paddle.mean(Tensor([0, 5, 12],"float64"), )
paddle.mean(Tensor([10, 0, 12],"float64"), )
paddle.mean(Tensor([10, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5],"float32"), )
paddle.mean(Tensor([0, 50],"float16"), )
paddle.mean(Tensor([0, 50],"float32"), )
paddle.mean(Tensor([0, 6, 3],"float64"), )
paddle.mean(Tensor([10, 6, 0],"float64"), )
paddle.mean(Tensor([0, 64],"complex128"), )
paddle.mean(Tensor([0, 64],"complex64"), )
paddle.mean(Tensor([0, 64],"float16"), )
paddle.mean(Tensor([0, 64],"float64"), )
paddle.mean(Tensor([0, 8, 5],"float64"), )
paddle.mean(Tensor([10, 8, 0],"float64"), )
paddle.mean(Tensor([0, 1, 1],"float64"), )
paddle.mean(Tensor([100, 0, 1],"float64"), )
paddle.mean(Tensor([100, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1],"float16"), )
paddle.mean(Tensor([100, 0],"float16"), )
paddle.mean(Tensor([100, 0],"float32"), )
paddle.mean(Tensor([100, 0],"float64"), )
paddle.mean(Tensor([0, 100],"float16"), )
paddle.mean(Tensor([0, 100],"float32"), )
paddle.mean(Tensor([0, 200],"float32"), )
paddle.mean(Tensor([0, 200],"float64"), )
paddle.mean(Tensor([0, 300],"complex128"), )
paddle.mean(Tensor([100, 0],"complex128"), )
paddle.mean(Tensor([0, 300],"complex64"), )
paddle.mean(Tensor([100, 0],"complex64"), )
paddle.mean(Tensor([0, 300],"float16"), )
paddle.mean(Tensor([0, 300],"float64"), )
paddle.mean(Tensor([0],"float16"), )
paddle.mean(Tensor([101, 0],"float16"), )
paddle.mean(Tensor([101, 0],"float64"), )
paddle.mean(Tensor([0, 11],"float64"), )
paddle.mean(Tensor([11, 0],"float64"), )
paddle.mean(Tensor([0, 17],"float32"), )
paddle.mean(Tensor([11, 0],"float32"), )
paddle.mean(Tensor([0, 1, 10, 1],"float64"), )
paddle.mean(Tensor([12, 0, 10, 1],"float64"), )
paddle.mean(Tensor([12, 1, 0, 1],"float64"), )
paddle.mean(Tensor([12, 1, 10, 0],"float64"), )
paddle.mean(Tensor([12, 0],"complex128"), )
paddle.mean(Tensor([12, 0],"complex64"), )
paddle.mean(Tensor([12, 0],"float16"), )
paddle.mean(Tensor([12, 0],"float32"), )
paddle.mean(Tensor([12, 0],"float64"), )
paddle.mean(Tensor([0, 14],"complex128"), )
paddle.mean(Tensor([0, 14],"complex64"), )
paddle.mean(Tensor([0, 14],"float16"), )
paddle.mean(Tensor([0, 18],"complex128"), )
paddle.mean(Tensor([0, 26],"float64"), )
paddle.mean(Tensor([12, 0, 2],"float64"), )
paddle.mean(Tensor([12, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 4],"float64"), )
paddle.mean(Tensor([12, 0, 4],"float64"), )
paddle.mean(Tensor([12, 8, 0],"float64"), )
paddle.mean(Tensor([0, 8, 4],"float64"), )
paddle.mean(Tensor([12, 0, 8],"float32"), )
paddle.mean(Tensor([12, 8, 0],"float32"), )
paddle.mean(Tensor([0, 8],"float64"), )
paddle.mean(Tensor([0, 84],"float32"), axis=0, )
paddle.mean(Tensor([120, 0],"float32"), axis=0, )
paddle.mean(Tensor([0, 240],"float32"), )
paddle.mean(Tensor([124, 0],"float32"), )
paddle.mean(Tensor([1242, 0],"float32"), )
paddle.mean(Tensor([128, 0],"float32"), )
paddle.mean(Tensor([0, 64, 64],"float16"), )
paddle.mean(Tensor([128, 0, 64],"float16"), )
paddle.mean(Tensor([128, 64, 0],"float16"), )
paddle.mean(Tensor([0, 17],"float64"), )
paddle.mean(Tensor([13, 0],"float64"), )
paddle.mean(Tensor([0, 170],"float64"), )
paddle.mean(Tensor([14, 0],"float64"), )
paddle.mean(Tensor([0, 45],"float64"), )
paddle.mean(Tensor([15, 0, 10],"float64"), )
paddle.mean(Tensor([15, 10, 0],"float64"), )
paddle.mean(Tensor([0, 15],"float64"), )
paddle.mean(Tensor([15, 0],"float64"), )
paddle.mean(Tensor([0, 20, 5, 5],"float32"), )
paddle.mean(Tensor([15, 0, 5, 5],"float32"), )
paddle.mean(Tensor([15, 20, 0, 5],"float32"), )
paddle.mean(Tensor([15, 20, 5, 0],"float32"), )
paddle.mean(Tensor([15, 0, 3],"float64"), )
paddle.mean(Tensor([15, 3, 0],"float64"), )
paddle.mean(Tensor([0, 5],"float64"), )
paddle.mean(Tensor([0, 1, 20],"float32"), )
paddle.mean(Tensor([16, 0, 20],"float32"), )
paddle.mean(Tensor([16, 1, 0],"float32"), )
paddle.mean(Tensor([16, 0],"float64"), )
paddle.mean(Tensor([0, 150],"float32"), axis=1, )
paddle.mean(Tensor([16, 0],"float32"), axis=1, )
paddle.mean(Tensor([0, 20],"float32"), )
paddle.mean(Tensor([16, 0],"float32"), )
paddle.mean(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.mean(Tensor([0, 3],"float32"), )
paddle.mean(Tensor([0, 6],"float64"), )
paddle.mean(Tensor([0, 5, 7, 2],"float32"), )
paddle.mean(Tensor([17, 0, 7, 2],"float32"), )
paddle.mean(Tensor([17, 5, 0, 2],"float32"), )
paddle.mean(Tensor([17, 5, 7, 0],"float32"), )
paddle.mean(Tensor([0, 1, 1, 1, 1],"float16"), )
paddle.mean(Tensor([2, 0, 1, 1, 1],"float16"), )
paddle.mean(Tensor([2, 1, 0, 1, 1],"float16"), )
paddle.mean(Tensor([2, 1, 1, 0, 1],"float16"), )
paddle.mean(Tensor([2, 1, 1, 1, 0],"float16"), )
paddle.mean(Tensor([0, 1, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 0, 1, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 0, 1, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 0, 1],"float32"), )
paddle.mean(Tensor([2, 1, 1, 1, 0],"float32"), )
paddle.mean(Tensor([0, 1, 1, 2],"float16"), )
paddle.mean(Tensor([2, 0, 1, 2],"float16"), )
paddle.mean(Tensor([2, 1, 0, 2],"float16"), )
paddle.mean(Tensor([2, 1, 1, 0],"float16"), )
paddle.mean(Tensor([0, 1, 1, 2],"float64"), )
paddle.mean(Tensor([2, 0, 1, 2],"float64"), )
paddle.mean(Tensor([2, 1, 0, 2],"float64"), )
paddle.mean(Tensor([2, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1, 1, 3],"float16"), )
paddle.mean(Tensor([2, 0, 1, 3],"float16"), )
paddle.mean(Tensor([2, 1, 0, 3],"float16"), )
paddle.mean(Tensor([0, 1, 1, 3],"float32"), )
paddle.mean(Tensor([2, 0, 1, 3],"float32"), )
paddle.mean(Tensor([2, 1, 0, 3],"float32"), )
paddle.mean(Tensor([2, 1, 1, 0],"float32"), )
paddle.mean(Tensor([0, 1, 1, 3],"float64"), )
paddle.mean(Tensor([2, 0, 1, 3],"float64"), )
paddle.mean(Tensor([2, 1, 0, 3],"float64"), )
paddle.mean(Tensor([0, 1, 2, 3],"float32"), )
paddle.mean(Tensor([2, 0, 2, 3],"float32"), )
paddle.mean(Tensor([2, 1, 2, 0],"float32"), )
paddle.mean(Tensor([0, 1, 2, 4],"float16"), )
paddle.mean(Tensor([2, 0, 2, 4],"float16"), )
paddle.mean(Tensor([2, 1, 0, 4],"float16"), )
paddle.mean(Tensor([2, 1, 2, 0],"float16"), )
paddle.mean(Tensor([0, 1, 2, 4],"float64"), )
paddle.mean(Tensor([2, 0, 2, 4],"float64"), )
paddle.mean(Tensor([2, 1, 0, 4],"float64"), )
paddle.mean(Tensor([2, 1, 2, 0],"float64"), )
paddle.mean(Tensor([0, 1, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 0, 8, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 1, 0, 8],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 1, 8, 0],"float32"), axis=tuple(-3,-2,-1,), keepdim=True, )
paddle.mean(Tensor([2, 0],"float16"), )
paddle.mean(Tensor([2, 0],"float32"), )
paddle.mean(Tensor([2, 0],"float32"), name=None, )
paddle.mean(Tensor([2, 0],"float64"), )
paddle.mean(Tensor([2, 0, 10],"float32"), )
paddle.mean(Tensor([2, 10, 0],"float32"), )
paddle.mean(Tensor([0, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([2, 0, 10],"float32"), name=None, )
paddle.mean(Tensor([2, 10, 0],"float32"), name=None, )
paddle.mean(Tensor([2, 0, 10],"float64"), )
paddle.mean(Tensor([2, 10, 0],"float64"), )
paddle.mean(Tensor([0, 10, 12],"float64"), )
paddle.mean(Tensor([2, 0, 12],"float64"), )
paddle.mean(Tensor([0, 10, 4],"float32"), )
paddle.mean(Tensor([2, 0, 4],"float32"), )
paddle.mean(Tensor([0, 10, 5],"float64"), )
paddle.mean(Tensor([2, 0, 5],"float64"), )
paddle.mean(Tensor([0, 100, 3, 2, 2],"float16"), )
paddle.mean(Tensor([2, 0, 3, 2, 2],"float16"), )
paddle.mean(Tensor([2, 100, 0, 2, 2],"float16"), )
paddle.mean(Tensor([2, 100, 3, 0, 2],"float16"), )
paddle.mean(Tensor([2, 100, 3, 2, 0],"float16"), )
paddle.mean(Tensor([0, 100, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 0, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 100, 0, 2, 2],"float64"), )
paddle.mean(Tensor([2, 100, 3, 0, 2],"float64"), )
paddle.mean(Tensor([2, 100, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 100, 3, 4],"float64"), )
paddle.mean(Tensor([2, 0, 3, 4],"float64"), )
paddle.mean(Tensor([2, 100, 0, 4],"float64"), )
paddle.mean(Tensor([2, 100, 3, 0],"float64"), )
paddle.mean(Tensor([0, 100, 3, 5],"float16"), )
paddle.mean(Tensor([2, 0, 3, 5],"float16"), )
paddle.mean(Tensor([2, 100, 0, 5],"float16"), )
paddle.mean(Tensor([2, 100, 3, 0],"float16"), )
paddle.mean(Tensor([0, 100, 3, 5],"float64"), )
paddle.mean(Tensor([2, 0, 3, 5],"float64"), )
paddle.mean(Tensor([2, 100, 0, 5],"float64"), )
paddle.mean(Tensor([0, 100, 3],"float16"), )
paddle.mean(Tensor([2, 0, 3],"float16"), )
paddle.mean(Tensor([2, 100, 0],"float16"), )
paddle.mean(Tensor([0, 100, 3],"float64"), )
paddle.mean(Tensor([2, 0, 3],"float64"), )
paddle.mean(Tensor([2, 100, 0],"float64"), )
paddle.mean(Tensor([0, 100, 4, 5],"float32"), )
paddle.mean(Tensor([2, 0, 4, 5],"float32"), )
paddle.mean(Tensor([2, 100, 0, 5],"float32"), )
paddle.mean(Tensor([2, 100, 4, 0],"float32"), )
paddle.mean(Tensor([0, 100, 4, 5],"float64"), )
paddle.mean(Tensor([2, 0, 4, 5],"float64"), )
paddle.mean(Tensor([2, 100, 4, 0],"float64"), )
paddle.mean(Tensor([0, 100, 4],"float32"), )
paddle.mean(Tensor([2, 100, 0],"float32"), )
paddle.mean(Tensor([0, 12, 10],"float64"), )
paddle.mean(Tensor([2, 12, 0],"float64"), )
paddle.mean(Tensor([0, 12, 12],"float64"), )
paddle.mean(Tensor([0, 12, 16],"float64"), )
paddle.mean(Tensor([2, 0, 16],"float64"), )
paddle.mean(Tensor([0, 12, 9, 6, 6],"complex128"), )
paddle.mean(Tensor([2, 0, 9, 6, 6],"complex128"), )
paddle.mean(Tensor([2, 12, 0, 6, 6],"complex128"), )
paddle.mean(Tensor([2, 12, 9, 0, 6],"complex128"), )
paddle.mean(Tensor([2, 12, 9, 6, 0],"complex128"), )
paddle.mean(Tensor([0, 12, 9, 6, 6],"complex64"), )
paddle.mean(Tensor([2, 0, 9, 6, 6],"complex64"), )
paddle.mean(Tensor([2, 12, 0, 6, 6],"complex64"), )
paddle.mean(Tensor([2, 12, 9, 0, 6],"complex64"), )
paddle.mean(Tensor([2, 12, 9, 6, 0],"complex64"), )
paddle.mean(Tensor([0, 12, 9, 6, 6],"float16"), )
paddle.mean(Tensor([2, 0, 9, 6, 6],"float16"), )
paddle.mean(Tensor([2, 12, 0, 6, 6],"float16"), )
paddle.mean(Tensor([2, 12, 9, 0, 6],"float16"), )
paddle.mean(Tensor([2, 12, 9, 6, 0],"float16"), )
paddle.mean(Tensor([0, 12, 9, 6, 6],"float64"), )
paddle.mean(Tensor([2, 0, 9, 6, 6],"float64"), )
paddle.mean(Tensor([2, 12, 0, 6, 6],"float64"), )
paddle.mean(Tensor([2, 12, 9, 0, 6],"float64"), )
paddle.mean(Tensor([2, 12, 9, 6, 0],"float64"), )
paddle.mean(Tensor([0, 2, 10],"float32"), )
paddle.mean(Tensor([2, 2, 0],"float32"), )
paddle.mean(Tensor([0, 2, 2],"float32"), )
paddle.mean(Tensor([2, 0, 2],"float32"), )
paddle.mean(Tensor([0, 2, 3, 4],"float64"), )
paddle.mean(Tensor([2, 2, 0, 4],"float64"), )
paddle.mean(Tensor([2, 2, 3, 0],"float64"), )
paddle.mean(Tensor([0, 2, 3],"float32"), )
paddle.mean(Tensor([2, 0, 3],"float32"), )
paddle.mean(Tensor([0, 2, 3],"float64"), )
paddle.mean(Tensor([2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 2, 32, 8],"float64"), )
paddle.mean(Tensor([2, 0, 32, 8],"float64"), )
paddle.mean(Tensor([2, 2, 0, 8],"float64"), )
paddle.mean(Tensor([2, 2, 32, 0],"float64"), )
paddle.mean(Tensor([0, 2, 60, 30],"float64"), )
paddle.mean(Tensor([2, 0, 60, 30],"float64"), )
paddle.mean(Tensor([2, 2, 0, 30],"float64"), )
paddle.mean(Tensor([2, 2, 60, 0],"float64"), )
paddle.mean(Tensor([0, 20, 20, 3],"float16"), )
paddle.mean(Tensor([2, 0, 20, 3],"float16"), )
paddle.mean(Tensor([2, 20, 0, 3],"float16"), )
paddle.mean(Tensor([2, 20, 20, 0],"float16"), )
paddle.mean(Tensor([0, 20, 25],"float32"), )
paddle.mean(Tensor([2, 0, 25],"float32"), )
paddle.mean(Tensor([2, 20, 0],"float32"), )
paddle.mean(Tensor([0, 3, 1, 1],"float16"), )
paddle.mean(Tensor([2, 0, 1, 1],"float16"), )
paddle.mean(Tensor([2, 3, 0, 1],"float16"), )
paddle.mean(Tensor([2, 3, 1, 0],"float16"), )
paddle.mean(Tensor([0, 3, 1, 1],"float32"), )
paddle.mean(Tensor([2, 0, 1, 1],"float32"), )
paddle.mean(Tensor([2, 3, 0, 1],"float32"), )
paddle.mean(Tensor([2, 3, 1, 0],"float32"), )
paddle.mean(Tensor([0, 3, 1, 1],"float64"), )
paddle.mean(Tensor([2, 0, 1, 1],"float64"), )
paddle.mean(Tensor([2, 3, 0, 1],"float64"), )
paddle.mean(Tensor([2, 3, 1, 0],"float64"), )
paddle.mean(Tensor([0, 3, 10, 14, 18],"float32"), )
paddle.mean(Tensor([2, 0, 10, 14, 18],"float32"), )
paddle.mean(Tensor([2, 3, 0, 14, 18],"float32"), )
paddle.mean(Tensor([2, 3, 10, 0, 18],"float32"), )
paddle.mean(Tensor([2, 3, 10, 14, 0],"float32"), )
paddle.mean(Tensor([0, 3, 10, 5],"complex128"), )
paddle.mean(Tensor([2, 0, 10, 5],"complex128"), )
paddle.mean(Tensor([2, 3, 0, 5],"complex128"), )
paddle.mean(Tensor([2, 3, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 3, 10, 5],"complex64"), )
paddle.mean(Tensor([2, 0, 10, 5],"complex64"), )
paddle.mean(Tensor([2, 3, 0, 5],"complex64"), )
paddle.mean(Tensor([2, 3, 10, 0],"complex64"), )
paddle.mean(Tensor([0, 3, 10, 5],"float64"), )
paddle.mean(Tensor([2, 0, 10, 5],"float64"), )
paddle.mean(Tensor([2, 3, 0, 5],"float64"), )
paddle.mean(Tensor([2, 3, 10, 0],"float64"), )
paddle.mean(Tensor([2, 0, 100],"float64"), )
paddle.mean(Tensor([2, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 12, 12, 12],"float16"), )
paddle.mean(Tensor([2, 0, 12, 12, 12],"float16"), )
paddle.mean(Tensor([2, 3, 0, 12, 12],"float16"), )
paddle.mean(Tensor([2, 3, 12, 0, 12],"float16"), )
paddle.mean(Tensor([2, 3, 12, 12, 0],"float16"), )
paddle.mean(Tensor([0, 3, 12, 12, 12],"float32"), )
paddle.mean(Tensor([2, 0, 12, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 0, 12, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 0, 12],"float32"), )
paddle.mean(Tensor([2, 3, 12, 12, 0],"float32"), )
paddle.mean(Tensor([0, 3, 12, 3, 2],"complex128"), )
paddle.mean(Tensor([2, 0, 12, 3, 2],"complex128"), )
paddle.mean(Tensor([2, 3, 0, 3, 2],"complex128"), )
paddle.mean(Tensor([2, 3, 12, 0, 2],"complex128"), )
paddle.mean(Tensor([2, 3, 12, 3, 0],"complex128"), )
paddle.mean(Tensor([0, 3, 12, 3, 2],"complex64"), )
paddle.mean(Tensor([2, 0, 12, 3, 2],"complex64"), )
paddle.mean(Tensor([2, 3, 0, 3, 2],"complex64"), )
paddle.mean(Tensor([2, 3, 12, 0, 2],"complex64"), )
paddle.mean(Tensor([2, 3, 12, 3, 0],"complex64"), )
paddle.mean(Tensor([0, 3, 12, 3, 2],"float64"), )
paddle.mean(Tensor([2, 0, 12, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 0, 3, 2],"float64"), )
paddle.mean(Tensor([2, 3, 12, 0, 2],"float64"), )
paddle.mean(Tensor([2, 3, 12, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 13, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 0, 13, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 0, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 13, 0, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 13, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 3, 13, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 0, 13, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 0, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 13, 0, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 13, 10, 0],"complex64"), )
paddle.mean(Tensor([0, 3, 13, 10, 7],"float16"), )
paddle.mean(Tensor([2, 0, 13, 10, 7],"float16"), )
paddle.mean(Tensor([2, 3, 0, 10, 7],"float16"), )
paddle.mean(Tensor([2, 3, 13, 0, 7],"float16"), )
paddle.mean(Tensor([2, 3, 13, 10, 0],"float16"), )
paddle.mean(Tensor([0, 3, 13, 10, 7],"float64"), )
paddle.mean(Tensor([2, 0, 13, 10, 7],"float64"), )
paddle.mean(Tensor([2, 3, 0, 10, 7],"float64"), )
paddle.mean(Tensor([2, 3, 13, 0, 7],"float64"), )
paddle.mean(Tensor([2, 3, 13, 10, 0],"float64"), )
paddle.mean(Tensor([0, 3, 16, 16, 8],"float32"), )
paddle.mean(Tensor([2, 0, 16, 16, 8],"float32"), )
paddle.mean(Tensor([2, 3, 0, 16, 8],"float32"), )
paddle.mean(Tensor([2, 3, 16, 0, 8],"float32"), )
paddle.mean(Tensor([2, 3, 16, 16, 0],"float32"), )
paddle.mean(Tensor([0, 3, 16, 4, 10],"float32"), )
paddle.mean(Tensor([2, 0, 16, 4, 10],"float32"), )
paddle.mean(Tensor([2, 3, 0, 4, 10],"float32"), )
paddle.mean(Tensor([2, 3, 16, 0, 10],"float32"), )
paddle.mean(Tensor([2, 3, 16, 4, 0],"float32"), )
paddle.mean(Tensor([0, 3, 2, 2, 100],"float64"), )
paddle.mean(Tensor([2, 0, 2, 2, 100],"float64"), )
paddle.mean(Tensor([2, 3, 0, 2, 100],"float64"), )
paddle.mean(Tensor([2, 3, 2, 0, 100],"float64"), )
paddle.mean(Tensor([2, 3, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 2],"float32"), )
paddle.mean(Tensor([2, 0, 2, 2],"float32"), )
paddle.mean(Tensor([2, 3, 0, 2],"float32"), )
paddle.mean(Tensor([2, 3, 2, 0],"float32"), )
paddle.mean(Tensor([0, 3, 2, 2],"float64"), )
paddle.mean(Tensor([2, 0, 2, 2],"float64"), )
paddle.mean(Tensor([2, 3, 0, 2],"float64"), )
paddle.mean(Tensor([2, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 0, 2, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 0, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 2, 0, 3],"float32"), )
paddle.mean(Tensor([2, 3, 2, 3, 0],"float32"), )
paddle.mean(Tensor([2, 0, 2, 6],"float64"), )
paddle.mean(Tensor([2, 3, 0, 6],"float64"), )
paddle.mean(Tensor([0, 3, 20],"float32"), )
paddle.mean(Tensor([2, 0, 20],"float32"), )
paddle.mean(Tensor([2, 3, 0],"float32"), )
paddle.mean(Tensor([0, 3, 20],"float64"), )
paddle.mean(Tensor([2, 0, 20],"float64"), )
paddle.mean(Tensor([0, 3, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 0, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 0, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 0, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 0, 3, 3, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 0, 3],"float32"), )
paddle.mean(Tensor([2, 3, 3, 3, 0],"float32"), )
paddle.mean(Tensor([0, 3, 3, 3],"float16"), )
paddle.mean(Tensor([2, 0, 3, 3],"float16"), )
paddle.mean(Tensor([2, 3, 0, 3],"float16"), )
paddle.mean(Tensor([2, 3, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 3, 3],"float64"), )
paddle.mean(Tensor([2, 0, 3, 3],"float64"), )
paddle.mean(Tensor([2, 3, 0, 3],"float64"), )
paddle.mean(Tensor([2, 3, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 30, 20, 25],"float32"), )
paddle.mean(Tensor([2, 0, 30, 20, 25],"float32"), )
paddle.mean(Tensor([2, 3, 0, 20, 25],"float32"), )
paddle.mean(Tensor([2, 3, 30, 0, 25],"float32"), )
paddle.mean(Tensor([2, 3, 30, 20, 0],"float32"), )
paddle.mean(Tensor([2, 0, 32, 32],"float32"), )
paddle.mean(Tensor([2, 3, 0, 32],"float32"), )
paddle.mean(Tensor([2, 3, 32, 0],"float32"), )
paddle.mean(Tensor([0, 3, 32, 64],"float64"), )
paddle.mean(Tensor([2, 0, 32, 64],"float64"), )
paddle.mean(Tensor([2, 3, 0, 64],"float64"), )
paddle.mean(Tensor([2, 3, 32, 0],"float64"), )
paddle.mean(Tensor([0, 3, 4, 1],"float64"), )
paddle.mean(Tensor([2, 0, 4, 1],"float64"), )
paddle.mean(Tensor([2, 3, 4, 0],"float64"), )
paddle.mean(Tensor([0, 3, 4, 3],"float64"), )
paddle.mean(Tensor([2, 0, 4, 3],"float64"), )
paddle.mean(Tensor([0, 3, 4, 5, 2],"float64"), )
paddle.mean(Tensor([2, 0, 4, 5, 2],"float64"), )
paddle.mean(Tensor([2, 3, 0, 5, 2],"float64"), )
paddle.mean(Tensor([2, 3, 4, 0, 2],"float64"), )
paddle.mean(Tensor([2, 3, 4, 5, 0],"float64"), )
paddle.mean(Tensor([0, 3, 4, 5, 6],"float64"), )
paddle.mean(Tensor([2, 0, 4, 5, 6],"float64"), )
paddle.mean(Tensor([2, 3, 0, 5, 6],"float64"), )
paddle.mean(Tensor([2, 3, 4, 0, 6],"float64"), )
paddle.mean(Tensor([0, 3, 4, 5],"float16"), )
paddle.mean(Tensor([2, 0, 4, 5],"float16"), )
paddle.mean(Tensor([2, 3, 0, 5],"float16"), )
paddle.mean(Tensor([2, 3, 4, 0],"float16"), )
paddle.mean(Tensor([0, 3, 4, 5],"float64"), )
paddle.mean(Tensor([0, 3, 4, 50],"float64"), )
paddle.mean(Tensor([2, 0, 4, 50],"float64"), )
paddle.mean(Tensor([2, 3, 0, 50],"float64"), )
paddle.mean(Tensor([0, 3, 4],"float16"), )
paddle.mean(Tensor([2, 0, 4],"float16"), )
paddle.mean(Tensor([2, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 4],"float64"), )
paddle.mean(Tensor([2, 0, 4],"float64"), )
paddle.mean(Tensor([0, 3, 5, 100],"float64"), )
paddle.mean(Tensor([2, 0, 5, 100],"float64"), )
paddle.mean(Tensor([2, 3, 0, 100],"float64"), )
paddle.mean(Tensor([2, 3, 5, 0],"float64"), )
paddle.mean(Tensor([0, 3, 5, 5],"float16"), )
paddle.mean(Tensor([2, 0, 5, 5],"float16"), )
paddle.mean(Tensor([2, 3, 5, 0],"float16"), )
paddle.mean(Tensor([0, 3, 5, 5],"float32"), )
paddle.mean(Tensor([2, 0, 5, 5],"float32"), )
paddle.mean(Tensor([2, 3, 0, 5],"float32"), )
paddle.mean(Tensor([2, 3, 5, 0],"float32"), )
paddle.mean(Tensor([0, 3, 5, 5],"float64"), )
paddle.mean(Tensor([2, 0, 5, 5],"float64"), )
paddle.mean(Tensor([0, 3, 5, 7, 9],"float32"), )
paddle.mean(Tensor([2, 0, 5, 7, 9],"float32"), )
paddle.mean(Tensor([2, 3, 0, 7, 9],"float32"), )
paddle.mean(Tensor([2, 3, 5, 0, 9],"float32"), )
paddle.mean(Tensor([2, 3, 5, 7, 0],"float32"), )
paddle.mean(Tensor([0, 3, 5, 7, 9],"float64"), )
paddle.mean(Tensor([2, 0, 5, 7, 9],"float64"), )
paddle.mean(Tensor([2, 3, 0, 7, 9],"float64"), )
paddle.mean(Tensor([2, 3, 5, 0, 9],"float64"), )
paddle.mean(Tensor([2, 3, 5, 7, 0],"float64"), )
paddle.mean(Tensor([0, 3, 7, 10, 13],"float32"), )
paddle.mean(Tensor([2, 0, 7, 10, 13],"float32"), )
paddle.mean(Tensor([2, 3, 0, 10, 13],"float32"), )
paddle.mean(Tensor([2, 3, 7, 0, 13],"float32"), )
paddle.mean(Tensor([2, 3, 7, 10, 0],"float32"), )
paddle.mean(Tensor([0, 3, 7, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 0, 7, 10, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 7, 0, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 7, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 3, 7, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 0, 7, 10, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 7, 0, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 7, 10, 0],"complex64"), )
paddle.mean(Tensor([0, 3, 7, 10, 7],"float16"), )
paddle.mean(Tensor([2, 0, 7, 10, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 0, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 10, 0],"float16"), )
paddle.mean(Tensor([0, 3, 7, 10, 7],"float64"), )
paddle.mean(Tensor([2, 0, 7, 10, 7],"float64"), )
paddle.mean(Tensor([2, 3, 7, 0, 7],"float64"), )
paddle.mean(Tensor([2, 3, 7, 10, 0],"float64"), )
paddle.mean(Tensor([0, 3, 7, 7],"float16"), )
paddle.mean(Tensor([2, 0, 7, 7],"float16"), )
paddle.mean(Tensor([2, 3, 0, 7],"float16"), )
paddle.mean(Tensor([2, 3, 7, 0],"float16"), )
paddle.mean(Tensor([0, 3, 7, 7],"float32"), )
paddle.mean(Tensor([2, 0, 7, 7],"float32"), )
paddle.mean(Tensor([2, 3, 0, 7],"float32"), )
paddle.mean(Tensor([2, 3, 7, 0],"float32"), )
paddle.mean(Tensor([0, 3, 7, 7],"float64"), )
paddle.mean(Tensor([2, 0, 7, 7],"float64"), )
paddle.mean(Tensor([2, 3, 0, 7],"float64"), )
paddle.mean(Tensor([2, 3, 7, 0],"float64"), )
paddle.mean(Tensor([0, 3, 8, 5],"float64"), )
paddle.mean(Tensor([2, 0, 8, 5],"float64"), )
paddle.mean(Tensor([2, 3, 8, 0],"float64"), )
paddle.mean(Tensor([0, 3, 9, 6, 7],"complex128"), )
paddle.mean(Tensor([2, 0, 9, 6, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 0, 6, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 9, 0, 7],"complex128"), )
paddle.mean(Tensor([2, 3, 9, 6, 0],"complex128"), )
paddle.mean(Tensor([0, 3, 9, 6, 7],"complex64"), )
paddle.mean(Tensor([2, 0, 9, 6, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 0, 6, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 9, 0, 7],"complex64"), )
paddle.mean(Tensor([2, 3, 9, 6, 0],"complex64"), )
paddle.mean(Tensor([0, 3, 9, 6, 7],"float16"), )
paddle.mean(Tensor([2, 0, 9, 6, 7],"float16"), )
paddle.mean(Tensor([2, 3, 0, 6, 7],"float16"), )
paddle.mean(Tensor([2, 3, 9, 0, 7],"float16"), )
paddle.mean(Tensor([2, 3, 9, 6, 0],"float16"), )
paddle.mean(Tensor([0, 3, 9, 6, 7],"float64"), )
paddle.mean(Tensor([2, 0, 9, 6, 7],"float64"), )
paddle.mean(Tensor([2, 3, 0, 6, 7],"float64"), )
paddle.mean(Tensor([2, 3, 9, 0, 7],"float64"), )
paddle.mean(Tensor([2, 3, 9, 6, 0],"float64"), )
paddle.mean(Tensor([0, 300, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([2, 0, 2048],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([2, 300, 0],"float32"), axis=list[1,2,], )
paddle.mean(Tensor([0, 4, 14, 16],"float64"), )
paddle.mean(Tensor([2, 0, 14, 16],"float64"), )
paddle.mean(Tensor([2, 4, 0, 16],"float64"), )
paddle.mean(Tensor([2, 4, 14, 0],"float64"), )
paddle.mean(Tensor([0, 4, 2, 3, 10],"complex128"), )
paddle.mean(Tensor([2, 0, 2, 3, 10],"complex128"), )
paddle.mean(Tensor([2, 4, 0, 3, 10],"complex128"), )
paddle.mean(Tensor([2, 4, 2, 0, 10],"complex128"), )
paddle.mean(Tensor([2, 4, 2, 3, 0],"complex128"), )
paddle.mean(Tensor([0, 4, 2, 3, 10],"complex64"), )
paddle.mean(Tensor([2, 0, 2, 3, 10],"complex64"), )
paddle.mean(Tensor([2, 4, 0, 3, 10],"complex64"), )
paddle.mean(Tensor([2, 4, 2, 0, 10],"complex64"), )
paddle.mean(Tensor([2, 4, 2, 3, 0],"complex64"), )
paddle.mean(Tensor([0, 4, 2, 3, 10],"float64"), )
paddle.mean(Tensor([2, 0, 2, 3, 10],"float64"), )
paddle.mean(Tensor([2, 4, 0, 3, 10],"float64"), )
paddle.mean(Tensor([2, 4, 2, 0, 10],"float64"), )
paddle.mean(Tensor([2, 4, 2, 3, 0],"float64"), )
paddle.mean(Tensor([0, 4, 3, 3],"float64"), )
paddle.mean(Tensor([2, 4, 0, 3],"float64"), )
paddle.mean(Tensor([2, 4, 3, 0],"float64"), )
paddle.mean(Tensor([0, 4, 3, 5],"float32"), )
paddle.mean(Tensor([2, 0, 3, 5],"float32"), )
paddle.mean(Tensor([2, 4, 0, 5],"float32"), )
paddle.mean(Tensor([2, 4, 3, 0],"float32"), )
paddle.mean(Tensor([0, 4, 4, 4],"float32"), )
paddle.mean(Tensor([2, 0, 4, 4],"float32"), )
paddle.mean(Tensor([2, 4, 0, 4],"float32"), )
paddle.mean(Tensor([2, 4, 4, 0],"float32"), )
paddle.mean(Tensor([0, 4, 4, 4],"float64"), )
paddle.mean(Tensor([2, 0, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 0, 4],"float64"), )
paddle.mean(Tensor([2, 4, 4, 0],"float64"), )
paddle.mean(Tensor([0, 4, 4, 9],"float64"), )
paddle.mean(Tensor([2, 0, 4, 9],"float64"), )
paddle.mean(Tensor([2, 4, 0, 9],"float64"), )
paddle.mean(Tensor([0, 4, 4],"float16"), )
paddle.mean(Tensor([2, 4, 0],"float16"), )
paddle.mean(Tensor([0, 4, 4],"float64"), )
paddle.mean(Tensor([2, 4, 0],"float64"), )
paddle.mean(Tensor([0, 4, 5, 6],"float64"), )
paddle.mean(Tensor([2, 0, 5, 6],"float64"), )
paddle.mean(Tensor([2, 4, 0, 6],"float64"), )
paddle.mean(Tensor([2, 4, 5, 0],"float64"), )
paddle.mean(Tensor([0, 4, 5],"float16"), )
paddle.mean(Tensor([2, 0, 5],"float16"), )
paddle.mean(Tensor([0, 4, 5],"float32"), )
paddle.mean(Tensor([2, 0, 5],"float32"), )
paddle.mean(Tensor([2, 4, 0],"float32"), )
paddle.mean(Tensor([0, 4, 5],"float64"), )
paddle.mean(Tensor([0, 4, 64],"complex128"), )
paddle.mean(Tensor([2, 0, 64],"complex128"), )
paddle.mean(Tensor([2, 4, 0],"complex128"), )
paddle.mean(Tensor([0, 4, 64],"complex64"), )
paddle.mean(Tensor([2, 0, 64],"complex64"), )
paddle.mean(Tensor([2, 4, 0],"complex64"), )
paddle.mean(Tensor([0, 4, 64],"float32"), )
paddle.mean(Tensor([2, 0, 64],"float32"), )
paddle.mean(Tensor([0, 4, 64],"float64"), )
paddle.mean(Tensor([2, 0, 64],"float64"), )
paddle.mean(Tensor([0, 4],"float32"), )
paddle.mean(Tensor([0, 4],"float64"), )
paddle.mean(Tensor([0, 40, 5, 5],"float32"), )
paddle.mean(Tensor([2, 40, 0, 5],"float32"), )
paddle.mean(Tensor([2, 40, 5, 0],"float32"), )
paddle.mean(Tensor([0, 5, 12],"float16"), )
paddle.mean(Tensor([2, 0, 12],"float16"), )
paddle.mean(Tensor([2, 5, 0],"float16"), )
paddle.mean(Tensor([0, 5, 12],"float32"), )
paddle.mean(Tensor([2, 0, 12],"float32"), )
paddle.mean(Tensor([2, 5, 0],"float32"), )
paddle.mean(Tensor([2, 5, 0],"float64"), )
paddle.mean(Tensor([2, 0, 2],"float64"), )
paddle.mean(Tensor([0, 5, 20],"float16"), )
paddle.mean(Tensor([2, 0, 20],"float16"), )
paddle.mean(Tensor([0, 5, 20],"float64"), )
paddle.mean(Tensor([0, 5, 3, 1, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 0, 3, 1, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 0, 1, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 0, 1, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 0, 1, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 1, 0, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 1, 1, 0, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 1, 1, 1, 4, 0],"float64"), )
paddle.mean(Tensor([0, 5, 3, 3],"float64"), )
paddle.mean(Tensor([2, 5, 0, 3],"float64"), )
paddle.mean(Tensor([2, 5, 3, 0],"float64"), )
paddle.mean(Tensor([0, 5, 3, 4, 2],"float16"), )
paddle.mean(Tensor([2, 0, 3, 4, 2],"float16"), )
paddle.mean(Tensor([2, 5, 0, 4, 2],"float16"), )
paddle.mean(Tensor([2, 5, 3, 0, 2],"float16"), )
paddle.mean(Tensor([2, 5, 3, 4, 0],"float16"), )
paddle.mean(Tensor([0, 5, 3, 4, 2],"float64"), )
paddle.mean(Tensor([2, 0, 3, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 0, 4, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 0, 2],"float64"), )
paddle.mean(Tensor([2, 5, 3, 4, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5, 3],"float16"), )
paddle.mean(Tensor([2, 0, 5, 3],"float16"), )
paddle.mean(Tensor([2, 5, 0, 3],"float16"), )
paddle.mean(Tensor([2, 5, 5, 0],"float16"), )
paddle.mean(Tensor([0, 5, 5, 3],"float32"), )
paddle.mean(Tensor([2, 0, 5, 3],"float32"), )
paddle.mean(Tensor([2, 5, 0, 3],"float32"), )
paddle.mean(Tensor([2, 5, 5, 0],"float32"), )
paddle.mean(Tensor([0, 5, 5, 3],"float64"), )
paddle.mean(Tensor([2, 0, 5, 3],"float64"), )
paddle.mean(Tensor([2, 5, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5, 5, 6],"float32"), )
paddle.mean(Tensor([2, 0, 5, 5, 6],"float32"), )
paddle.mean(Tensor([2, 5, 0, 5, 6],"float32"), )
paddle.mean(Tensor([2, 5, 5, 0, 6],"float32"), )
paddle.mean(Tensor([2, 5, 5, 5, 0],"float32"), )
paddle.mean(Tensor([0, 5, 6, 7, 6],"complex128"), )
paddle.mean(Tensor([2, 0, 6, 7, 6],"complex128"), )
paddle.mean(Tensor([2, 5, 0, 7, 6],"complex128"), )
paddle.mean(Tensor([2, 5, 6, 0, 6],"complex128"), )
paddle.mean(Tensor([2, 5, 6, 7, 0],"complex128"), )
paddle.mean(Tensor([0, 5, 6, 7, 6],"complex64"), )
paddle.mean(Tensor([2, 0, 6, 7, 6],"complex64"), )
paddle.mean(Tensor([2, 5, 0, 7, 6],"complex64"), )
paddle.mean(Tensor([2, 5, 6, 0, 6],"complex64"), )
paddle.mean(Tensor([2, 5, 6, 7, 0],"complex64"), )
paddle.mean(Tensor([0, 5, 6, 7, 6],"float16"), )
paddle.mean(Tensor([2, 0, 6, 7, 6],"float16"), )
paddle.mean(Tensor([2, 5, 0, 7, 6],"float16"), )
paddle.mean(Tensor([2, 5, 6, 0, 6],"float16"), )
paddle.mean(Tensor([2, 5, 6, 7, 0],"float16"), )
paddle.mean(Tensor([0, 5, 6, 7, 6],"float64"), )
paddle.mean(Tensor([2, 0, 6, 7, 6],"float64"), )
paddle.mean(Tensor([2, 5, 0, 7, 6],"float64"), )
paddle.mean(Tensor([2, 5, 6, 0, 6],"float64"), )
paddle.mean(Tensor([2, 5, 6, 7, 0],"float64"), )
paddle.mean(Tensor([0, 6, 3, 3],"float64"), )
paddle.mean(Tensor([2, 6, 0, 3],"float64"), )
paddle.mean(Tensor([2, 6, 3, 0],"float64"), )
paddle.mean(Tensor([0, 6, 4, 4],"float64"), )
paddle.mean(Tensor([2, 6, 0, 4],"float64"), )
paddle.mean(Tensor([2, 6, 4, 0],"float64"), )
paddle.mean(Tensor([0, 6, 5, 5],"float32"), )
paddle.mean(Tensor([2, 6, 0, 5],"float32"), )
paddle.mean(Tensor([2, 6, 5, 0],"float32"), )
paddle.mean(Tensor([0, 6, 6, 3],"float32"), )
paddle.mean(Tensor([2, 0, 6, 3],"float32"), )
paddle.mean(Tensor([2, 6, 0, 3],"float32"), )
paddle.mean(Tensor([2, 6, 6, 0],"float32"), )
paddle.mean(Tensor([0, 6, 6, 3],"float64"), )
paddle.mean(Tensor([2, 0, 6, 3],"float64"), )
paddle.mean(Tensor([2, 6, 6, 0],"float64"), )
paddle.mean(Tensor([0, 6, 6, 4, 6],"float32"), )
paddle.mean(Tensor([2, 0, 6, 4, 6],"float32"), )
paddle.mean(Tensor([2, 6, 0, 4, 6],"float32"), )
paddle.mean(Tensor([2, 6, 6, 0, 6],"float32"), )
paddle.mean(Tensor([2, 6, 6, 4, 0],"float32"), )
paddle.mean(Tensor([0, 6, 6, 6],"float32"), )
paddle.mean(Tensor([2, 0, 6, 6],"float32"), )
paddle.mean(Tensor([2, 6, 0, 6],"float32"), )
paddle.mean(Tensor([0, 6, 7, 7, 7],"float32"), )
paddle.mean(Tensor([2, 0, 7, 7, 7],"float32"), )
paddle.mean(Tensor([2, 6, 0, 7, 7],"float32"), )
paddle.mean(Tensor([2, 6, 7, 0, 7],"float32"), )
paddle.mean(Tensor([2, 6, 7, 7, 0],"float32"), )
paddle.mean(Tensor([0, 6, 7, 7],"float64"), )
paddle.mean(Tensor([2, 6, 0, 7],"float64"), )
paddle.mean(Tensor([2, 6, 7, 0],"float64"), )
paddle.mean(Tensor([0, 7, 7, 3],"float16"), )
paddle.mean(Tensor([2, 0, 7, 3],"float16"), )
paddle.mean(Tensor([2, 7, 0, 3],"float16"), )
paddle.mean(Tensor([2, 7, 7, 0],"float16"), )
paddle.mean(Tensor([0, 7, 7, 3],"float32"), )
paddle.mean(Tensor([2, 0, 7, 3],"float32"), )
paddle.mean(Tensor([2, 7, 0, 3],"float32"), )
paddle.mean(Tensor([2, 7, 7, 0],"float32"), )
paddle.mean(Tensor([0, 7, 7, 3],"float64"), )
paddle.mean(Tensor([2, 0, 7, 3],"float64"), )
paddle.mean(Tensor([2, 7, 0, 3],"float64"), )
paddle.mean(Tensor([2, 7, 7, 0],"float64"), )
paddle.mean(Tensor([0, 7, 7, 7, 6],"float32"), )
paddle.mean(Tensor([2, 0, 7, 7, 6],"float32"), )
paddle.mean(Tensor([2, 7, 0, 7, 6],"float32"), )
paddle.mean(Tensor([2, 7, 7, 0, 6],"float32"), )
paddle.mean(Tensor([2, 7, 7, 7, 0],"float32"), )
paddle.mean(Tensor([2, 8, 0],"float64"), )
paddle.mean(Tensor([0, 8, 2048],"float32"), axis=1, )
paddle.mean(Tensor([2, 0, 2048],"float32"), axis=1, )
paddle.mean(Tensor([2, 8, 0],"float32"), axis=1, )
paddle.mean(Tensor([0, 8, 4, 4],"float32"), )
paddle.mean(Tensor([2, 8, 0, 4],"float32"), )
paddle.mean(Tensor([2, 8, 4, 0],"float32"), )
paddle.mean(Tensor([0, 80],"float64"), )
paddle.mean(Tensor([0, 9, 4, 4],"float16"), )
paddle.mean(Tensor([2, 0, 4, 4],"float16"), )
paddle.mean(Tensor([2, 9, 0, 4],"float16"), )
paddle.mean(Tensor([2, 9, 4, 0],"float16"), )
paddle.mean(Tensor([0, 9, 4, 4],"float64"), )
paddle.mean(Tensor([2, 9, 0, 4],"float64"), )
paddle.mean(Tensor([2, 9, 4, 0],"float64"), )
paddle.mean(Tensor([0, 9, 9, 9, 6],"float32"), )
paddle.mean(Tensor([2, 0, 9, 9, 6],"float32"), )
paddle.mean(Tensor([2, 9, 0, 9, 6],"float32"), )
paddle.mean(Tensor([2, 9, 9, 0, 6],"float32"), )
paddle.mean(Tensor([2, 9, 9, 9, 0],"float32"), )
paddle.mean(Tensor([20, 0],"float64"), )
paddle.mean(Tensor([0, 2, 2],"float64"), )
paddle.mean(Tensor([20, 0, 2],"float64"), )
paddle.mean(Tensor([20, 2, 0],"float64"), )
paddle.mean(Tensor([20, 0, 4],"float64"), )
paddle.mean(Tensor([0, 2, 5, 7, 3],"float32"), )
paddle.mean(Tensor([20, 0, 5, 7, 3],"float32"), )
paddle.mean(Tensor([20, 2, 0, 7, 3],"float32"), )
paddle.mean(Tensor([20, 2, 5, 0, 3],"float32"), )
paddle.mean(Tensor([20, 2, 5, 7, 0],"float32"), )
paddle.mean(Tensor([20, 0, 3],"float64"), )
paddle.mean(Tensor([20, 3, 0],"float64"), )
paddle.mean(Tensor([0, 30],"float16"), )
paddle.mean(Tensor([20, 0],"float16"), )
paddle.mean(Tensor([0, 30],"float32"), )
paddle.mean(Tensor([20, 0],"float32"), )
paddle.mean(Tensor([0, 30],"float64"), )
paddle.mean(Tensor([0, 5, 2],"float16"), )
paddle.mean(Tensor([20, 0, 2],"float16"), )
paddle.mean(Tensor([20, 5, 0],"float16"), )
paddle.mean(Tensor([20, 5, 0],"float64"), )
paddle.mean(Tensor([20, 0, 7, 2],"float32"), )
paddle.mean(Tensor([20, 5, 0, 2],"float32"), )
paddle.mean(Tensor([20, 5, 7, 0],"float32"), )
paddle.mean(Tensor([0, 14],"float64"), )
paddle.mean(Tensor([22, 0],"float64"), )
paddle.mean(Tensor([0, 2, 5, 6, 3],"float32"), )
paddle.mean(Tensor([25, 0, 5, 6, 3],"float32"), )
paddle.mean(Tensor([25, 2, 0, 6, 3],"float32"), )
paddle.mean(Tensor([25, 2, 5, 0, 3],"float32"), )
paddle.mean(Tensor([25, 2, 5, 6, 0],"float32"), )
paddle.mean(Tensor([0, 5, 6, 2],"float32"), )
paddle.mean(Tensor([25, 0, 6, 2],"float32"), )
paddle.mean(Tensor([25, 5, 0, 2],"float32"), )
paddle.mean(Tensor([25, 5, 6, 0],"float32"), )
paddle.mean(Tensor([253, 0],"float64"), )
paddle.mean(Tensor([0, 1, 10],"float16"), )
paddle.mean(Tensor([3, 0, 10],"float16"), )
paddle.mean(Tensor([3, 1, 0],"float16"), )
paddle.mean(Tensor([3, 10, 0],"float16"), )
paddle.mean(Tensor([3, 0, 10],"float64"), )
paddle.mean(Tensor([3, 10, 0],"float64"), )
paddle.mean(Tensor([3, 0, 12],"float64"), )
paddle.mean(Tensor([0, 10, 5, 5],"float64"), )
paddle.mean(Tensor([3, 0, 5, 5],"float64"), )
paddle.mean(Tensor([3, 10, 0, 5],"float64"), )
paddle.mean(Tensor([3, 10, 5, 0],"float64"), )
paddle.mean(Tensor([0, 10, 8],"complex128"), )
paddle.mean(Tensor([3, 0, 8],"complex128"), )
paddle.mean(Tensor([3, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 10, 8],"complex64"), )
paddle.mean(Tensor([3, 0, 8],"complex64"), )
paddle.mean(Tensor([3, 10, 0],"complex64"), )
paddle.mean(Tensor([0, 10, 8],"float64"), )
paddle.mean(Tensor([3, 0, 8],"float64"), )
paddle.mean(Tensor([3, 0],"float32"), )
paddle.mean(Tensor([0, 15, 15],"float64"), )
paddle.mean(Tensor([3, 0, 15],"float64"), )
paddle.mean(Tensor([3, 15, 0],"float64"), )
paddle.mean(Tensor([0, 16, 15],"float64"), )
paddle.mean(Tensor([3, 16, 0],"float64"), )
paddle.mean(Tensor([0, 2, 1, 4],"float64"), )
paddle.mean(Tensor([3, 0, 1, 4],"float64"), )
paddle.mean(Tensor([3, 2, 0, 4],"float64"), )
paddle.mean(Tensor([3, 2, 1, 0],"float64"), )
paddle.mean(Tensor([0, 2, 12, 12],"float64"), )
paddle.mean(Tensor([3, 0, 12, 12],"float64"), )
paddle.mean(Tensor([3, 2, 0, 12],"float64"), )
paddle.mean(Tensor([3, 2, 12, 0],"float64"), )
paddle.mean(Tensor([0, 2, 12, 4, 4],"float32"), )
paddle.mean(Tensor([3, 0, 12, 4, 4],"float32"), )
paddle.mean(Tensor([3, 2, 0, 4, 4],"float32"), )
paddle.mean(Tensor([3, 2, 12, 0, 4],"float32"), )
paddle.mean(Tensor([3, 2, 12, 4, 0],"float32"), )
paddle.mean(Tensor([0, 2, 2, 1, 10],"float16"), )
paddle.mean(Tensor([3, 0, 2, 1, 10],"float16"), )
paddle.mean(Tensor([3, 2, 0, 1, 10],"float16"), )
paddle.mean(Tensor([3, 2, 2, 0, 10],"float16"), )
paddle.mean(Tensor([3, 2, 2, 1, 0],"float16"), )
paddle.mean(Tensor([0, 2, 2, 1, 10],"float64"), )
paddle.mean(Tensor([3, 0, 2, 1, 10],"float64"), )
paddle.mean(Tensor([3, 2, 0, 1, 10],"float64"), )
paddle.mean(Tensor([3, 2, 2, 0, 10],"float64"), )
paddle.mean(Tensor([3, 2, 2, 1, 0],"float64"), )
paddle.mean(Tensor([0, 2, 2, 4, 5, 2],"float16"), )
paddle.mean(Tensor([3, 0, 2, 4, 5, 2],"float16"), )
paddle.mean(Tensor([3, 2, 0, 4, 5, 2],"float16"), )
paddle.mean(Tensor([3, 2, 2, 0, 5, 2],"float16"), )
paddle.mean(Tensor([3, 2, 2, 4, 0, 2],"float16"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 0],"float16"), )
paddle.mean(Tensor([0, 2, 2, 4, 5, 2],"float64"), )
paddle.mean(Tensor([3, 0, 2, 4, 5, 2],"float64"), )
paddle.mean(Tensor([3, 2, 0, 4, 5, 2],"float64"), )
paddle.mean(Tensor([3, 2, 2, 0, 5, 2],"float64"), )
paddle.mean(Tensor([3, 2, 2, 4, 0, 2],"float64"), )
paddle.mean(Tensor([3, 2, 2, 4, 5, 0],"float64"), )
paddle.mean(Tensor([0, 2, 2, 4],"float64"), )
paddle.mean(Tensor([3, 0, 2, 4],"float64"), )
paddle.mean(Tensor([3, 2, 2, 0],"float64"), )
paddle.mean(Tensor([0, 2, 32, 16, 8],"float16"), )
paddle.mean(Tensor([3, 0, 32, 16, 8],"float16"), )
paddle.mean(Tensor([3, 2, 0, 16, 8],"float16"), )
paddle.mean(Tensor([3, 2, 32, 0, 8],"float16"), )
paddle.mean(Tensor([3, 2, 32, 16, 0],"float16"), )
paddle.mean(Tensor([0, 2, 32, 16, 8],"float32"), )
paddle.mean(Tensor([3, 0, 32, 16, 8],"float32"), )
paddle.mean(Tensor([3, 2, 0, 16, 8],"float32"), )
paddle.mean(Tensor([3, 2, 32, 0, 8],"float32"), )
paddle.mean(Tensor([3, 2, 32, 16, 0],"float32"), )
paddle.mean(Tensor([0, 2, 33, 19, 7],"float32"), )
paddle.mean(Tensor([3, 0, 33, 19, 7],"float32"), )
paddle.mean(Tensor([3, 2, 0, 19, 7],"float32"), )
paddle.mean(Tensor([3, 2, 33, 0, 7],"float32"), )
paddle.mean(Tensor([3, 2, 33, 19, 0],"float32"), )
paddle.mean(Tensor([0, 2, 5, 10],"float16"), )
paddle.mean(Tensor([3, 0, 5, 10],"float16"), )
paddle.mean(Tensor([3, 2, 0, 10],"float16"), )
paddle.mean(Tensor([3, 2, 5, 0],"float16"), )
paddle.mean(Tensor([0, 2, 5, 10],"float64"), )
paddle.mean(Tensor([3, 0, 5, 10],"float64"), )
paddle.mean(Tensor([3, 2, 0, 10],"float64"), )
paddle.mean(Tensor([3, 2, 5, 0],"float64"), )
paddle.mean(Tensor([0, 2, 5, 6],"float64"), )
paddle.mean(Tensor([3, 0, 5, 6],"float64"), )
paddle.mean(Tensor([3, 2, 0, 6],"float64"), )
paddle.mean(Tensor([0, 2, 6],"float64"), )
paddle.mean(Tensor([3, 0, 6],"float64"), )
paddle.mean(Tensor([3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 2, 64, 32],"float64"), )
paddle.mean(Tensor([3, 0, 64, 32],"float64"), )
paddle.mean(Tensor([3, 2, 0, 32],"float64"), )
paddle.mean(Tensor([3, 2, 64, 0],"float64"), )
paddle.mean(Tensor([0, 2, 66, 40],"float64"), )
paddle.mean(Tensor([3, 0, 66, 40],"float64"), )
paddle.mean(Tensor([3, 2, 0, 40],"float64"), )
paddle.mean(Tensor([3, 2, 66, 0],"float64"), )
paddle.mean(Tensor([0, 2, 7, 7],"float64"), )
paddle.mean(Tensor([3, 0, 7, 7],"float64"), )
paddle.mean(Tensor([3, 2, 0, 7],"float64"), )
paddle.mean(Tensor([3, 2, 7, 0],"float64"), )
paddle.mean(Tensor([0, 2, 8, 66, 40],"float64"), )
paddle.mean(Tensor([3, 0, 8, 66, 40],"float64"), )
paddle.mean(Tensor([3, 2, 0, 66, 40],"float64"), )
paddle.mean(Tensor([3, 2, 8, 0, 40],"float64"), )
paddle.mean(Tensor([3, 2, 8, 66, 0],"float64"), )
paddle.mean(Tensor([0, 20, 1],"float16"), )
paddle.mean(Tensor([3, 0, 1],"float16"), )
paddle.mean(Tensor([3, 20, 0],"float16"), )
paddle.mean(Tensor([0, 20, 1],"float32"), )
paddle.mean(Tensor([3, 0, 1],"float32"), )
paddle.mean(Tensor([3, 20, 0],"float32"), )
paddle.mean(Tensor([0, 20],"float16"), )
paddle.mean(Tensor([3, 0],"float16"), )
paddle.mean(Tensor([3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 10, 10],"float32"), )
paddle.mean(Tensor([3, 0, 10, 10],"float32"), )
paddle.mean(Tensor([3, 3, 0, 10],"float32"), )
paddle.mean(Tensor([3, 3, 10, 0],"float32"), )
paddle.mean(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.mean(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.mean(Tensor([0, 3, 10, 8],"float16"), )
paddle.mean(Tensor([3, 0, 10, 8],"float16"), )
paddle.mean(Tensor([3, 3, 0, 8],"float16"), )
paddle.mean(Tensor([3, 3, 10, 0],"float16"), )
paddle.mean(Tensor([0, 3, 10, 8],"float64"), )
paddle.mean(Tensor([3, 0, 10, 8],"float64"), )
paddle.mean(Tensor([3, 3, 0, 8],"float64"), )
paddle.mean(Tensor([3, 3, 10, 0],"float64"), )
paddle.mean(Tensor([0, 3, 11, 11, 11],"float16"), )
paddle.mean(Tensor([3, 0, 11, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 0, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 0, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 11, 0],"float16"), )
paddle.mean(Tensor([0, 3, 11, 11, 11],"float32"), )
paddle.mean(Tensor([3, 0, 11, 11, 11],"float32"), )
paddle.mean(Tensor([3, 3, 0, 11, 11],"float32"), )
paddle.mean(Tensor([3, 3, 11, 0, 11],"float32"), )
paddle.mean(Tensor([3, 3, 11, 11, 0],"float32"), )
paddle.mean(Tensor([0, 3, 11, 11],"float16"), )
paddle.mean(Tensor([3, 0, 11, 11],"float16"), )
paddle.mean(Tensor([3, 3, 0, 11],"float16"), )
paddle.mean(Tensor([3, 3, 11, 0],"float16"), )
paddle.mean(Tensor([0, 3, 11, 11],"float64"), )
paddle.mean(Tensor([3, 0, 11, 11],"float64"), )
paddle.mean(Tensor([3, 3, 0, 11],"float64"), )
paddle.mean(Tensor([3, 3, 11, 0],"float64"), )
paddle.mean(Tensor([0, 3, 12, 12],"float16"), )
paddle.mean(Tensor([3, 0, 12, 12],"float16"), )
paddle.mean(Tensor([3, 3, 0, 12],"float16"), )
paddle.mean(Tensor([3, 3, 12, 0],"float16"), )
paddle.mean(Tensor([0, 3, 12, 12],"float64"), )
paddle.mean(Tensor([3, 3, 0, 12],"float64"), )
paddle.mean(Tensor([3, 3, 12, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 4],"float16"), )
paddle.mean(Tensor([3, 0, 2, 4],"float16"), )
paddle.mean(Tensor([3, 3, 0, 4],"float16"), )
paddle.mean(Tensor([3, 3, 2, 0],"float16"), )
paddle.mean(Tensor([0, 3, 2, 4],"float32"), )
paddle.mean(Tensor([3, 0, 2, 4],"float32"), )
paddle.mean(Tensor([3, 3, 0, 4],"float32"), )
paddle.mean(Tensor([3, 3, 2, 0],"float32"), )
paddle.mean(Tensor([0, 3, 2, 4],"float64"), )
paddle.mean(Tensor([3, 3, 0, 4],"float64"), )
paddle.mean(Tensor([3, 3, 2, 0],"float64"), )
paddle.mean(Tensor([3, 0, 20],"float64"), )
paddle.mean(Tensor([3, 3, 0],"float64"), )
paddle.mean(Tensor([3, 0, 3, 3],"float64"), )
paddle.mean(Tensor([3, 3, 0, 3],"float64"), )
paddle.mean(Tensor([3, 3, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 3, 6],"float64"), )
paddle.mean(Tensor([3, 0, 3, 6],"float64"), )
paddle.mean(Tensor([3, 3, 0, 6],"float64"), )
paddle.mean(Tensor([3, 0, 3],"float64"), )
paddle.mean(Tensor([0, 3, 6, 4],"float16"), )
paddle.mean(Tensor([3, 0, 6, 4],"float16"), )
paddle.mean(Tensor([3, 3, 6, 0],"float16"), )
paddle.mean(Tensor([0, 3, 6, 4],"float64"), )
paddle.mean(Tensor([3, 0, 6, 4],"float64"), )
paddle.mean(Tensor([3, 3, 6, 0],"float64"), )
paddle.mean(Tensor([0, 3, 8, 12],"float64"), )
paddle.mean(Tensor([3, 0, 8, 12],"float64"), )
paddle.mean(Tensor([3, 3, 8, 0],"float64"), )
paddle.mean(Tensor([0, 4, 10],"float64"), )
paddle.mean(Tensor([3, 4, 0],"float64"), )
paddle.mean(Tensor([0, 4, 2, 6],"float64"), )
paddle.mean(Tensor([3, 0, 2, 6],"float64"), )
paddle.mean(Tensor([3, 4, 0, 6],"float64"), )
paddle.mean(Tensor([3, 4, 2, 0],"float64"), )
paddle.mean(Tensor([0, 4, 5, 3],"float16"), )
paddle.mean(Tensor([3, 0, 5, 3],"float16"), )
paddle.mean(Tensor([3, 4, 0, 3],"float16"), )
paddle.mean(Tensor([3, 4, 5, 0],"float16"), )
paddle.mean(Tensor([0, 4, 5, 3],"float32"), )
paddle.mean(Tensor([3, 0, 5, 3],"float32"), )
paddle.mean(Tensor([3, 4, 0, 3],"float32"), )
paddle.mean(Tensor([3, 4, 5, 0],"float32"), )
paddle.mean(Tensor([0, 4, 5, 3],"float64"), )
paddle.mean(Tensor([3, 0, 5, 3],"float64"), )
paddle.mean(Tensor([3, 4, 0, 3],"float64"), )
paddle.mean(Tensor([3, 4, 5, 0],"float64"), )
paddle.mean(Tensor([3, 0, 5],"float64"), )
paddle.mean(Tensor([0, 4, 64, 64],"float32"), )
paddle.mean(Tensor([3, 0, 64, 64],"float32"), )
paddle.mean(Tensor([3, 4, 0, 64],"float32"), )
paddle.mean(Tensor([3, 4, 64, 0],"float32"), )
paddle.mean(Tensor([0, 40],"float16"), )
paddle.mean(Tensor([0, 40],"float32"), )
paddle.mean(Tensor([0, 40],"float64"), )
paddle.mean(Tensor([3, 0, 2],"float64"), )
paddle.mean(Tensor([3, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 47],"float64"), )
paddle.mean(Tensor([3, 0, 47],"float64"), )
paddle.mean(Tensor([0, 5],"float32"), axis=None, )
paddle.mean(Tensor([3, 0],"float32"), axis=None, )
paddle.mean(Tensor([0, 5],"float32"), keepdim=True, )
paddle.mean(Tensor([3, 0],"float32"), keepdim=True, )
paddle.mean(Tensor([0, 6, 2, 2],"float64"), )
paddle.mean(Tensor([3, 0, 2, 2],"float64"), )
paddle.mean(Tensor([3, 6, 0, 2],"float64"), )
paddle.mean(Tensor([3, 6, 2, 0],"float64"), )
paddle.mean(Tensor([0, 7],"float64"), )
paddle.mean(Tensor([0, 8],"float32"), )
paddle.mean(Tensor([30, 0],"float64"), )
paddle.mean(Tensor([0, 10, 64],"float32"), )
paddle.mean(Tensor([30, 0, 64],"float32"), )
paddle.mean(Tensor([30, 10, 0],"float32"), )
paddle.mean(Tensor([0, 15],"float32"), )
paddle.mean(Tensor([30, 0],"float32"), )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=-1, keepdim=False, )
paddle.mean(Tensor([0, 200, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([30, 0, 40],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([30, 200, 0],"float32"), axis=list[0,2,], keepdim=False, )
paddle.mean(Tensor([32, 0],"float32"), )
paddle.mean(Tensor([32, 0],"float64"), )
paddle.mean(Tensor([0, 32],"float32"), )
paddle.mean(Tensor([0, 32],"float64"), )
paddle.mean(Tensor([0, 16],"float64"), )
paddle.mean(Tensor([36, 0],"float64"), )
paddle.mean(Tensor([4, 0, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 0, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 0, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 1, 0],"float16"), )
paddle.mean(Tensor([0, 1, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 0, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 0, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1, 0, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1, 1, 1],"float16"), )
paddle.mean(Tensor([4, 0, 1, 1],"float16"), )
paddle.mean(Tensor([4, 1, 0, 1],"float16"), )
paddle.mean(Tensor([4, 1, 1, 0],"float16"), )
paddle.mean(Tensor([0, 1, 1, 1],"float64"), )
paddle.mean(Tensor([4, 0, 1, 1],"float64"), )
paddle.mean(Tensor([4, 1, 0, 1],"float64"), )
paddle.mean(Tensor([4, 1, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1, 2, 2, 2],"float16"), )
paddle.mean(Tensor([4, 0, 2, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 0, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 0, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 2, 0],"float16"), )
paddle.mean(Tensor([0, 1, 2, 2, 2],"float32"), )
paddle.mean(Tensor([4, 0, 2, 2, 2],"float32"), )
paddle.mean(Tensor([4, 1, 0, 2, 2],"float32"), )
paddle.mean(Tensor([4, 1, 2, 0, 2],"float32"), )
paddle.mean(Tensor([4, 1, 2, 2, 0],"float32"), )
paddle.mean(Tensor([0, 1, 2, 2],"float16"), )
paddle.mean(Tensor([4, 0, 2, 2],"float16"), )
paddle.mean(Tensor([4, 1, 0, 2],"float16"), )
paddle.mean(Tensor([4, 1, 2, 0],"float16"), )
paddle.mean(Tensor([0, 1, 2, 2],"float64"), )
paddle.mean(Tensor([4, 0, 2, 2],"float64"), )
paddle.mean(Tensor([4, 1, 0, 2],"float64"), )
paddle.mean(Tensor([4, 1, 2, 0],"float64"), )
paddle.mean(Tensor([0, 1, 6],"float16"), )
paddle.mean(Tensor([4, 0, 6],"float16"), )
paddle.mean(Tensor([4, 1, 0],"float16"), )
paddle.mean(Tensor([0, 1, 6],"float64"), )
paddle.mean(Tensor([4, 0, 6],"float64"), )
paddle.mean(Tensor([4, 1, 0],"float64"), )
paddle.mean(Tensor([4, 0],"float32"), )
paddle.mean(Tensor([4, 0],"float64"), )
paddle.mean(Tensor([0, 10, 10, 10],"float16"), )
paddle.mean(Tensor([4, 0, 10, 10],"float16"), )
paddle.mean(Tensor([4, 10, 0, 10],"float16"), )
paddle.mean(Tensor([4, 10, 10, 0],"float16"), )
paddle.mean(Tensor([0, 10, 64],"float64"), )
paddle.mean(Tensor([4, 0, 64],"float64"), )
paddle.mean(Tensor([4, 10, 0],"float64"), )
paddle.mean(Tensor([0, 10],"float32"), axis=-1, )
paddle.mean(Tensor([4, 0],"float32"), axis=-1, )
paddle.mean(Tensor([0, 100, 16],"float32"), )
paddle.mean(Tensor([4, 0, 16],"float32"), )
paddle.mean(Tensor([4, 100, 0],"float32"), )
paddle.mean(Tensor([0, 100, 4, 4],"float16"), )
paddle.mean(Tensor([4, 0, 4, 4],"float16"), )
paddle.mean(Tensor([4, 100, 0, 4],"float16"), )
paddle.mean(Tensor([4, 100, 4, 0],"float16"), )
paddle.mean(Tensor([0, 100, 4, 4],"float32"), )
paddle.mean(Tensor([4, 0, 4, 4],"float32"), )
paddle.mean(Tensor([4, 100, 0, 4],"float32"), )
paddle.mean(Tensor([4, 100, 4, 0],"float32"), )
paddle.mean(Tensor([0, 12, 4],"float64"), )
paddle.mean(Tensor([4, 0, 4],"float64"), )
paddle.mean(Tensor([4, 12, 0],"float64"), )
paddle.mean(Tensor([4, 0, 6, 6],"float32"), )
paddle.mean(Tensor([4, 2, 0, 6],"float32"), )
paddle.mean(Tensor([4, 2, 6, 0],"float32"), )
paddle.mean(Tensor([0, 2, 6],"float16"), )
paddle.mean(Tensor([4, 2, 0],"float16"), )
paddle.mean(Tensor([4, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 1],"float16"), )
paddle.mean(Tensor([4, 0, 1],"float16"), )
paddle.mean(Tensor([4, 3, 0],"float16"), )
paddle.mean(Tensor([0, 3, 1],"float64"), )
paddle.mean(Tensor([4, 0, 1],"float64"), )
paddle.mean(Tensor([4, 3, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2, 1],"float64"), )
paddle.mean(Tensor([4, 0, 2, 1],"float64"), )
paddle.mean(Tensor([4, 3, 0, 1],"float64"), )
paddle.mean(Tensor([4, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 2],"float32"), )
paddle.mean(Tensor([4, 0, 2],"float32"), )
paddle.mean(Tensor([4, 3, 0],"float32"), )
paddle.mean(Tensor([0, 3, 2],"float64"), )
paddle.mean(Tensor([4, 0, 2],"float64"), )
paddle.mean(Tensor([0, 3, 2],"float64"), name=None, )
paddle.mean(Tensor([4, 0, 2],"float64"), name=None, )
paddle.mean(Tensor([4, 3, 0],"float64"), name=None, )
paddle.mean(Tensor([0, 3],"float32"), axis=list[0,], )
paddle.mean(Tensor([4, 0],"float32"), axis=list[0,], )
paddle.mean(Tensor([0, 3],"float64"), axis=list[0,], )
paddle.mean(Tensor([4, 0],"float64"), axis=list[0,], )
paddle.mean(Tensor([0, 4, 2, 2],"float16"), )
paddle.mean(Tensor([4, 4, 0, 2],"float16"), )
paddle.mean(Tensor([4, 4, 2, 0],"float16"), )
paddle.mean(Tensor([0, 4, 2, 2],"float32"), )
paddle.mean(Tensor([4, 0, 2, 2],"float32"), )
paddle.mean(Tensor([4, 4, 0, 2],"float32"), )
paddle.mean(Tensor([4, 4, 2, 0],"float32"), )
paddle.mean(Tensor([0, 4, 6, 3],"float16"), )
paddle.mean(Tensor([4, 0, 6, 3],"float16"), )
paddle.mean(Tensor([4, 4, 0, 3],"float16"), )
paddle.mean(Tensor([4, 4, 6, 0],"float16"), )
paddle.mean(Tensor([0, 4, 6, 3],"float64"), )
paddle.mean(Tensor([4, 0, 6, 3],"float64"), )
paddle.mean(Tensor([4, 4, 0, 3],"float64"), )
paddle.mean(Tensor([4, 4, 6, 0],"float64"), )
paddle.mean(Tensor([0, 5, 1],"float64"), )
paddle.mean(Tensor([4, 5, 0],"float64"), )
paddle.mean(Tensor([4, 0, 2],"float16"), )
paddle.mean(Tensor([4, 5, 0],"float16"), )
paddle.mean(Tensor([0, 5, 3],"float64"), )
paddle.mean(Tensor([4, 0, 3],"float64"), )
paddle.mean(Tensor([0, 6, 4, 4],"float32"), )
paddle.mean(Tensor([4, 6, 0, 4],"float32"), )
paddle.mean(Tensor([4, 6, 4, 0],"float32"), )
paddle.mean(Tensor([0, 6, 7, 16],"float64"), )
paddle.mean(Tensor([4, 0, 7, 16],"float64"), )
paddle.mean(Tensor([4, 6, 0, 16],"float64"), )
paddle.mean(Tensor([4, 6, 7, 0],"float64"), )
paddle.mean(Tensor([0, 64],"float32"), axis=-1, )
paddle.mean(Tensor([0, 8, 16, 1],"float64"), )
paddle.mean(Tensor([4, 0, 16, 1],"float64"), )
paddle.mean(Tensor([4, 8, 0, 1],"float64"), )
paddle.mean(Tensor([4, 8, 16, 0],"float64"), )
paddle.mean(Tensor([0, 8, 16],"float64"), )
paddle.mean(Tensor([4, 0, 16],"float64"), )
paddle.mean(Tensor([4, 8, 0],"float64"), )
paddle.mean(Tensor([0, 8, 4],"complex128"), )
paddle.mean(Tensor([4, 0, 4],"complex128"), )
paddle.mean(Tensor([4, 8, 0],"complex128"), )
paddle.mean(Tensor([0, 9, 7, 13, 4],"complex128"), )
paddle.mean(Tensor([4, 0, 7, 13, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 0, 13, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 0, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 13, 0],"complex128"), )
paddle.mean(Tensor([0, 9, 7, 13, 4],"complex64"), )
paddle.mean(Tensor([4, 0, 7, 13, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 0, 13, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 7, 0, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 7, 13, 0],"complex64"), )
paddle.mean(Tensor([0, 9, 7, 13, 4],"float16"), )
paddle.mean(Tensor([4, 0, 7, 13, 4],"float16"), )
paddle.mean(Tensor([4, 9, 0, 13, 4],"float16"), )
paddle.mean(Tensor([4, 9, 7, 0, 4],"float16"), )
paddle.mean(Tensor([4, 9, 7, 13, 0],"float16"), )
paddle.mean(Tensor([0, 9, 7, 13, 4],"float64"), )
paddle.mean(Tensor([4, 0, 7, 13, 4],"float64"), )
paddle.mean(Tensor([4, 9, 0, 13, 4],"float64"), )
paddle.mean(Tensor([4, 9, 7, 0, 4],"float64"), )
paddle.mean(Tensor([4, 9, 7, 13, 0],"float64"), )
paddle.mean(Tensor([0, 9, 7, 5, 4],"complex128"), )
paddle.mean(Tensor([4, 0, 7, 5, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 0, 5, 4],"complex128"), )
paddle.mean(Tensor([4, 9, 7, 5, 0],"complex128"), )
paddle.mean(Tensor([0, 9, 7, 5, 4],"complex64"), )
paddle.mean(Tensor([4, 0, 7, 5, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 0, 5, 4],"complex64"), )
paddle.mean(Tensor([4, 9, 7, 5, 0],"complex64"), )
paddle.mean(Tensor([0, 9, 7, 5, 4],"float16"), )
paddle.mean(Tensor([4, 0, 7, 5, 4],"float16"), )
paddle.mean(Tensor([4, 9, 0, 5, 4],"float16"), )
paddle.mean(Tensor([4, 9, 7, 5, 0],"float16"), )
paddle.mean(Tensor([0, 9, 7, 5, 4],"float64"), )
paddle.mean(Tensor([4, 0, 7, 5, 4],"float64"), )
paddle.mean(Tensor([4, 9, 0, 5, 4],"float64"), )
paddle.mean(Tensor([4, 9, 7, 5, 0],"float64"), )
paddle.mean(Tensor([0, 9, 7, 7],"float64"), )
paddle.mean(Tensor([4, 0, 7, 7],"float64"), )
paddle.mean(Tensor([4, 9, 0, 7],"float64"), )
paddle.mean(Tensor([4, 9, 7, 0],"float64"), )
paddle.mean(Tensor([0, 120],"float32"), axis=0, )
paddle.mean(Tensor([400, 0],"float32"), axis=0, )
paddle.mean(Tensor([47, 0, 3],"float64"), )
paddle.mean(Tensor([47, 5, 0],"float64"), )
paddle.mean(Tensor([5, 0, 1],"float64"), )
paddle.mean(Tensor([5, 1, 0],"float64"), )
paddle.mean(Tensor([0, 1, 10],"float64"), )
paddle.mean(Tensor([5, 0, 10],"float64"), )
paddle.mean(Tensor([5, 0, 20],"float32"), )
paddle.mean(Tensor([5, 1, 0],"float32"), )
paddle.mean(Tensor([0, 1],"complex128"), )
paddle.mean(Tensor([5, 0],"complex128"), )
paddle.mean(Tensor([0, 1],"complex64"), )
paddle.mean(Tensor([5, 0],"complex64"), )
paddle.mean(Tensor([5, 0],"float16"), )
paddle.mean(Tensor([5, 0],"float32"), )
paddle.mean(Tensor([5, 0],"float64"), )
paddle.mean(Tensor([0, 10, 6],"float64"), )
paddle.mean(Tensor([5, 0, 6],"float64"), )
paddle.mean(Tensor([5, 10, 0],"float64"), )
paddle.mean(Tensor([0, 15],"complex128"), )
paddle.mean(Tensor([0, 15],"complex64"), )
paddle.mean(Tensor([0, 2, 10, 2],"complex128"), )
paddle.mean(Tensor([5, 0, 10, 2],"complex128"), )
paddle.mean(Tensor([5, 2, 0, 2],"complex128"), )
paddle.mean(Tensor([5, 2, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 2, 10, 2],"complex64"), )
paddle.mean(Tensor([5, 0, 10, 2],"complex64"), )
paddle.mean(Tensor([5, 2, 0, 2],"complex64"), )
paddle.mean(Tensor([5, 2, 10, 0],"complex64"), )
paddle.mean(Tensor([0, 2, 10, 2],"float64"), )
paddle.mean(Tensor([5, 0, 10, 2],"float64"), )
paddle.mean(Tensor([5, 2, 0, 2],"float64"), )
paddle.mean(Tensor([5, 2, 10, 0],"float64"), )
paddle.mean(Tensor([5, 0, 10],"float32"), )
paddle.mean(Tensor([5, 2, 0],"float32"), )
paddle.mean(Tensor([0, 2],"float64"), axis=1, )
paddle.mean(Tensor([5, 0],"float64"), axis=1, )
paddle.mean(Tensor([0, 3, 2, 1, 4],"float64"), )
paddle.mean(Tensor([5, 0, 2, 1, 4],"float64"), )
paddle.mean(Tensor([5, 3, 0, 1, 4],"float64"), )
paddle.mean(Tensor([5, 3, 2, 0, 4],"float64"), )
paddle.mean(Tensor([5, 3, 2, 1, 0],"float64"), )
paddle.mean(Tensor([0, 40],"complex128"), )
paddle.mean(Tensor([0, 40],"complex64"), )
paddle.mean(Tensor([0, 5, 1],"float16"), )
paddle.mean(Tensor([5, 0, 1],"float16"), )
paddle.mean(Tensor([5, 5, 0],"float16"), )
paddle.mean(Tensor([5, 5, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5],"float32"), )
paddle.mean(Tensor([5, 0, 5],"float32"), )
paddle.mean(Tensor([5, 5, 0],"float32"), )
paddle.mean(Tensor([5, 0, 5],"float64"), )
paddle.mean(Tensor([0, 5],"float64"), name=None, )
paddle.mean(Tensor([5, 0],"float64"), name=None, )
paddle.mean(Tensor([0, 6, 1],"float32"), )
paddle.mean(Tensor([5, 0, 1],"float32"), )
paddle.mean(Tensor([5, 6, 0],"float32"), )
paddle.mean(Tensor([0, 6, 2],"float16"), )
paddle.mean(Tensor([5, 0, 2],"float16"), )
paddle.mean(Tensor([5, 6, 0],"float16"), )
paddle.mean(Tensor([0, 6, 2],"float64"), )
paddle.mean(Tensor([5, 0, 2],"float64"), )
paddle.mean(Tensor([5, 6, 0],"float64"), )
paddle.mean(Tensor([5, 0, 4, 4],"float32"), )
paddle.mean(Tensor([5, 6, 0, 4],"float32"), )
paddle.mean(Tensor([5, 6, 4, 0],"float32"), )
paddle.mean(Tensor([0, 6],"complex128"), )
paddle.mean(Tensor([0, 6],"complex64"), )
paddle.mean(Tensor([0, 6],"float16"), )
paddle.mean(Tensor([0, 7],"complex128"), )
paddle.mean(Tensor([0, 7],"complex64"), )
paddle.mean(Tensor([0, 7],"float16"), )
paddle.mean(Tensor([0],"float32"), axis=0, )
paddle.mean(Tensor([0],"float64"), name=None, )
paddle.mean(Tensor([50, 0],"float64"), )
paddle.mean(Tensor([512, 0],"float32"), )
paddle.mean(Tensor([58, 0],"float32"), )
paddle.mean(Tensor([0, 10, 12],"complex128"), )
paddle.mean(Tensor([6, 0, 12],"complex128"), )
paddle.mean(Tensor([6, 10, 0],"complex128"), )
paddle.mean(Tensor([0, 10, 12],"complex64"), )
paddle.mean(Tensor([6, 0, 12],"complex64"), )
paddle.mean(Tensor([6, 10, 0],"complex64"), )
paddle.mean(Tensor([6, 0, 12],"float64"), )
paddle.mean(Tensor([6, 10, 0],"float64"), )
paddle.mean(Tensor([6, 0],"float16"), )
paddle.mean(Tensor([6, 0],"float64"), )
paddle.mean(Tensor([0, 2, 60, 10],"float64"), )
paddle.mean(Tensor([6, 0, 60, 10],"float64"), )
paddle.mean(Tensor([6, 2, 0, 10],"float64"), )
paddle.mean(Tensor([6, 2, 60, 0],"float64"), )
paddle.mean(Tensor([6, 0, 2, 2],"float64"), )
paddle.mean(Tensor([6, 3, 0, 2],"float64"), )
paddle.mean(Tensor([6, 3, 2, 0],"float64"), )
paddle.mean(Tensor([6, 0],"float32"), axis=list[0,], )
paddle.mean(Tensor([6, 0, 2, 2],"float16"), )
paddle.mean(Tensor([6, 4, 0, 2],"float16"), )
paddle.mean(Tensor([6, 4, 2, 0],"float16"), )
paddle.mean(Tensor([0, 4, 2, 2],"float64"), )
paddle.mean(Tensor([6, 4, 0, 2],"float64"), )
paddle.mean(Tensor([6, 4, 2, 0],"float64"), )
paddle.mean(Tensor([0, 4, 2, 3],"float16"), )
paddle.mean(Tensor([6, 0, 2, 3],"float16"), )
paddle.mean(Tensor([6, 4, 0, 3],"float16"), )
paddle.mean(Tensor([0, 4, 2, 3],"float64"), )
paddle.mean(Tensor([6, 0, 2, 3],"float64"), )
paddle.mean(Tensor([6, 4, 0, 3],"float64"), )
paddle.mean(Tensor([0, 4, 4, 4],"float16"), )
paddle.mean(Tensor([6, 0, 4, 4],"float16"), )
paddle.mean(Tensor([6, 4, 0, 4],"float16"), )
paddle.mean(Tensor([6, 4, 4, 0],"float16"), )
paddle.mean(Tensor([6, 0, 4, 4],"float64"), )
paddle.mean(Tensor([6, 4, 0, 4],"float64"), )
paddle.mean(Tensor([6, 4, 4, 0],"float64"), )
paddle.mean(Tensor([0, 5, 5, 4],"float64"), )
paddle.mean(Tensor([6, 0, 5, 4],"float64"), )
paddle.mean(Tensor([6, 5, 0, 4],"float64"), )
paddle.mean(Tensor([6, 5, 5, 0],"float64"), )
paddle.mean(Tensor([6, 0],"complex128"), )
paddle.mean(Tensor([6, 0],"complex64"), )
paddle.mean(Tensor([0, 9],"float32"), axis=1, )
paddle.mean(Tensor([6, 0],"float32"), axis=1, )
paddle.mean(Tensor([60, 0],"float16"), )
paddle.mean(Tensor([60, 0],"float64"), )
paddle.mean(Tensor([64, 0],"float16"), )
paddle.mean(Tensor([64, 0],"float32"), )
paddle.mean(Tensor([64, 0],"float64"), )
paddle.mean(Tensor([0, 64, 128],"float16"), )
paddle.mean(Tensor([64, 0, 128],"float16"), )
paddle.mean(Tensor([64, 64, 0],"float16"), )
paddle.mean(Tensor([0, 15],"float16"), )
paddle.mean(Tensor([7, 0],"float16"), )
paddle.mean(Tensor([7, 0],"float64"), )
paddle.mean(Tensor([7, 0],"float32"), )
paddle.mean(Tensor([0, 11],"float32"), axis=list[0,], )
paddle.mean(Tensor([8, 0],"float32"), axis=list[0,], )
paddle.mean(Tensor([0, 12],"float32"), axis=list[0,], )
paddle.mean(Tensor([0, 128],"float64"), )
paddle.mean(Tensor([8, 0],"float64"), )
paddle.mean(Tensor([0, 16, 64],"float32"), )
paddle.mean(Tensor([8, 0, 64],"float32"), )
paddle.mean(Tensor([8, 16, 0],"float32"), )
paddle.mean(Tensor([0, 16, 7, 7],"float32"), )
paddle.mean(Tensor([8, 0, 7, 7],"float32"), )
paddle.mean(Tensor([8, 16, 0, 7],"float32"), )
paddle.mean(Tensor([8, 16, 7, 0],"float32"), )
paddle.mean(Tensor([8, 0, 2, 1, 10],"float64"), )
paddle.mean(Tensor([8, 2, 0, 1, 10],"float64"), )
paddle.mean(Tensor([8, 2, 2, 0, 10],"float64"), )
paddle.mean(Tensor([8, 2, 2, 1, 0],"float64"), )
paddle.mean(Tensor([8, 0],"float32"), )
paddle.mean(Tensor([0, 3, 2, 3],"float64"), )
paddle.mean(Tensor([8, 0, 2, 3],"float64"), )
paddle.mean(Tensor([8, 3, 0, 3],"float64"), )
paddle.mean(Tensor([8, 3, 2, 0],"float64"), )
paddle.mean(Tensor([0, 3, 5, 4],"float64"), )
paddle.mean(Tensor([8, 0, 5, 4],"float64"), )
paddle.mean(Tensor([8, 3, 0, 4],"float64"), )
paddle.mean(Tensor([8, 3, 5, 0],"float64"), )
paddle.mean(Tensor([0, 4, 4],"float32"), )
paddle.mean(Tensor([8, 0, 4],"float32"), )
paddle.mean(Tensor([8, 4, 0],"float32"), )
paddle.mean(Tensor([8, 0, 4],"float64"), )
paddle.mean(Tensor([8, 4, 0],"float64"), )
paddle.mean(Tensor([0, 8, 16, 16],"float32"), )
paddle.mean(Tensor([8, 0, 16, 16],"float32"), )
paddle.mean(Tensor([8, 8, 0, 16],"float32"), )
paddle.mean(Tensor([8, 8, 16, 0],"float32"), )
paddle.mean(Tensor([0, 8, 16, 16],"float64"), )
paddle.mean(Tensor([8, 0, 16, 16],"float64"), )
paddle.mean(Tensor([8, 8, 0, 16],"float64"), )
paddle.mean(Tensor([8, 8, 16, 0],"float64"), )
paddle.mean(Tensor([80, 0],"float64"), )
paddle.mean(Tensor([0, 10],"float32"), axis=0, )
paddle.mean(Tensor([84, 0],"float32"), axis=0, )
paddle.mean(Tensor([9, 0],"float16"), )
paddle.mean(Tensor([9, 0],"float32"), )
paddle.mean(Tensor([9, 0],"float64"), )
paddle.mean(x=Tensor([0, 1],"float32"), )
paddle.mean(x=Tensor([1, 0],"float32"), )
paddle.mean(x=Tensor([0, 102],"float16"), )
paddle.mean(x=Tensor([2, 0],"float16"), )
paddle.mean(x=Tensor([0, 102],"float32"), )
paddle.mean(x=Tensor([2, 0],"float32"), )
paddle.mean(x=Tensor([4, 0],"float32"), )
paddle.mean(x=Tensor([0, 1],"float16"), )
paddle.mean(x=Tensor([8, 0],"float16"), )
paddle.mean(x=Tensor([8, 0],"float32"), )
paddle.minimum(Tensor([0, 1],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([1, 1],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([1],"float32"), )
paddle.minimum(Tensor([1],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.minimum(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), )
paddle.minimum(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), )
paddle.minimum(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.minimum(Tensor([0, 15],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([10, 0],"float32"), Tensor([15],"float32"), )
paddle.minimum(Tensor([10, 15],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([1025],"float32"), )
paddle.minimum(Tensor([1025],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0, 10, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 0, 5],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 10, 5],"float32"), Tensor([0, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 10, 5],"float32"), Tensor([2, 0, 5],"float32"), )
paddle.minimum(Tensor([2, 10, 5],"float32"), Tensor([2, 10, 0],"float32"), )
paddle.minimum(Tensor([0, 10, 5],"float32"), Tensor([0, 10, 5],"float32"), )
paddle.minimum(Tensor([2, 0, 5],"float32"), Tensor([2, 0, 5],"float32"), )
paddle.minimum(Tensor([2, 10, 0],"float32"), Tensor([2, 10, 0],"float32"), )
paddle.minimum(Tensor([0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([257],"float32"), )
paddle.minimum(Tensor([257],"float32"), Tensor([0],"float32"), )
paddle.minimum(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.minimum(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.minimum(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.minimum(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.minimum(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.minimum(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.minimum(Tensor([0],"int64"), Tensor([3],"int64"), )
paddle.minimum(Tensor([3],"int64"), Tensor([0],"int64"), )
paddle.minimum(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.minimum(Tensor([0, 200, 40],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([30, 0, 40],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([30, 200, 0],"float32"), Tensor([1, 1],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([0, 1],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([1, 0],"float32"), )
paddle.minimum(Tensor([0, 200, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.minimum(Tensor([30, 0, 40],"float32"), Tensor([200, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 0],"float32"), Tensor([200, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([0, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([200, 0],"float32"), )
paddle.minimum(Tensor([0, 200, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([30, 0, 40],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([0, 200, 40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([30, 0, 40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([30, 200, 0],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([0, 20, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 0, 20],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 20, 0],"float16"), Tensor([4, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 20, 20],"float16"), Tensor([0, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 20, 20],"float16"), Tensor([4, 0, 20],"float16"), )
paddle.minimum(Tensor([4, 20, 20],"float16"), Tensor([4, 20, 0],"float16"), )
paddle.minimum(Tensor([0, 20, 20],"float16"), Tensor([0, 20, 20],"float16"), )
paddle.minimum(Tensor([4, 0, 20],"float16"), Tensor([4, 0, 20],"float16"), )
paddle.minimum(Tensor([4, 20, 0],"float16"), Tensor([4, 20, 0],"float16"), )
paddle.minimum(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.minimum(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.minimum(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.minimum(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.minimum(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.minimum(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.minimum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.minimum(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.minimum(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.minimum(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.minimum(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.minimum(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.minimum(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.minimum(Tensor([0],"float32"), Tensor([30, 200, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([0, 200, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([30, 0, 40],"float32"), )
paddle.minimum(Tensor([40],"float32"), Tensor([30, 200, 0],"float32"), )
paddle.minimum(Tensor([0],"float64"), Tensor([5],"float64"), )
paddle.minimum(Tensor([5],"float64"), Tensor([0],"float64"), )
paddle.minimum(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.mm(Tensor([0, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 0],"float32"), )
paddle.mm(Tensor([0, 10],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([10, 0],"float32"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(Tensor([1, 0],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([0, 1],"float64"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([0, 1],"float64"), )
paddle.mm(Tensor([1, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([0, 12],"float32"), Tensor([12, 1],"float32"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([12, 1],"float32"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([12, 0],"float32"), )
paddle.mm(Tensor([0, 12],"float32"), Tensor([0, 1],"float32"), )
paddle.mm(Tensor([1, 0],"float32"), Tensor([12, 0],"float32"), )
paddle.mm(Tensor([0, 20],"float64"), Tensor([20, 10],"float64"), )
paddle.mm(Tensor([10, 0],"float64"), Tensor([20, 10],"float64"), )
paddle.mm(Tensor([10, 20],"float64"), Tensor([0, 10],"float64"), )
paddle.mm(Tensor([10, 20],"float64"), Tensor([20, 0],"float64"), )
paddle.mm(Tensor([0, 20],"float64"), Tensor([0, 10],"float64"), )
paddle.mm(Tensor([10, 0],"float64"), Tensor([20, 0],"float64"), )
paddle.mm(Tensor([0, 32],"float32"), Tensor([32, 32],"float32"), )
paddle.mm(Tensor([16, 0],"float32"), Tensor([32, 32],"float32"), )
paddle.mm(Tensor([16, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.mm(Tensor([16, 32],"float32"), Tensor([32, 0],"float32"), )
paddle.mm(Tensor([0, 32],"float32"), Tensor([0, 32],"float32"), )
paddle.mm(Tensor([16, 0],"float32"), Tensor([32, 0],"float32"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([10, 20],"float64"), )
paddle.mm(Tensor([20, 0],"float64"), Tensor([10, 20],"float64"), )
paddle.mm(Tensor([20, 10],"float64"), Tensor([0, 20],"float64"), )
paddle.mm(Tensor([20, 10],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([0, 10],"float64"), Tensor([0, 20],"float64"), )
paddle.mm(Tensor([20, 0],"float64"), Tensor([10, 0],"float64"), )
paddle.mm(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.mm(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.mm(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.mm(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.mm(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.mm(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.mm(Tensor([0, 4],"float32"), Tensor([4, 3],"float32"), )
paddle.mm(Tensor([3, 0],"float32"), Tensor([4, 3],"float32"), )
paddle.mm(Tensor([3, 4],"float32"), Tensor([0, 3],"float32"), )
paddle.mm(Tensor([3, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.mm(Tensor([0, 4],"float32"), Tensor([0, 3],"float32"), )
paddle.mm(Tensor([3, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.mm(Tensor([0, 5],"float32"), Tensor([5, 4],"float32"), )
paddle.mm(Tensor([4, 0],"float32"), Tensor([5, 4],"float32"), )
paddle.mm(Tensor([4, 5],"float32"), Tensor([0, 4],"float32"), )
paddle.mm(Tensor([4, 5],"float32"), Tensor([5, 0],"float32"), )
paddle.mm(Tensor([0, 5],"float32"), Tensor([0, 4],"float32"), )
paddle.mm(Tensor([4, 0],"float32"), Tensor([5, 0],"float32"), )
paddle.mm(Tensor([0, 5],"float64"), Tensor([5, 4],"float64"), )
paddle.mm(Tensor([4, 0],"float64"), Tensor([5, 4],"float64"), )
paddle.mm(Tensor([4, 5],"float64"), Tensor([0, 4],"float64"), )
paddle.mm(Tensor([4, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.mm(Tensor([0, 5],"float64"), Tensor([0, 4],"float64"), )
paddle.mm(Tensor([4, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.mm(Tensor([0, 4],"float32"), Tensor([4, 5],"float32"), )
paddle.mm(Tensor([5, 0],"float32"), Tensor([4, 5],"float32"), )
paddle.mm(Tensor([5, 4],"float32"), Tensor([0, 5],"float32"), )
paddle.mm(Tensor([5, 4],"float32"), Tensor([4, 0],"float32"), )
paddle.mm(Tensor([0, 4],"float32"), Tensor([0, 5],"float32"), )
paddle.mm(Tensor([5, 0],"float32"), Tensor([4, 0],"float32"), )
paddle.mm(Tensor([0, 4],"float64"), Tensor([4, 5],"float64"), )
paddle.mm(Tensor([5, 0],"float64"), Tensor([4, 5],"float64"), )
paddle.mm(Tensor([5, 4],"float64"), Tensor([0, 5],"float64"), )
paddle.mm(Tensor([5, 4],"float64"), Tensor([4, 0],"float64"), )
paddle.mm(Tensor([0, 4],"float64"), Tensor([0, 5],"float64"), )
paddle.mm(Tensor([5, 0],"float64"), Tensor([4, 0],"float64"), )
paddle.mv(Tensor([0, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([1, 0],"float32"), Tensor([18],"float32"), )
paddle.mv(Tensor([1, 18],"float32"), Tensor([0],"float32"), )
paddle.mv(Tensor([0, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([5, 0],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([5, 100],"float64"), Tensor([0],"float64"), )
paddle.mv(Tensor([0, 32],"float64"), Tensor([32],"float64"), )
paddle.mv(Tensor([64, 0],"float64"), Tensor([32],"float64"), )
paddle.mv(Tensor([64, 32],"float64"), Tensor([0],"float64"), )
paddle.nan_to_num(Tensor([0, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([114, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([0, 5, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 0, 3],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([148, 5, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0, 2],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([1948, 0],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([0, 3],"float32"), )
paddle.nan_to_num(Tensor([2, 0],"float32"), )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([0, 3],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([2, 0],"float32"), 1.0, None, None, )
paddle.nan_to_num(Tensor([0, 4],"float32"), )
paddle.nan_to_num(Tensor([400, 0],"float64"), neginf=-2.220446049250313e-16, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), 2, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 0, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 3, 0, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 3, 4, 0],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([0, 3],"float32"), 0, True, )
paddle.nanmean(Tensor([2, 0],"float32"), 0, True, )
paddle.nanmean(Tensor([0, 3],"float32"), 1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), 1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 0],"float32"), -1, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, False, )
paddle.nanmean(Tensor([2, 0],"float32"), None, False, )
paddle.nanmean(Tensor([0, 3],"float32"), None, True, )
paddle.nanmean(Tensor([2, 0],"float32"), None, True, )
paddle.nanmean(Tensor([0, 3],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([2, 0],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([0, 5],"float32"), axis=None, )
paddle.nanmean(Tensor([3, 0],"float32"), axis=None, )
paddle.nanmean(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nanmean(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nanmean(Tensor([0],"float32"), axis=0, )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([0, 3],"float32"), list[0.3,0.7,], 1, )
paddle.nanquantile(Tensor([2, 0],"float32"), list[0.3,0.7,], 1, )
paddle.nanquantile(Tensor([0, 3],"float64"), q=0.35, axis=0, )
paddle.nanquantile(Tensor([2, 0],"float64"), q=0.35, axis=0, )
paddle.nanquantile(Tensor([0],"float32"), 0.5, 0, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.35, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([0, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([4, 0, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([4, 7, 0],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([0, 7],"float32"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([4, 0],"float32"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([0, 7],"float64"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([4, 0],"float64"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([0],"float32"), list[0.55,0.7,], 0, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 0, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 0],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 3],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 0],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([0, 4],"float32"), )
paddle.nansum(Tensor([2, 0],"float32"), )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([3, 0],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([0, 5],"float32"), keepdim=True, )
paddle.nansum(Tensor([3, 0],"float32"), keepdim=True, )
paddle.nansum(Tensor([0],"float32"), axis=0, )
paddle.nansum(Tensor([0],"float32"), axis=list[0,], keepdim=False, name=None, )
paddle.neg(Tensor([0, 20, 1],"float32"), )
paddle.neg(Tensor([10, 0, 1],"float32"), )
paddle.neg(Tensor([10, 20, 0],"float32"), )
paddle.neg(Tensor([0, 8],"float32"), )
paddle.neg(Tensor([32, 0],"float32"), )
paddle.neg(Tensor([0, 8],"float64"), )
paddle.neg(Tensor([32, 0],"float64"), )
paddle.neg(Tensor([0, 8],"int16"), )
paddle.neg(Tensor([32, 0],"int16"), )
paddle.neg(Tensor([0, 8],"int32"), )
paddle.neg(Tensor([32, 0],"int32"), )
paddle.neg(Tensor([0, 8],"int64"), )
paddle.neg(Tensor([32, 0],"int64"), )
paddle.neg(Tensor([0, 8],"int8"), )
paddle.neg(Tensor([32, 0],"int8"), )
paddle.neg(Tensor([0, 16, 32],"float32"), )
paddle.neg(Tensor([8, 0, 32],"float32"), )
paddle.neg(Tensor([8, 16, 0],"float32"), )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([0, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 0, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 0],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([0, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 0, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 0, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 0],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[2,3,5,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[3,3,3,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([0, 3, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 0, 5, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 0, 7, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 0, 7],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.adaptive_max_pool3d(x=Tensor([2, 3, 5, 7, 0],"float32"), output_size=list[None,3,None,], )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([2, 0, 3],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([2, 2, 0],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([0, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 0, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 0],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([0],"int64"), align_corners=True, )
paddle.nn.functional.alpha_dropout(Tensor([0, 40],"bfloat16"), p=0.0, training=False, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([40, 0],"bfloat16"), p=0.0, training=False, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([0, 40],"float32"), p=0.0, training=False, name=None, )
paddle.nn.functional.alpha_dropout(Tensor([40, 0],"float32"), p=0.0, training=False, name=None, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"bfloat16"), p=0.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"bfloat16"), p=0.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"bfloat16"), p=0.0, training=False, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"bfloat16"), p=0.0, training=False, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"bfloat16"), p=1.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"bfloat16"), p=1.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"float32"), p=0.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"float32"), p=0.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"float32"), p=0.0, training=False, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"float32"), p=0.0, training=False, )
paddle.nn.functional.alpha_dropout(x=Tensor([0, 40],"float32"), p=1.0, )
paddle.nn.functional.alpha_dropout(x=Tensor([40, 0],"float32"), p=1.0, )
paddle.nn.functional.channel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.channel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.conv1d(Tensor([0, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([0, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 0, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 0, 3],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 0],"float32"), bias=Tensor([512],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 0, 3],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 0],"float32"), bias=Tensor([512],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([512, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([0, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 0, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 0],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([0, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 0],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([0, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 0, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 0],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([0, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 0, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 0],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([0, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 0, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 0],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([0],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv2d(Tensor([0, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 0, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 1, 32, 32],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 0, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 0],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 0, 3],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 0],"float32"), Tensor([3],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([0],"float32"), list[3,2,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 0, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 0],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 0, 3],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 0],"float32"), Tensor([3],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 224, 224],"float32"), Tensor([3, 3, 3, 3],"float32"), Tensor([0],"float32"), list[4,3,], 0, list[1,1,], 1, "NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 0, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 0],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([0, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 3, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 3, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 0, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 0, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([1, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 3, 34, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 0, 34, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 0, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 0],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([0, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 0, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 3, 0, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 3, 3, 0],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([10, 3, 34, 34],"float32"), Tensor([2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 0, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 0, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 1, 28, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 0, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 0, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([16, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 0, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 0, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([272, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 0, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 0, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 1, 28, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 0, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 0, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 0],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([0, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 3, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 3, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 3, 32, 32],"float32"), Tensor([6, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 0, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 0, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 0, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 0, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([32, 6, 16, 16],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,1,2,2,], stride=1, dilation=2, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,3,1,], stride=2, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 0, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([4, 16, 16, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d(Tensor([0, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 0, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 0],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 3, 16, 16],"float32"), Tensor([5, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([12, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([12, 1, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([0, 1, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([12, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([12, 1, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([12, 1, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([0, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 0, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 0, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 0],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 0, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 0, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 0],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([4, 6, 16, 16],"float32"), Tensor([8, 3, 3, 3],"float32"), Tensor([0],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 1, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 0, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 0, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([512, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 0, 28, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([0, 1, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 28],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 0, 28, 28],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 0, 28],"float32"), Tensor([6, 1, 0, 3],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 1, 28, 0],"float32"), Tensor([6, 1, 3, 0],"float32"), bias=None, padding=1, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 0, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 0, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 0],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 0, 5, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 6, 0, 5],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 6, 5, 0],"float32"), bias=Tensor([16],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d(Tensor([64, 6, 14, 14],"float32"), Tensor([16, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 0, 128],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 0],"float32"), Tensor([128, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([0, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 128],"float32"), Tensor([128, 64, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 128, 128, 128],"float32"), Tensor([0, 64, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 128, 128],"float32"), Tensor([128, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 0, 128],"float32"), Tensor([128, 64, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 128, 128, 0],"float32"), Tensor([128, 64, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 0, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 0],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 16, 16],"float32"), Tensor([0, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 16, 16],"float32"), Tensor([2, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 0, 16],"float32"), Tensor([2, 1, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 0],"float32"), Tensor([2, 1, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 64, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 64, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 64],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 0],"float32"), Tensor([256, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 64],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 256, 64, 64],"float32"), Tensor([0, 128, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 64, 64],"float32"), Tensor([256, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 0, 64],"float32"), Tensor([256, 128, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 256, 64, 0],"float32"), Tensor([256, 128, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 0, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 0],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([0, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 8, 8],"float32"), Tensor([0, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 0, 8, 8],"float32"), Tensor([4, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 0, 8],"float32"), Tensor([4, 2, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 0],"float32"), Tensor([4, 2, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 0],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([0, 10, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 0, 27, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 0, 27],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 0],"float32"), bias=Tensor([10],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 10, 27, 27],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 0],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 3, 2],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 2],"float64"), Tensor([2, 0, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 2],"float64"), Tensor([2, 2, 0, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 0],"float64"), Tensor([2, 2, 1, 0],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 0, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 0],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([0, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 0, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 0, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 2, 0],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 0, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 0],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 0, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 0, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 0],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 3, 3],"float64"), Tensor([0, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 3, 3],"float64"), Tensor([4, 0, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 0, 3],"float64"), Tensor([4, 2, 0, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 0],"float64"), Tensor([4, 2, 1, 0],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 8, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 0, 8, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 0, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 0],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([0, 6, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 6, 0, 3],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 6, 3, 0],"float32"), bias=Tensor([6],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 8, 8],"float32"), Tensor([4, 6, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([0, 5, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 3],"float32"), Tensor([3, 5, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 1, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 0, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 0],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 1, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=1, groups=4, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,), dilation=tuple(2,1,), groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 4],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 0, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 16, 16, 6],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[0,0,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 2, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 2, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([0, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 0, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 16],"float32"), Tensor([3, 5, 3, 0],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 16, 16],"float32"), Tensor([0, 5, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([3, 0, 3, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 16],"float32"), Tensor([3, 5, 0, 3],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 16, 0],"float32"), Tensor([3, 5, 3, 0],"float32"), None, output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 0, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 0],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([0, 6, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 0, 5, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 0, 5],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 0],"float32"), bias=Tensor([6],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 3, 7, 7],"float32"), Tensor([3, 6, 5, 5],"float32"), bias=Tensor([0],"float32"), padding=2, output_padding=list[1,1,], stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,1,2,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,2,], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 0, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 0],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([0, 4, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 0, 3],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 0],"float32"), Tensor([4],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 4, 16, 16],"float32"), Tensor([4, 4, 3, 3],"float32"), Tensor([0],"float32"), output_size=list[18,34,], padding="valid", stride=tuple(1,2,), dilation=1, groups=1, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 4, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 4, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 0],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 1, 1],"float32"), bias=Tensor([0],"float32"), padding=tuple(2,3,), output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="same", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=list[20,36,], data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,], dilation=list[2,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,2,1,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 0, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 0, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 0],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([0, 8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([4, 6, 16, 16],"float32"), Tensor([6, 8, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 0, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 0, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 0],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([0, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 0, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 0, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 12, 0],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([5, 3, 32, 32],"float32"), Tensor([3, 12, 12, 12],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 32, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 0, 32, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 0, 32],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 0],"float32"), Tensor([3, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([0, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 2, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 32],"float32"), Tensor([3, 2, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([0, 3, 32, 32],"float32"), Tensor([0, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 0, 32, 32],"float32"), Tensor([3, 0, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 0, 32],"float32"), Tensor([3, 2, 0, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([8, 3, 32, 0],"float32"), Tensor([3, 2, 4, 0],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv3d(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 0, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 0, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[1,1,],list[2,2,],list[2,2,],], stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([12, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 0, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([12, 1, 3, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([12, 0, 3, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([12, 1, 0, 3, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([12, 1, 3, 0, 3],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([12, 1, 3, 3, 0],"float32"), None, padding="valid", stride=1, dilation=1, groups=6, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 0, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 0, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 0],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 0, 3, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 0, 3, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 0, 3],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 0],"float32"), Tensor([8],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([4, 6, 8, 8, 8],"float32"), Tensor([8, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding="same", stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,1,2,2,3,3,], stride=1, dilation=2, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,1,], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[1,2,3,1,2,3,], stride=2, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 0, 3, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 0, 3],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 0],"float32"), Tensor([5],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[1,1,],list[0,0,],], stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 0, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 0],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([0, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 0, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 0, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 0, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 0],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 0, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 0],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([0, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 0, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 0, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 0, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 0],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 6, 6, 6],"float32"), Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 0, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 0, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 0],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([0, 2, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 0, 3, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 0, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 0],"float32"), bias=Tensor([6],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 8, 8, 8],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 4, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 4, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=2, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 1, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 1, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 0, 1],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 0],"float32"), bias=Tensor([8],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 1, 1, 1],"float32"), bias=Tensor([0],"float32"), padding=tuple(2,3,1,), output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding="valid", output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=list[12,19,12,], data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,2,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[2,2,2,], dilation=list[2,1,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[1,2,2,3,2,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 0, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 0, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 6, 8, 8, 8],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[0,0,],list[2,3,],list[1,2,],list[2,1,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 0, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 0, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 0, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 0, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 0, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 0],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([0, 8, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 0, 3, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 0, 3, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 0, 3],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 0],"float32"), bias=Tensor([8],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 8, 8, 8, 6],"float32"), Tensor([6, 8, 3, 3, 3],"float32"), bias=Tensor([0],"float32"), padding=list[list[0,0,],list[1,1,],list[2,2,],list[3,3,],list[0,0,],], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 0, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 0, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 0],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([0, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 3, 8, 8, 8],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,1,2,2,1,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[1,2,1,], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[0,0,],list[1,1,],list[1,1,],list[2,2,],], stride=1, dilation=1, groups=2, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 0, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 0, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 0],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([0, 4, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 0, 3],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 0],"float32"), Tensor([4],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 4, 8, 8, 8],"float32"), Tensor([4, 4, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=tuple(10,17,10,), padding="valid", stride=tuple(1,2,1,), dilation=1, groups=1, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([0, 5, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 0, 3, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 0, 3, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 0, 3],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 0],"float32"), Tensor([5],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 3],"float32"), Tensor([3, 5, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=1, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 1, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 0, 3, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 0, 3],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 0],"float32"), Tensor([4],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 1, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=1, groups=4, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), None, output_size=None, padding="same", stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding="valid", stride=tuple(1,2,1,), dilation=tuple(2,1,1,), groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=0, stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 0, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 0, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 0, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 0],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([0, 3, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 0, 3, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 0, 3, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 0, 3],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 0],"float32"), Tensor([6],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([4, 8, 8, 8, 4],"float32"), Tensor([4, 3, 3, 3, 3],"float32"), Tensor([0],"float32"), output_size=None, padding=list[list[0,0,],list[1,2,],list[1,2,],list[2,1,],list[0,0,],], stride=1, dilation=1, groups=2, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([0, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 0, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 0, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 0, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 0],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([0, 12, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 0, 12, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 0, 12, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 0, 12],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 0],"float32"), bias=Tensor([12],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([5, 3, 12, 32, 32],"float32"), Tensor([3, 12, 12, 12, 12],"float32"), bias=Tensor([0],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0, 10],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 10],"float32"), Tensor([10, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 10],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0, 10],"float32"), Tensor([10, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([10, 12, 0],"float32"), Tensor([10, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 15],"float32"), Tensor([10, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0],"float32"), Tensor([10, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([0, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([10, 0],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 15],"float32"), Tensor([0, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([0, 13],"float32"), Tensor([12, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 0],"float32"), Tensor([12, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([0, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([12, 0],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 13],"float32"), Tensor([0, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([12, 0],"float32"), Tensor([12, 0],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 1],"float32"), Tensor([23, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 0, 1],"float32"), Tensor([23, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 0],"float32"), Tensor([23, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([23, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 1],"float32"), Tensor([23, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 12, 1],"float32"), Tensor([0, 1, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 0, 1],"float32"), Tensor([23, 0, 10],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([23, 12, 0],"float32"), Tensor([23, 1, 0],"float32"), axis=2, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([0, 128],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 0],"float32"), Tensor([32, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([0, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 128],"float32"), Tensor([32, 0],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 128],"float32"), Tensor([0, 128],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([32, 0],"float32"), Tensor([32, 0],"float32"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), )
paddle.nn.functional.elu(Tensor([0, 20, 1],"float32"), )
paddle.nn.functional.elu(Tensor([10, 0, 1],"float32"), )
paddle.nn.functional.elu(Tensor([10, 20, 0],"float32"), )
paddle.nn.functional.elu(Tensor([0, 20],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([15, 0],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([0, 32],"float32"), )
paddle.nn.functional.elu(Tensor([2, 0],"float32"), )
paddle.nn.functional.elu(Tensor([0, 64],"float32"), )
paddle.nn.functional.elu_(Tensor([0, 20, 1],"float32"), )
paddle.nn.functional.elu_(Tensor([10, 0, 1],"float32"), )
paddle.nn.functional.elu_(Tensor([10, 20, 0],"float32"), )
paddle.nn.functional.fold(Tensor([0, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3, 0, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3, 12, 0],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 0, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 0, 1],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 0, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([0, 2, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 0, 1],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([0, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 0],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([0, 2, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 0, 3],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 0],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([0, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2, 3],"float32"), Tensor([10, 2, 3],"float32"), Tensor([10, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=True, reduction="mean", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), full=True, reduction="sum", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "mean", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), Tensor([10, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), Tensor([0, 2],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), Tensor([10, 0],"float32"), True, 1e-06, "sum", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([0, 2],"float64"), Tensor([10, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 0],"float64"), Tensor([10, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([0, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 0],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), False, 1e-06, "none", None, )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([0, 2],"float64"), Tensor([10, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 0],"float64"), Tensor([10, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([0, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), Tensor([10, 0],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), Tensor([0, 2],"float64"), full=False, reduction="none", )
paddle.nn.functional.gaussian_nll_loss(Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), Tensor([10, 0],"float64"), full=False, reduction="none", )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, )
paddle.nn.functional.glu(Tensor([5, 0],"float64"), -1, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), 0, None, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), 0, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), 1, None, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), 1, None, )
paddle.nn.functional.glu(Tensor([0, 20],"float64"), -1, None, )
paddle.nn.functional.glu(Tensor([6, 0],"float64"), -1, None, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([0, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 28, 28, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 28, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 28, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 28, 0, 2],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 28, 28, 0],"float32"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([0, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 28],"float32"), Tensor([1, 34, 34, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 28, 28],"float32"), Tensor([0, 34, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 28, 28],"float32"), Tensor([1, 0, 34, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 28],"float32"), Tensor([1, 34, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 28, 0],"float32"), Tensor([1, 34, 34, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([0, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 280, 350, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([0, 280, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 0, 350, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 280, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 280, 350, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([1, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([0, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 0, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 410, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 410, 440, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([0, 410, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 0, 440, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 410, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 410, 440, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([1, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([0, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 0, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 432, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 350],"float32"), Tensor([1, 432, 448, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 280, 350],"float32"), Tensor([0, 432, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 280, 350],"float32"), Tensor([1, 0, 448, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 350],"float32"), Tensor([1, 432, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 280, 0],"float32"), Tensor([1, 432, 448, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 32, 26],"float32"), Tensor([1, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 32, 26],"float32"), Tensor([1, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 26],"float32"), Tensor([1, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 0],"float32"), Tensor([1, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([0, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 0, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 32, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 26],"float32"), Tensor([1, 32, 26, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 32, 26],"float32"), Tensor([0, 32, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 32, 26],"float32"), Tensor([1, 0, 26, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 26],"float32"), Tensor([1, 32, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 32, 0],"float32"), Tensor([1, 32, 26, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([0, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 0, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 400, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 400, 300, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([0, 400, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 0, 300, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 400, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 400, 300, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([1, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([0, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 0, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 458, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 458, 384, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([0, 458, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 0, 384, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 458, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 458, 384, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([1, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([0, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 0, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 498, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 300],"float32"), Tensor([1, 498, 494, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 400, 300],"float32"), Tensor([0, 498, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 400, 300],"float32"), Tensor([1, 0, 494, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 300],"float32"), Tensor([1, 498, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 400, 0],"float32"), Tensor([1, 498, 494, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 410, 440],"float32"), Tensor([1, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 410, 440],"float32"), Tensor([1, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 440],"float32"), Tensor([1, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 0],"float32"), Tensor([1, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 440],"float32"), Tensor([0, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 440],"float32"), Tensor([1, 0, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 440],"float32"), Tensor([1, 415, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 440],"float32"), Tensor([1, 415, 444, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 410, 440],"float32"), Tensor([0, 415, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 410, 440],"float32"), Tensor([1, 0, 444, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 440],"float32"), Tensor([1, 415, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 410, 0],"float32"), Tensor([1, 415, 444, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 432, 448],"float32"), Tensor([1, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 432, 448],"float32"), Tensor([1, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 448],"float32"), Tensor([1, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 0],"float32"), Tensor([1, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 448],"float32"), Tensor([0, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 448],"float32"), Tensor([1, 0, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 448],"float32"), Tensor([1, 469, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 448],"float32"), Tensor([1, 469, 484, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 432, 448],"float32"), Tensor([0, 469, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 432, 448],"float32"), Tensor([1, 0, 484, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 448],"float32"), Tensor([1, 469, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 432, 0],"float32"), Tensor([1, 469, 484, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 458, 384],"float32"), Tensor([1, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 458, 384],"float32"), Tensor([1, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 384],"float32"), Tensor([1, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 0],"float32"), Tensor([1, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 384],"float32"), Tensor([0, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 384],"float32"), Tensor([1, 0, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 384],"float32"), Tensor([1, 475, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 384],"float32"), Tensor([1, 475, 404, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 458, 384],"float32"), Tensor([0, 475, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 458, 384],"float32"), Tensor([1, 0, 404, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 384],"float32"), Tensor([1, 475, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 458, 0],"float32"), Tensor([1, 475, 404, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 498, 494],"float32"), Tensor([1, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 498, 494],"float32"), Tensor([1, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 494],"float32"), Tensor([1, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 0],"float32"), Tensor([1, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 494],"float32"), Tensor([0, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 494],"float32"), Tensor([1, 0, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 494],"float32"), Tensor([1, 506, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 494],"float32"), Tensor([1, 506, 503, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 498, 494],"float32"), Tensor([0, 506, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 498, 494],"float32"), Tensor([1, 0, 503, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 494],"float32"), Tensor([1, 506, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 498, 0],"float32"), Tensor([1, 506, 503, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([1, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 64],"float32"), Tensor([1, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 0],"float32"), Tensor([1, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 0, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 64, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 64, 64, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([0, 64, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 0, 64, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 64],"float32"), Tensor([1, 64, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 0],"float32"), Tensor([1, 64, 64, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([1, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 64],"float32"), Tensor([1, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 0],"float32"), Tensor([1, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([0, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 0, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 88, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 64],"float32"), Tensor([1, 88, 88, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 64, 64],"float32"), Tensor([0, 88, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 64, 64],"float32"), Tensor([1, 0, 88, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 64],"float32"), Tensor([1, 88, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 64, 0],"float32"), Tensor([1, 88, 88, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 8, 8],"float32"), Tensor([1, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 8, 8],"float32"), Tensor([1, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 0],"float32"), Tensor([1, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([0, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 0, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 8, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 8, 8, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 8, 8],"float32"), Tensor([0, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 0, 8, 8],"float32"), Tensor([1, 0, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 0, 8],"float32"), Tensor([1, 8, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 0],"float32"), Tensor([1, 8, 8, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 2, 3, 3],"float64"), Tensor([0, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 3, 3],"float64"), Tensor([2, 0, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 0, 3],"float64"), Tensor([2, 3, 0, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 0],"float64"), Tensor([2, 3, 3, 0],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 4, 4],"float32"), Tensor([2, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 0, 4],"float32"), Tensor([2, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 0],"float32"), Tensor([2, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([0, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 0, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 4, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 4, 4, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 4, 4],"float32"), Tensor([0, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 4, 4],"float32"), Tensor([2, 0, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 0, 4],"float32"), Tensor([2, 4, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 0],"float32"), Tensor([2, 4, 4, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([0, 4, 8, 8],"float32"), Tensor([2, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 0, 8],"float32"), Tensor([2, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 0],"float32"), Tensor([2, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([0, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 0, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 8, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 8, 8, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 0, 8, 8],"float32"), Tensor([2, 0, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 0, 8],"float32"), Tensor([2, 8, 0, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 0],"float32"), Tensor([2, 8, 8, 0],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.group_norm(Tensor([0, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 0, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NDHWC", )
paddle.nn.functional.group_norm(Tensor([0, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 0, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 2, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NHWC", )
paddle.nn.functional.group_norm(Tensor([0, 3, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 0, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([2, 3, 4],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NLC", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 0, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCDHW", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3, 2],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCHW", )
paddle.nn.functional.group_norm(Tensor([0, 4, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 0, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 0],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3],"float64"), num_groups=2, weight=Tensor([0],"float64"), bias=Tensor([4],"float64"), data_format="NCL", )
paddle.nn.functional.group_norm(Tensor([2, 4, 3],"float64"), num_groups=2, weight=Tensor([4],"float64"), bias=Tensor([0],"float64"), data_format="NCL", )
paddle.nn.functional.gumbel_softmax(Tensor([0, 3, 4, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([2, 0, 4, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 0, 5],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([2, 3, 4, 0],"float32"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([0, 10],"float64"), hard=False, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 0],"float64"), hard=False, )
paddle.nn.functional.gumbel_softmax(Tensor([0, 10],"float64"), hard=True, )
paddle.nn.functional.gumbel_softmax(Tensor([20, 0],"float64"), hard=True, )
paddle.nn.functional.hardsigmoid(Tensor([0, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 0, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 144, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 144, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 144, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 16, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 16, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 16, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 240, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 240, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 288, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 288, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 288, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 576, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 576, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 576, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 96, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 96, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 96, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 0, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 120, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 120, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 144, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 144, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 16, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 16, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 240, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 240, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 288, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 288, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 480, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 480, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 480, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 576, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 576, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 672, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 672, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 672, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 72, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 72, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 72, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 96, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 96, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 960, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 960, 0, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 960, 1, 0],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([0, 200, 40],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([30, 0, 40],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([30, 200, 0],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([0, 4096],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([300, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 1024],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 120, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 120, 0, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 120, 5, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 144, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 144, 0, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 144, 5, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 16, 40, 40],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0, 40, 40],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 16, 0, 40],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 16, 40, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 240, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 240, 0, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 240, 5, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 288, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 0, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 3, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 288, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 0, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 288, 5, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 576, 3, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 576, 0, 3],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 576, 3, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 96, 10, 10],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 0, 10, 10],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 0, 10],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 10, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 96, 5, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 0, 5],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([1, 96, 5, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 120, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 120, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 120, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 1280],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 144, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 144, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 144, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 16, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0, 112, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 16, 0, 112],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 16, 112, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 184, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 184, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 184, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 200, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 200, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 200, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 240, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 240, 28, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0, 28, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 0, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 240, 28, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 288, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 288, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 0, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 0, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 288, 7, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.hardswish(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.hardswish(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.hardswish(Tensor([0, 480, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 480, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 480, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 576, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 576, 0, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 576, 7, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 672, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 672, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 0, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 672, 7, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 96, 14, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 0, 14],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 14, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 96, 28, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 0, 28],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 96, 28, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 960, 7, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 960, 0, 7],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([2, 960, 7, 0],"float32"), None, )
paddle.nn.functional.hardswish(Tensor([0, 200, 40],"float32"), )
paddle.nn.functional.hardswish(Tensor([30, 0, 40],"float32"), )
paddle.nn.functional.hardswish(Tensor([30, 200, 0],"float32"), )
paddle.nn.functional.hardtanh(Tensor([0, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([10, 0, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([10, 20, 0],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh_(Tensor([0, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh_(Tensor([10, 0, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh_(Tensor([10, 20, 0],"float32"), -1.0, 1.0, )
paddle.nn.functional.interpolate(Tensor([0, 3, 106, 125],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 106, 125],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 125],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 106, 0],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 128],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 0, 128],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([1, 3, 0],"float32"), size=list[64,], mode="linear", align_mode=1, align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 128],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 0, 128],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([1, 3, 0],"float32"), size=list[64,], scale_factor=None, mode="linear", align_corners=False, align_mode=1, data_format="NCW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 3, 159, 120],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 159, 120],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 120],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 159, 0],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 173, 145],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 173, 145],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 145],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 173, 0],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 188, 164],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 188, 164],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 164],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 188, 0],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 212, 250],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 212, 250],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 250],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 212, 0],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 251, 227],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 251, 227],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 227],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 251, 0],"float32"), size=tuple(280,280,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 256, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 200],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 256, 0],"float32"), size=tuple(180,160,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 260, 257],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 260, 257],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 257],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 260, 0],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 28, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 28, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 24],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 28, 0],"float32"), size=tuple(46,40,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 280, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 280],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 0],"float32"), size=tuple(256,200,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 280, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 350],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 280, 0],"float32"), size=tuple(300,375,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 302, 265],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 302, 265],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 265],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 302, 0],"float32"), size=tuple(224,224,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 64, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 64],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 0],"float32"), size=tuple(16,16,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 64, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0, 64],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 64, 0],"float32"), size=tuple(64,64,), mode="bilinear", data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64],"float16"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 64],"float16"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0],"float16"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 64],"float32"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 0, 64],"float32"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([1, 3, 0],"float32"), scale_factor=2, mode="linear", align_mode=1, align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 6, 6, 6],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6, 6],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 0, 6, 6],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 0, 6],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 0],"float16"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 6, 6, 6],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6, 6],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 0, 6, 6],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 0, 6],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 6, 0],"float32"), scale_factor=list[2,2,2,], mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([0, 2, 6, 6],"float16"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6],"float16"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 0, 6],"float16"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 0],"float16"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 2, 6, 6],"float32"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6],"float32"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 0, 6],"float32"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 2, 6, 0],"float32"), scale_factor=list[2,2,], mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 3, 4, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 4, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 4, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 0, 4],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 0],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 4, 4, 4],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 4, 4, 4],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 4, 4],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 0, 4],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 4, 4, 0],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NCDHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 5, 5],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 5, 5],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 5],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 0],"float16"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 5, 5],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 0, 5, 5],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 5],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([2, 3, 5, 0],"float32"), size=list[3,3,], mode="bicubic", align_corners=True, data_format="NCHW", )
paddle.nn.functional.interpolate(Tensor([0, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 6, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 0, 6],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 0],"float32"), size=None, scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 6, 6],"float32"), size=None, scale_factor=Tensor([0],"int64"), mode="trilinear", align_corners=False, align_mode=0, data_format="NCDHW", name=None, )
paddle.nn.functional.interpolate(Tensor([0, 3, 6, 6],"float32"), size=list[12,12,], mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 0, 6, 6],"float32"), size=list[12,12,], mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 3, 0, 6],"float32"), size=list[12,12,], mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([2, 3, 6, 0],"float32"), size=list[12,12,], mode="bicubic", align_corners=False, )
paddle.nn.functional.interpolate(Tensor([0, 4, 4, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 0, 4, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 0, 4, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 0, 3],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 0],"float16"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([0, 4, 4, 4, 3],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 0, 4, 4, 3],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 0, 4, 3],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 0, 3],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(Tensor([2, 4, 4, 4, 0],"float32"), size=list[3,3,3,], mode="trilinear", align_corners=True, align_mode=1, data_format="NDHWC", )
paddle.nn.functional.interpolate(x=Tensor([0, 2, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 6, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 0, 6, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 0, 6],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 0],"int64"), scale_factor=Tensor([3],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([2, 2, 6, 6, 6],"int64"), scale_factor=Tensor([0],"int64"), mode="nearest", align_corners=False, data_format="NCDHW", )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 5, 7, 7],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 5, 7, 7],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0, 7, 7],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 5, 0, 7],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 5, 7, 0],"float32"), mode="area", size=list[2,3,5,], )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 6, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0, 6, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 0, 6],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 0],"float32"), scale_factor=Tensor([3],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6, 6],"float32"), scale_factor=Tensor([0],"int64"), mode="trilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 6, 6],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 6, 6],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0, 6],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 0],"float32"), size=list[12,12,], mode="bilinear", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 6, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0, 6],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 0],"int64"), scale_factor=Tensor([2],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6, 6],"int64"), scale_factor=Tensor([0],"int64"), mode="nearest", align_corners=False, )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 6],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 6],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0],"float32"), scale_factor=Tensor([1],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 6],"float32"), scale_factor=Tensor([0],"float32"), mode="LINEAR", align_corners=False, data_format="NCW", )
paddle.nn.functional.interpolate(x=Tensor([0, 3, 7, 7],"float32"), mode="area", size=list[2,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 0, 7, 7],"float32"), mode="area", size=list[2,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 0, 7],"float32"), mode="area", size=list[2,5,], )
paddle.nn.functional.interpolate(x=Tensor([2, 3, 7, 0],"float32"), mode="area", size=list[2,5,], )
paddle.nn.functional.interpolate(x=Tensor([0, 128, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 0, 38, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 0, 38],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 0],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 128, 38, 38],"float32"), size=Tensor([0],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([0, 256, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 0, 19, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 0, 19],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 0],"float32"), size=Tensor([2],"int32"), mode="nearest", )
paddle.nn.functional.interpolate(x=Tensor([4, 256, 19, 19],"float32"), size=Tensor([0],"int32"), mode="nearest", )
paddle.nn.functional.layer_norm(Tensor([0, 20],"float16"), list[20,], Tensor([20],"float16"), Tensor([20],"float16"), )
paddle.nn.functional.layer_norm(Tensor([10, 0],"float16"), list[20,], Tensor([20],"float16"), Tensor([20],"float16"), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list[20,], Tensor([0],"float16"), Tensor([20],"float16"), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list[20,], Tensor([20],"float16"), Tensor([0],"float16"), )
paddle.nn.functional.layer_norm(Tensor([0, 20],"float16"), list[20,], Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.nn.functional.layer_norm(Tensor([10, 0],"float16"), list[20,], Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list[20,], Tensor([0],"float32"), Tensor([20],"float32"), )
paddle.nn.functional.layer_norm(Tensor([10, 20],"float16"), list[20,], Tensor([20],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 64, 64],"float32"), list[64,], None, None, )
paddle.nn.functional.layer_norm(Tensor([128, 0, 64],"float32"), list[64,], None, None, )
paddle.nn.functional.layer_norm(Tensor([128, 64, 0],"float32"), list[64,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([128, 0, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([128, 64, 0],"float32"), list[64,], Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([128, 64, 64],"float32"), list[64,], Tensor([0],"float32"), Tensor([64],"float32"), )
paddle.nn.functional.layer_norm(Tensor([128, 64, 64],"float32"), list[64,], Tensor([64],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 129],"float32"), list[129,], Tensor([129],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([17, 0],"float32"), list[129,], Tensor([129],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([17, 129],"float32"), list[129,], Tensor([0],"float32"), None, )
paddle.nn.functional.layer_norm(Tensor([0, 100],"float32"), list[100,], weight=Tensor([100],"float32"), bias=Tensor([100],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0],"float32"), list[100,], weight=Tensor([100],"float32"), bias=Tensor([100],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 100],"float32"), list[100,], weight=Tensor([0],"float32"), bias=Tensor([100],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 100],"float32"), list[100,], weight=Tensor([100],"float32"), bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 3, 10, 10],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([2, 0, 10, 10],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([2, 3, 0, 10],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([2, 3, 10, 0],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([2, 3, 10, 10],"float32"), list[3,10,10,], Tensor([0],"float32"), Tensor([300],"float32"), )
paddle.nn.functional.layer_norm(Tensor([2, 3, 10, 10],"float32"), list[3,10,10,], Tensor([300],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 32, 128],"float32"), list[32,128,], )
paddle.nn.functional.layer_norm(Tensor([2, 0, 128],"float32"), list[32,128,], )
paddle.nn.functional.layer_norm(Tensor([2, 32, 0],"float32"), list[32,128,], )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([0],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([0],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float64"), list[6,6,3,], weight=None, bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float64"), list[6,6,3,], weight=None, bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float64"), list[6,6,3,], weight=None, bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=Tensor([0],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([0],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 0, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 0, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 0],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([0],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([0],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 768],"float32"), list[768,], None, None, )
paddle.nn.functional.layer_norm(Tensor([2, 0],"float32"), list[768,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 30],"float32"), list[10,60,30,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 0, 60, 30],"float32"), list[10,60,30,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 0, 30],"float32"), list[10,60,30,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 0],"float32"), list[10,60,30,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 30],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 0, 60, 30],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 0, 30],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 0],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 30],"float32"), list[10,60,30,], weight=Tensor([0],"float32"), bias=Tensor([18000],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 30],"float32"), list[10,60,30,], weight=Tensor([18000],"float32"), bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 70],"float32"), list[10,60,70,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 0, 60, 70],"float32"), list[10,60,70,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 0, 70],"float32"), list[10,60,70,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 0],"float32"), list[10,60,70,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 60, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 0, 60, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 0, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 0],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 70],"float32"), list[60,70,], weight=Tensor([0],"float32"), bias=Tensor([4200],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([20, 10, 60, 70],"float32"), list[60,70,], weight=Tensor([4200],"float32"), bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 4],"float32"), list[4,], None, None, )
paddle.nn.functional.layer_norm(Tensor([3, 0],"float32"), list[4,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 4],"float32"), list[4,], Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 0],"float32"), list[4,], Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 4],"float32"), list[4,], Tensor([0],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 4],"float32"), list[4,], Tensor([4],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 10, 4, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([4, 0, 4, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 0, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 0],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([0, 10, 4, 4],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([4, 0, 4, 4],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([4, 10, 0, 4],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 0],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([0, 10, 4, 4],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([4, 0, 4, 4],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([4, 10, 0, 4],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 0],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([0, 64, 128],"float32"), list[64,128,], None, None, )
paddle.nn.functional.layer_norm(Tensor([64, 0, 128],"float32"), list[64,128,], None, None, )
paddle.nn.functional.layer_norm(Tensor([64, 64, 0],"float32"), list[64,128,], None, None, )
paddle.nn.functional.layer_norm(Tensor([0, 64, 128],"float32"), list[64,128,], Tensor([8192],"float32"), Tensor([8192],"float32"), )
paddle.nn.functional.layer_norm(Tensor([64, 0, 128],"float32"), list[64,128,], Tensor([8192],"float32"), Tensor([8192],"float32"), )
paddle.nn.functional.layer_norm(Tensor([64, 64, 0],"float32"), list[64,128,], Tensor([8192],"float32"), Tensor([8192],"float32"), )
paddle.nn.functional.layer_norm(Tensor([64, 64, 128],"float32"), list[64,128,], Tensor([0],"float32"), Tensor([8192],"float32"), )
paddle.nn.functional.layer_norm(Tensor([64, 64, 128],"float32"), list[64,128,], Tensor([8192],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.layer_norm(Tensor([0, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 0, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 128, 0],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 128, 256],"float32"), list[256,], weight=Tensor([0],"float32"), bias=Tensor([256],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([8, 128, 256],"float32"), list[256,], weight=Tensor([256],"float32"), bias=Tensor([0],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([0, 512],"float32"), list[512,], None, None, )
paddle.nn.functional.layer_norm(Tensor([8, 0],"float32"), list[512,], None, None, )
paddle.nn.functional.leaky_relu(Tensor([0, 1, 16, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 16, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 0, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 16, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 1, 32, 32],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 32, 32],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 0, 32],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 32, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 1024, 8, 8],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 8, 8],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 1024, 0, 8],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 1024, 8, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 128, 128, 128],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 128, 128],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 0, 128],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 128, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 128, 64, 64],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 64, 64],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 0, 64],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 128, 64, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 2, 16, 16],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 16, 16],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 2, 0, 16],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 2, 16, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 2048, 4, 4],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 4, 4],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 2048, 0, 4],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 2048, 4, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 256, 32, 32],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 32, 32],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 0, 32],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 32, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 256, 64, 64],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 64, 64],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 0, 64],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 256, 64, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 4, 8, 8],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 8, 8],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 4, 0, 8],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 4, 8, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 512, 16, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 512, 0, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 512, 16, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 64, 128, 128],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 128, 128],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 0, 128],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 128, 0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([0, 64, 256, 256],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 0, 256, 256],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 0, 256],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 64, 256, 0],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([0, 20, 1],"float32"), 0.01, )
paddle.nn.functional.leaky_relu(Tensor([10, 0, 1],"float32"), 0.01, )
paddle.nn.functional.leaky_relu(Tensor([10, 20, 0],"float32"), 0.01, )
paddle.nn.functional.leaky_relu(Tensor([0, 120],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([16, 0],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([0, 300, 2048],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([2, 0, 2048],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([2, 300, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 200, 40],"float32"), )
paddle.nn.functional.leaky_relu(Tensor([30, 0, 40],"float32"), )
paddle.nn.functional.leaky_relu(Tensor([30, 200, 0],"float32"), )
paddle.nn.functional.leaky_relu(Tensor([32, 0],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([0, 1024, 19, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 19, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 1024, 0, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 1024, 19, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 128, 152, 152],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 152, 152],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 0, 152],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 152, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 128, 38, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 38, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 0, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 38, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 128, 76, 76],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 76, 76],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 0, 76],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 128, 76, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 256, 19, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 0, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 19, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 256, 38, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 0, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 38, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 256, 76, 76],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 0, 76],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 256, 76, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 32, 304, 304],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 304, 304],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 0, 304],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 304, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 32, 608, 608],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 0, 608, 608],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 0, 608],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 32, 608, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 512, 19, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 0, 19],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 19, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 512, 38, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 0, 38],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 512, 38, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 64, 152, 152],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 0, 152],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 152, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0, 64, 304, 304],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 0, 304],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([4, 64, 304, 0],"float32"), 0.1, )
paddle.nn.functional.leaky_relu(Tensor([0],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([512, 0],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([64, 0],"float32"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([0, 16, 32],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 0, 32],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu(Tensor([8, 16, 0],"float32"), 0.1, None, )
paddle.nn.functional.leaky_relu_(Tensor([0, 20, 1],"float32"), 0.01, )
paddle.nn.functional.leaky_relu_(Tensor([10, 0, 1],"float32"), 0.01, )
paddle.nn.functional.leaky_relu_(Tensor([10, 20, 0],"float32"), 0.01, )
paddle.nn.functional.local_response_norm(Tensor([0, 3, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 0, 40, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 0, 40],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 3, 40, 0],"float32"), 5, 0.0001, 0.75, 1.0, "NCHW", None, )
paddle.nn.functional.local_response_norm(Tensor([0, 40, 40, 3],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 0, 40, 3],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 40, 0, 3],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(Tensor([3, 40, 40, 0],"float32"), 5, 0.0001, 0.75, 1.0, "NHWC", None, )
paddle.nn.functional.local_response_norm(x=Tensor([0, 3, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 3, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 0, 40, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 0, 40],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 3, 40, 0],"float32"), size=5, data_format="NCDHW", )
paddle.nn.functional.local_response_norm(x=Tensor([0, 3, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 40, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 0, 40, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 0, 3],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 40, 0],"float32"), size=5, data_format="NDHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([0, 3, 40, 40],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 40, 40],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 0, 40],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 3, 40, 0],"float32"), size=5, data_format="NCHW", )
paddle.nn.functional.local_response_norm(x=Tensor([0, 40, 40, 3],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 40, 3],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 0, 3],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 40, 0],"float32"), size=5, data_format="NHWC", )
paddle.nn.functional.local_response_norm(x=Tensor([0, 40, 40],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 40],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 0],"float32"), size=5, data_format="NCL", )
paddle.nn.functional.local_response_norm(x=Tensor([0, 40, 40],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 0, 40],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.local_response_norm(x=Tensor([3, 40, 0],"float32"), size=5, data_format="NLC", )
paddle.nn.functional.log_sigmoid(Tensor([0],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([0, 5],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([5, 0],"float64"), )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float16"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float16"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), math.inf, 2, None, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float32"), norm_type=math.inf, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 0],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.lp_pool1d(Tensor([0, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 0],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([0, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 0, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 0],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float16"), 2, kernel_size=3, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float16"), norm_type=2.0, kernel_size=3, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), 2, kernel_size=2, stride=1, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), 2, kernel_size=2, stride=None, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), 2, kernel_size=5, stride=3, ceil_mode=True, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), -math.inf, kernel_size=2, stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), math.inf, kernel_size=list[2,4,], stride=2, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), norm_type=2.0, kernel_size=2, stride=1, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), norm_type=2.0, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), norm_type=-math.inf, kernel_size=2, stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float32"), norm_type=math.inf, kernel_size=list[2,4,], stride=2, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float64"), 2, kernel_size=5, stride=3, ceil_mode=False, )
paddle.nn.functional.lp_pool2d(Tensor([0, 3, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 0, 32],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 3, 32, 0],"float64"), norm_type=2.0, kernel_size=5, stride=3, padding=0, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([0, 32, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 0, 3],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 0],"float32"), 2, kernel_size=2, stride=2, ceil_mode=False, data_format="NHWC", )
paddle.nn.functional.lp_pool2d(Tensor([0, 32, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 0, 32, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 0, 3],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.lp_pool2d(Tensor([2, 32, 32, 0],"float32"), norm_type=2.0, kernel_size=2, stride=list[2,2,], padding=0, ceil_mode=False, data_format="NHWC", name=None, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 0, 16],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 0],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 0, 16],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 0],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 0, 16],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 0],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 0, 6],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([1, 3, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 0, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 0],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 0, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([0, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 1, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 4, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 0, 4],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 1, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 4, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 0, 4],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 4, 0],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 1, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 4, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 1, 0, 5],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 128, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 40, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 0, 40],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 128, 40, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 16, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 16, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 0, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 16, 12, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 2, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 2, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 20, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 220, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 0, 220],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 20, 220, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 24, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 0, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 24, 40, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 20, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 0, 20],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 256, 20, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 6, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 0, 6],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([1, 3, 6, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 50, 106, 106],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 106, 106],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 50, 0, 106],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 50, 106, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 5, 5],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 0, 5],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 512, 5, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 6, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 6, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 6, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 40, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 0, 40],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 40, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 0, 80, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 0, 80],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([1, 64, 80, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([10, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 20, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 0, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 20, 0, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 20, 24, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 50, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 0, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 50, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([128, 50, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([16, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 128, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 112, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 0, 112],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 112, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 128, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 0, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 128, 55, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 27, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 3, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 52, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 52],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 52, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 192, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 0, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 192, 55, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 20, 0, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 20, 24, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 24, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 24, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 24, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 244, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 244, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 0, 2],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 244, 244, 0],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 1, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 13, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 27, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 27],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 27, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 54, 54],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 54, 54],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 54],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 54, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 256, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 56, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 0, 56],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 256, 56, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 288, 25, 25],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 25, 25],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 288, 0, 25],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 288, 25, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 224, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 224],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 224, 0],"float32"), kernel_size=list[5,3,], stride=list[1,2,], padding=tuple(2,1,), )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=1, ceil_mode=False, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],], return_mask=False, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 32, 0],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 3, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 0, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([2, 3, 33, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool2d(Tensor([0, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 0, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([2, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, data_format="NHWC", )
paddle.nn.functional.max_pool2d(Tensor([0, 480, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 0, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 13, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 480, 27, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 0, 27],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 480, 27, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 50, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 50, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 0, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 13, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 14, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 0, 14],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 14, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 26, 26],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 26, 26],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 0, 26],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 26, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 512, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 512, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 528, 13, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 0, 13],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 528, 13, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 109, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 0],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 112, 112],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 224, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 224],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 224, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 55, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 55],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 55, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 0, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 64, 7, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 768, 12, 12],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 12, 12],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 768, 0, 12],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 768, 12, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 8, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 16, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 0, 64],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 16, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 8, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 4, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 0, 16],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 4, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 8, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 8, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 8, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=True, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 832, 13, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 0, 13],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 13, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 832, 6, 6],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 0, 6, 6],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 0, 6],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 832, 6, 0],"float32"), kernel_size=3, stride=1, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 96, 109, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 0, 109],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 109, 0],"float32"), kernel_size=3, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 96, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([2, 96, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([272, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 64, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 0, 128, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 0, 128],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([3, 64, 128, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 0, 12, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 0, 12],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 16, 12, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([32, 6, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([36, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 3, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 0, 3],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 3, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 0, 3],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 192, 3, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 1, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 0, 1],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 1, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 0, 1],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 256, 1, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 4, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 4, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 0, 4],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 4, 4, 0],"float16"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 7, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 0, 7],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 0, 7, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 0, 7],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([4, 64, 7, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([512, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 16, 10, 10],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 10, 10],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 0, 10],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 20, 24, 24],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 24, 24],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 0, 24],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 0, 24],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 20, 24, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 50, 8, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 8, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 0, 8],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 50, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([0, 6, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 28, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 0, 28],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 0],"float16"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([64, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 0, 10, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 16, 0, 10],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 16, 10, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 0, 28, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 6, 0, 28],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 6, 28, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 0, 112, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 0, 112],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 0],"float16"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 0, 112, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 0, 112],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(Tensor([8, 64, 112, 0],"float32"), kernel_size=3, stride=2, padding=1, return_mask=False, ceil_mode=False, data_format="NCHW", name=None, )
paddle.nn.functional.max_pool2d(x=Tensor([0, 2, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 24, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 0, 24],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 2, 24, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([0, 4, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 0, 8, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 0, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool2d(x=Tensor([2, 4, 8, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([0, 2, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 6, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 0, 33, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 0, 33],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 2, 6, 33, 0],"float32"), kernel_size=5, stride=5, padding=0, ceil_mode=True, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float32"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float64"), kernel_size=2, stride=2, padding=0, return_mask=True, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 0, 4, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 0, 6],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([1, 3, 4, 4, 0],"float64"), kernel_size=2, stride=2, return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 0, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 0, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 0],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 0, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 0, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 0, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 0, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 0, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 0, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 0, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 0],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[0,0,0,0,0,0,], )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=list[list[0,0,],list[0,0,],list[0,0,],list[0,0,],list[0,0,],], )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding="SAME", return_mask=True, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=False, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 32, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 0, 32],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 32, 32, 0],"float32"), kernel_size=2, stride=None, padding=0, return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_pool3d(Tensor([0, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 0, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 0, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 0],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([0, 32, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 32, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 0, 32, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 0, 3],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([2, 32, 32, 32, 0],"float32"), kernel_size=2, stride=2, padding=0, data_format="NDHWC", return_mask=False, )
paddle.nn.functional.max_pool3d(Tensor([0, 6, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 0, 7, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 0, 9, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 0, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 6, 7, 9, 0],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([0, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 0, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float32"), Tensor([0, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float32"), Tensor([1, 0, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float32"), Tensor([1, 3, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"float64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"float64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"float64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([0, 3, 8],"int64"), Tensor([0, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 0, 8],"int64"), Tensor([1, 0, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 0],"int64"), Tensor([1, 3, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 0, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 0],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"float32"), Tensor([0, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"float32"), Tensor([1, 0, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"float32"), Tensor([1, 1, 0, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"float32"), Tensor([1, 1, 2, 0],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 1, 2, 2],"int64"), Tensor([0, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 2, 2],"int64"), Tensor([1, 0, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 0, 2],"int64"), Tensor([1, 1, 0, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 0],"int64"), Tensor([1, 1, 2, 0],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 3, 3, 3],"float32"), Tensor([0, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 0, 3, 3],"float32"), Tensor([1, 0, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 0, 3],"float32"), Tensor([1, 3, 0, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 0],"float32"), Tensor([1, 3, 3, 0],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 0, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 0],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 0, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 0],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 0, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 0],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 4, 7, 8],"float64"), Tensor([0, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 0, 7, 8],"float64"), Tensor([2, 0, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 0, 8],"float64"), Tensor([2, 4, 0, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 0],"float64"), Tensor([2, 4, 7, 0],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 0, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 0],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 0, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 0],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 0, 5],"float64"), Tensor([3, 2, 0, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 0],"float64"), Tensor([3, 2, 5, 0],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 0, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 0],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 0, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 0],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([0, 2, 5, 5],"float64"), Tensor([0, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 0, 5, 5],"float64"), Tensor([3, 0, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 0, 5],"float64"), Tensor([3, 2, 0, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 0],"float64"), Tensor([3, 2, 5, 0],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 1, 4, 5, 6],"float64"), Tensor([0, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 0, 5, 6],"float64"), Tensor([1, 1, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 0, 6],"float64"), Tensor([1, 1, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 0],"float64"), Tensor([1, 1, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([0, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 0, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 0, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 0, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float32"), Tensor([0, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float32"), Tensor([1, 0, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float32"), Tensor([1, 3, 0, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float32"), Tensor([1, 3, 2, 0, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float32"), Tensor([1, 3, 2, 2, 0],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"float64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"float64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"float64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"float64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"float64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 2, 2, 3],"int64"), Tensor([0, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 2, 2, 3],"int64"), Tensor([1, 0, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 2, 3],"int64"), Tensor([1, 3, 0, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 0, 3],"int64"), Tensor([1, 3, 2, 0, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 0],"int64"), Tensor([1, 3, 2, 2, 0],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 0],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 0, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 0, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([0, 3, 4, 5, 6],"float64"), Tensor([0, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 0, 5, 6],"float64"), Tensor([1, 3, 0, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 0, 6],"float64"), Tensor([1, 3, 4, 0, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 0],"float64"), Tensor([1, 3, 4, 5, 0],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.mish(Tensor([0, 16],"float32"), name="mish", )
paddle.nn.functional.mish(Tensor([2, 0],"float32"), name="mish", )
paddle.nn.functional.normalize(Tensor([0],"float32"), axis=0, epsilon=1e-10, )
paddle.nn.functional.normalize(Tensor([0],"float32"), axis=0, epsilon=1e-12, )
paddle.nn.functional.normalize(Tensor([0, 10],"float32"), )
paddle.nn.functional.normalize(Tensor([10, 0],"float32"), )
paddle.nn.functional.normalize(Tensor([0, 10],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([10, 0],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 10],"float32"), p=1.5, )
paddle.nn.functional.normalize(Tensor([10, 0],"float32"), p=1.5, )
paddle.nn.functional.normalize(Tensor([0, 5],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 27],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 0],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([0, 8, 7, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 0, 7, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 8, 0, 10],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([2, 8, 7, 0],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([0],"float32"), axis=0, )
paddle.nn.functional.normalize(Tensor([0, 18],"float32"), axis=1, )
paddle.nn.functional.normalize(Tensor([3, 0],"float32"), axis=1, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 1],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([100, 0],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([0, 100],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100, 0],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float32"), Tensor([100],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float32"), Tensor([100],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float32"), Tensor([0],"float32"), 2.0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([100, 100],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 100],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 100],"float64"), Tensor([100, 0],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([100, 0],"float64"), Tensor([100, 0],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([5],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([0],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float32"), Tensor([0],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([5],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([0],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([0],"float64"), Tensor([0],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(x=Tensor([0, 100],"float32"), y=Tensor([100, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 0],"float32"), y=Tensor([100, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 100],"float32"), y=Tensor([0, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 100],"float32"), y=Tensor([100, 0],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([0, 100],"float32"), y=Tensor([0, 1],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 0],"float32"), y=Tensor([100, 0],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([0, 100],"float32"), y=Tensor([100],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 0],"float32"), y=Tensor([100],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pairwise_distance(x=Tensor([100, 100],"float32"), y=Tensor([0],"float32"), p=2.0, epsilon=1e-06, keepdim=False, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([0, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 0, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([0, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 0, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 0, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float16"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 0, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 0],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 12, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 0, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 0],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_unshuffle(Tensor([0, 12, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 0, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 0, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 0],"float64"), 3, "NHWC", None, )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([0],"float32"), )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.prelu(Tensor([0, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 0, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 0, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 0],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 16, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([16, 0, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([16, 16, 0, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([16, 16, 10, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([16, 16, 10, 10],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([32, 0, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([32, 16, 0, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([32, 16, 10, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([32, 16, 10, 10],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([0, 20, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 0, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 0, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 10, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([5, 20, 10, 10],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([64, 0, 10, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([64, 16, 0, 10],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([64, 16, 10, 0],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([64, 16, 10, 10],"float32"), Tensor([0],"float32"), data_format="NCHW", )
paddle.nn.functional.relu(Tensor([0, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([1, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([0, 10],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 100, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 100, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1024, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([1, 1024, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([1, 1024, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1024, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 1024, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 1024, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 12, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 12, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 12, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 12, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 12, 0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 12, 20, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 0, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 40, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 128, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128],"float32"), )
paddle.nn.functional.relu(Tensor([0, 144, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 144, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 144, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 16, 20, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16],"float32"), )
paddle.nn.functional.relu(Tensor([0, 20, 110, 110],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 110, 110],"float32"), )
paddle.nn.functional.relu(Tensor([1, 20, 0, 110],"float32"), )
paddle.nn.functional.relu(Tensor([1, 20, 110, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 2048, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([1, 2048, 0, 7],"float32"), )
paddle.nn.functional.relu(Tensor([1, 2048, 7, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 2048, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 2048, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 2048, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 0, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 40, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 24, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 20, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([1, 256, 0, 56],"float32"), )
paddle.nn.functional.relu(Tensor([1, 256, 56, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 256, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 3, 3, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 3, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 3, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 3, 3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 32, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32],"float32"), )
paddle.nn.functional.relu(Tensor([0, 40, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 40, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 40, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 4096],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 0, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 48, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 50, 53, 53],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 53, 53],"float32"), )
paddle.nn.functional.relu(Tensor([1, 50, 0, 53],"float32"), )
paddle.nn.functional.relu(Tensor([1, 50, 53, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 512, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([1, 512, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([1, 512, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 512, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 512, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 32, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 32, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 0, 32],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 32, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 6, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 6, 32, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 4, 4],"float32"), )
paddle.nn.functional.relu(Tensor([1, 0, 4, 4],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 0, 4],"float32"), )
paddle.nn.functional.relu(Tensor([1, 6, 4, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 20, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 40, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 40],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 40, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 80, 80],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 0, 80, 80],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 0, 80],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 64, 80, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64],"float32"), )
paddle.nn.functional.relu(Tensor([0, 72, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 72, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 72, 20, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 72, 20, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 8, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 8, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 8, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 88, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 88, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([1, 88, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 10, 5],"float64"), )
paddle.nn.functional.relu(Tensor([10, 0, 5],"float64"), )
paddle.nn.functional.relu(Tensor([10, 10, 0],"float64"), )
paddle.nn.functional.relu(Tensor([10, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([10, 0],"float32"), )
paddle.nn.functional.relu(Tensor([10, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 128, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 128, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 20, 1],"float32"), )
paddle.nn.functional.relu(Tensor([10, 0, 1],"float32"), )
paddle.nn.functional.relu(Tensor([10, 20, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 20, 1],"float64"), )
paddle.nn.functional.relu(Tensor([10, 0, 1],"float64"), )
paddle.nn.functional.relu(Tensor([10, 20, 0],"float64"), )
paddle.nn.functional.relu(Tensor([0, 20],"float32"), )
paddle.nn.functional.relu(Tensor([10, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 256, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 256, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 512, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 512, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 64, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 64, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 64, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([10, 64, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 84],"float32"), )
paddle.nn.functional.relu(Tensor([120, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([128, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([16, 1024, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([16, 1024, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 16, 16, 8],"float16"), )
paddle.nn.functional.relu(Tensor([16, 0, 16, 8],"float16"), )
paddle.nn.functional.relu(Tensor([16, 16, 0, 8],"float16"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 16, 16, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 0, 16, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 16, 0, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 16, 16, 8],"float64"), )
paddle.nn.functional.relu(Tensor([16, 0, 16, 8],"float64"), )
paddle.nn.functional.relu(Tensor([16, 16, 0, 8],"float64"), )
paddle.nn.functional.relu(Tensor([16, 16, 16, 0],"float64"), )
paddle.nn.functional.relu(Tensor([16, 0, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([16, 2048, 0, 7],"float32"), )
paddle.nn.functional.relu(Tensor([16, 2048, 7, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 24, 16, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 24, 0, 8],"float32"), )
paddle.nn.functional.relu(Tensor([16, 24, 16, 0],"float32"), )
paddle.nn.functional.relu(Tensor([16, 0, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([16, 256, 0, 56],"float32"), )
paddle.nn.functional.relu(Tensor([16, 256, 56, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([16, 512, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([16, 512, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([16, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([16, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 5, 5],"float32"), )
paddle.nn.functional.relu(Tensor([16, 0, 5, 5],"float32"), )
paddle.nn.functional.relu(Tensor([16, 6, 0, 5],"float32"), )
paddle.nn.functional.relu(Tensor([16, 6, 5, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1000, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 0, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 12, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1000, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1000, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1024, 14, 14],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 14, 14],"float16"), )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 14],"float16"), )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 0],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 1024, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 1024, 6, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 6, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 1024, 6, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1024, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 1024, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 1024],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 112, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 112, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 112, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 112, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 112, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 112, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 116, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 116, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 116, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 12, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 12, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 12, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 120, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 120, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 120, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 128, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 0, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 27, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 0, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 54, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 128, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 128, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 144, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 144, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 0, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 54, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 16, 55, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 55, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 0, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 16, 55, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 16, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 16, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 160, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 160, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 160, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 168, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 168, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 168, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 176, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 176, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 176, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 192, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 192, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 192, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 192, 27, 27],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 27, 27],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 0, 27],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 27, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 192, 3, 3],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 3, 3],"float16"), )
paddle.nn.functional.relu(Tensor([2, 192, 0, 3],"float16"), )
paddle.nn.functional.relu(Tensor([2, 192, 3, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 192, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 0, 3],"float32"), )
paddle.nn.functional.relu(Tensor([2, 192, 3, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 192, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 192, 52, 52],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 52, 52],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 0, 52],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 192, 52, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 2],"float32"), )
paddle.nn.functional.relu(Tensor([0, 2048, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2048, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2048, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 2048, 7, 7],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 7, 7],"float16"), )
paddle.nn.functional.relu(Tensor([2, 2048, 0, 7],"float16"), )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 0],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([2, 2048, 0, 7],"float32"), )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 2048, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 2048, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 232, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 232, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 232, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 24, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 24, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 240, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 240, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 240, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 244, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 244, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 244, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 1, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 1, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 1, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 256, 1, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 1, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 1, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 12, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 13, 13],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 13, 13],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 0, 13],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 13, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 27, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 56, 56],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 56, 56],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 56],"float16"), )
paddle.nn.functional.relu(Tensor([2, 256, 56, 0],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 56],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 56, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 256, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 256, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 3, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 3, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3, 2],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 2],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3, 4],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 4],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3],"float64"), )
paddle.nn.functional.relu(Tensor([2, 0],"float64"), )
paddle.nn.functional.relu(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.relu(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 109, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 109, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 109, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 111, 111],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 111, 111],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 111],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 111, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 25, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 32, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 0, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 27, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 32, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 32, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 32, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 0, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 32, 54, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 320, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 320, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 320, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 352, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 352, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 352, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 384, 1, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 384, 0, 1],"float16"), )
paddle.nn.functional.relu(Tensor([2, 384, 1, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 384, 1, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 0, 1],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 1, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 384, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 384, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 384, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 384, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 384, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 4, 8, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 8, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 4, 0, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 4, 8, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 4],"float32"), )
paddle.nn.functional.relu(Tensor([2, 40, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 40, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 4096],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 448, 5, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 448, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 448, 5, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 48, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 0, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 25, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 48, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 48, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 48, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 48, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 480, 27, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 480, 0, 27],"float32"), )
paddle.nn.functional.relu(Tensor([2, 480, 27, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 488, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 488, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 488, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 488, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 488, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 488, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 28, 28],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 28, 28],"float16"), )
paddle.nn.functional.relu(Tensor([2, 512, 0, 28],"float16"), )
paddle.nn.functional.relu(Tensor([2, 512, 28, 0],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 512, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 512, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 528, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 528, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 528, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 58, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 58, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 58, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 58, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 58, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 58, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 600],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 109, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 109],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 109, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 112, 112],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 112, 112],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 112],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 112, 0],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 12, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 12],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 12, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 224, 224],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 224, 224],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 224],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 224, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 25, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 26, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 26],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 26, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 54, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 54],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 54, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 55, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 0, 55],"float32"), )
paddle.nn.functional.relu(Tensor([2, 64, 55, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 64, 55, 55],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 55, 55],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 55],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 55, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 7, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 7, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 7, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 64, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 72, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 72, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 72, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 8, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 8, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 8, 8, 8],"float16"), )
paddle.nn.functional.relu(Tensor([2, 0, 8, 8],"float16"), )
paddle.nn.functional.relu(Tensor([2, 8, 0, 8],"float16"), )
paddle.nn.functional.relu(Tensor([2, 8, 8, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 8, 8, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 8, 0, 8],"float32"), )
paddle.nn.functional.relu(Tensor([2, 8, 8, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 8],"float32"), )
paddle.nn.functional.relu(Tensor([0, 80, 54, 54],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 0, 54, 54],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 80, 0, 54],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 80, 54, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 832, 13, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 832, 0, 13],"float32"), )
paddle.nn.functional.relu(Tensor([2, 832, 13, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 832, 6, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 832, 0, 6],"float32"), )
paddle.nn.functional.relu(Tensor([2, 832, 6, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 88, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 88, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 88, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 88, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 88, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 88, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 96, 109, 109],"float32"), )
paddle.nn.functional.relu(Tensor([2, 0, 109, 109],"float32"), )
paddle.nn.functional.relu(Tensor([2, 96, 0, 109],"float32"), )
paddle.nn.functional.relu(Tensor([2, 96, 109, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 96, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 96, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 96, 25, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 0, 25],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 25, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 96, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([2, 96, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 40],"float32"), )
paddle.nn.functional.relu(Tensor([20, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([272, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([272, 1, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([272, 1, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 120],"float32"), )
paddle.nn.functional.relu(Tensor([272, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 400],"float32"), )
paddle.nn.functional.relu(Tensor([0, 6, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([272, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([272, 6, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([272, 6, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1024, 16, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0, 16, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 1024, 0, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 1024, 16, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 128, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 128, 32, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 128, 64, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0, 64, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 128, 0, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 128, 64, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 20],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 2048, 8, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0, 8, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 2048, 0, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 2048, 8, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 16, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 0, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 16, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 32, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 64, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 0, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 256, 64, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 16, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 0, 16],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 16, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 32, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 512, 8, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 0, 8],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 512, 8, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 128, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 0, 128, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 64, 0, 128],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 64, 128, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 64, 64, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 64, 0, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([3, 64, 64, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 10, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([30, 0, 64],"float32"), None, )
paddle.nn.functional.relu(Tensor([30, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([30, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 98, 130],"float32"), )
paddle.nn.functional.relu(Tensor([31, 0, 130],"float32"), )
paddle.nn.functional.relu(Tensor([31, 98, 0],"float32"), )
paddle.nn.functional.relu(Tensor([32, 0],"float32"), )
paddle.nn.functional.relu(Tensor([32, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 0, 12, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 16, 0, 12],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 16, 12, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 4, 2048],"float32"), )
paddle.nn.functional.relu(Tensor([32, 0, 2048],"float32"), )
paddle.nn.functional.relu(Tensor([32, 4, 0],"float32"), )
paddle.nn.functional.relu(Tensor([32, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 0, 32, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 6, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([32, 6, 32, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([36, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 10, 10, 10],"float16"), )
paddle.nn.functional.relu(Tensor([4, 0, 10, 10],"float16"), )
paddle.nn.functional.relu(Tensor([4, 10, 0, 10],"float16"), )
paddle.nn.functional.relu(Tensor([4, 10, 10, 0],"float16"), )
paddle.nn.functional.relu(Tensor([4, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 192, 3, 3],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 3, 3],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 192, 0, 3],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 192, 3, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([0, 192, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 3, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 192, 0, 3],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 192, 3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 2, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 0, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 2, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 256, 1, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 1, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 256, 0, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 256, 1, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([0, 256, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 256, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 256, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 256],"float32"), )
paddle.nn.functional.relu(Tensor([0, 3, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 3, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 384, 1, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 0, 1],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 1, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([0, 384, 1, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 0, 1],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 384, 1, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 5],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 0, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 6, 0, 3],"float32"), )
paddle.nn.functional.relu(Tensor([4, 6, 3, 0],"float32"), )
paddle.nn.functional.relu(Tensor([4, 0, 7, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 64, 0, 7],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 64, 7, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([4, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 64, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([4, 64, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 8, 16, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 0, 16, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8, 0, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8, 16, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 8, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 0, 32],"float32"), )
paddle.nn.functional.relu(Tensor([4, 8, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 8],"float16"), )
paddle.nn.functional.relu(Tensor([4, 0],"float16"), )
paddle.nn.functional.relu(Tensor([0, 8],"float64"), )
paddle.nn.functional.relu(Tensor([4, 0],"float64"), )
paddle.nn.functional.relu(Tensor([400, 0],"float32"), )
paddle.nn.functional.relu(Tensor([5, 0],"float32"), )
paddle.nn.functional.relu(Tensor([512, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([512, 1, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([512, 1, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([512, 0],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1234],"float32"), )
paddle.nn.functional.relu(Tensor([512, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([512, 6, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([512, 6, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([512, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([512, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 768],"float32"), )
paddle.nn.functional.relu(Tensor([0, 1, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([6, 0, 3, 3],"float32"), )
paddle.nn.functional.relu(Tensor([6, 1, 0, 3],"float32"), )
paddle.nn.functional.relu(Tensor([6, 1, 3, 0],"float32"), )
paddle.nn.functional.relu(Tensor([600, 0],"float32"), )
paddle.nn.functional.relu(Tensor([64, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([64, 1, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([64, 1, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([64, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 128, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 128, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 10, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 10, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 0, 10],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 10, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 256, 0, 14],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 256, 14, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 512, 0, 7],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 512, 7, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 6, 28, 28],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 28, 28],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 0, 28],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 28, 0],"float16"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 0, 112],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 112, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 0, 56],"float32"), None, )
paddle.nn.functional.relu(Tensor([64, 64, 56, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 0, 14, 14],"float32"), )
paddle.nn.functional.relu(Tensor([8, 1024, 0, 14],"float32"), )
paddle.nn.functional.relu(Tensor([8, 1024, 14, 0],"float32"), )
paddle.nn.functional.relu(Tensor([8, 0],"float32"), )
paddle.nn.functional.relu(Tensor([8, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 16, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 0, 32],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 16, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 0, 7, 7],"float32"), )
paddle.nn.functional.relu(Tensor([8, 2048, 0, 7],"float32"), )
paddle.nn.functional.relu(Tensor([8, 2048, 7, 0],"float32"), )
paddle.nn.functional.relu(Tensor([8, 0, 56, 56],"float32"), )
paddle.nn.functional.relu(Tensor([8, 256, 0, 56],"float32"), )
paddle.nn.functional.relu(Tensor([8, 256, 56, 0],"float32"), )
paddle.nn.functional.relu(Tensor([8, 0, 28, 28],"float32"), )
paddle.nn.functional.relu(Tensor([8, 512, 0, 28],"float32"), )
paddle.nn.functional.relu(Tensor([8, 512, 28, 0],"float32"), )
paddle.nn.functional.relu(Tensor([8, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 6, 0, 28],"float32"), None, )
paddle.nn.functional.relu(Tensor([8, 6, 28, 0],"float32"), None, )
paddle.nn.functional.relu(Tensor([0, 784],"float32"), )
paddle.nn.functional.relu(Tensor([84, 0],"float32"), )
paddle.nn.functional.relu_(Tensor([0, 20, 1],"float32"), )
paddle.nn.functional.relu_(Tensor([10, 0, 1],"float32"), )
paddle.nn.functional.relu_(Tensor([10, 20, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 1280, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 0, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 1280, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 1280, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 1280, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 1280, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 1280, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 144, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 0, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 0, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 28, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 144, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 0, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 28, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 144, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 0, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 0, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 144, 56, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 144, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 0, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 144, 56, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 192, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 0, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 192, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 192, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 0, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 192, 28, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 192, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 0, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 192, 28, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 32, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 0, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 32, 0, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 32, 112, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 32, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 32, 0, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 32, 112, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 384, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 384, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 384, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 384, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 384, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 384, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 576, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 576, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 576, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 576, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 576, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 576, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 96, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 0, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 112, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 96, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 0, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 112, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 96, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 0, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 96, 56, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 96, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 0, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 96, 56, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 960, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 960, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([1, 960, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 960, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 960, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([1, 960, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 0, 7, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 1280, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 1280, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 0, 28, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 0, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 28, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 0, 56, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 0, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 144, 56, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 0, 14, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 0, 28],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 192, 28, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.relu6(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.relu6(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([2, 0, 112, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 32, 0, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 32, 112, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 384, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 384, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 0, 14],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 14, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 576, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 0, 112],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 112, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 0, 56],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 96, 56, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 960, 0, 7],"float32"), None, )
paddle.nn.functional.relu6(Tensor([2, 960, 7, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([4, 0, 7, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 1280, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 1280, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 0, 28, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 0, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 28, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 0, 56, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 0, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 144, 56, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 0, 14, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 0, 28],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 192, 28, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 0, 112, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 32, 0, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 32, 112, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 384, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 384, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 0, 14],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 14, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 576, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 0, 112],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 112, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 0, 56],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 96, 56, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 960, 0, 7],"float32"), )
paddle.nn.functional.relu6(Tensor([4, 960, 7, 0],"float32"), )
paddle.nn.functional.relu6(Tensor([0, 16, 10, 10],"float32"), None, )
paddle.nn.functional.relu6(Tensor([512, 0, 10, 10],"float32"), None, )
paddle.nn.functional.relu6(Tensor([512, 16, 0, 10],"float32"), None, )
paddle.nn.functional.relu6(Tensor([512, 16, 10, 0],"float32"), None, )
paddle.nn.functional.relu6(Tensor([0, 16, 32],"float32"), None, )
paddle.nn.functional.relu6(Tensor([8, 0, 32],"float32"), None, )
paddle.nn.functional.relu6(Tensor([8, 16, 0],"float32"), None, )
paddle.nn.functional.rrelu(Tensor([0, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 0, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 0, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 0],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 2, 3, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 0, 3, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 0, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 0],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 2, 3, 4],"float64"), lower=0.05, upper=0.25, training=True, )
paddle.nn.functional.rrelu(Tensor([1, 0, 3, 4],"float64"), lower=0.05, upper=0.25, training=True, )
paddle.nn.functional.rrelu(Tensor([1, 2, 0, 4],"float64"), lower=0.05, upper=0.25, training=True, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 0],"float64"), lower=0.05, upper=0.25, training=True, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float16"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float16"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float32"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([0, 3, 4, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 0, 4, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 0, 5],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 0],"float64"), 0.3, 0.300000009, training=True, )
paddle.nn.functional.selu(Tensor([0, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 0, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 0, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 0],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(Tensor([0, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 0, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 0, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 0],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.sigmoid(Tensor([0, 1024],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 2048],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 256],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 3, 5, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([1, 0, 5, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 0, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 0, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 2, 0],"float16"), )
paddle.nn.functional.sigmoid(Tensor([0, 3, 5, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 0, 5, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 0, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 0, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([1, 3, 5, 2, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 32],"float64"), )
paddle.nn.functional.sigmoid(Tensor([1, 0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([0, 512],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 15],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 15],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([10, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([0, 1],"float32"), )
paddle.nn.functional.sigmoid(Tensor([128, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 400],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([16, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([0, 84],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([0, 10, 28, 28],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 0, 28, 28],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 10, 0, 28],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 10, 28, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10, 3, 3],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([2, 0, 3, 3],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([2, 10, 0, 3],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([2, 10, 3, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([0, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 0, 5, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 0, 2, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 0, 4],"float16"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 2, 0],"float16"), )
paddle.nn.functional.sigmoid(Tensor([2, 0, 5, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 0, 2, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 0, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([2, 3, 5, 2, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 1],"float64"), )
paddle.nn.functional.sigmoid(Tensor([3, 0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([0, 2, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([3, 0, 2],"float32"), )
paddle.nn.functional.sigmoid(Tensor([3, 2, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 20],"float32"), )
paddle.nn.functional.sigmoid(Tensor([32, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([32, 0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([32, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([0, 10, 10, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 10, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 0, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 10, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 10, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10, 10, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 10, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 0, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 10, 0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10, 17, 10, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 17, 10, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 0, 10, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 17, 0, 4],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 10, 17, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 12, 17, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 17, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 12, 0, 10, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 12, 17, 0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 12, 17, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 14, 14, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 14, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 14, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 14, 14, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 14, 16, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 16, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 14, 16, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 16, 18, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 18, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 16, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 16, 18, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 16],"float64"), )
paddle.nn.functional.sigmoid(Tensor([4, 0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([0, 4, 10, 17, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 10, 17, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 4, 0, 17, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 4, 10, 0, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 4, 10, 17, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 5, 10, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 10, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 0, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 10, 0, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 10, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 5, 16, 18],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 16, 18],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 0, 18],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 16, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 5, 5, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 5, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 0, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 5, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 5, 6, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 5, 8, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 8, 10, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 8, 0, 10],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 5, 8, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 6, 6, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 6, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 0, 6, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 6, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 6, 6, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 6, 8, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 8, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 0, 10, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 10, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 6, 8, 6, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 8, 6, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 0, 6, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 0, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 6, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 6, 8, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 8, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 0, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 6, 8, 8, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 7, 7, 7, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 7, 7, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 7, 0, 7, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 7, 7, 0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 7, 7, 7, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 8, 10, 8, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 10, 8, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 0, 8, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 10, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 10, 8, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 8, 16, 16],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 16, 16],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 0, 16],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 16, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 8, 8, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 0, 8, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 8, 0, 6],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 8, 8, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 8, 8, 8, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 8, 8, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 0, 8, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 8, 8, 0, 8],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 9, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 0, 9, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 9, 0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([4, 9, 9, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([464, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([0, 10],"float64"), )
paddle.nn.functional.sigmoid(Tensor([5, 0],"float64"), )
paddle.nn.functional.sigmoid(Tensor([0, 5],"float32"), )
paddle.nn.functional.sigmoid(Tensor([5, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([512, 0],"float32"), )
paddle.nn.functional.sigmoid(Tensor([512, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([64, 0],"float32"), None, )
paddle.nn.functional.sigmoid(Tensor([8, 0],"float32"), )
paddle.nn.functional.silu(Tensor([0, 100],"float32"), )
paddle.nn.functional.silu(Tensor([100, 0],"float32"), )
paddle.nn.functional.silu(Tensor([0, 300, 2048],"float32"), )
paddle.nn.functional.silu(Tensor([2, 0, 2048],"float32"), )
paddle.nn.functional.silu(Tensor([2, 300, 0],"float32"), )
paddle.nn.functional.silu(Tensor([0, 4, 2, 6],"float16"), )
paddle.nn.functional.silu(Tensor([2, 0, 2, 6],"float16"), )
paddle.nn.functional.silu(Tensor([2, 4, 0, 6],"float16"), )
paddle.nn.functional.silu(Tensor([2, 4, 2, 0],"float16"), )
paddle.nn.functional.silu(Tensor([0, 101],"float32"), )
paddle.nn.functional.silu(Tensor([4, 0],"float32"), )
paddle.nn.functional.silu(Tensor([0, 101],"float64"), )
paddle.nn.functional.silu(Tensor([4, 0],"float64"), )
paddle.nn.functional.silu(Tensor([8, 0],"float32"), )
paddle.nn.functional.silu(Tensor([0, 100],"float64"), )
paddle.nn.functional.silu(Tensor([8, 0],"float64"), )
paddle.nn.functional.silu(Tensor([0, 128],"float64"), )
paddle.nn.functional.silu(Tensor([0, 64],"float64"), )
paddle.nn.functional.softplus(Tensor([0],"float64"), )
paddle.nn.functional.softplus(Tensor([0, 3],"float64"), )
paddle.nn.functional.softplus(Tensor([2, 0],"float64"), )
paddle.nn.functional.softsign(Tensor([0, 4096],"float32"), )
paddle.nn.functional.softsign(Tensor([300, 0],"float32"), )
paddle.nn.functional.softsign(Tensor([0, 128],"float32"), )
paddle.nn.functional.softsign(Tensor([32, 0],"float32"), )
paddle.nn.functional.tanh(Tensor([0, 60],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2, 0],"float32"), None, )
paddle.nn.functional.thresholded_relu(Tensor([0, 20, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(Tensor([10, 0, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(Tensor([10, 20, 0],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu_(Tensor([0, 20, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu_(Tensor([10, 0, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu_(Tensor([10, 20, 0],"float32"), 1.0, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([0, 5],"float64"), positive=Tensor([0, 5],"float64"), negative=Tensor([0, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 0],"float64"), positive=Tensor([5, 0],"float64"), negative=Tensor([5, 0],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), Tensor([0, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), Tensor([5, 0],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.unfold(Tensor([0, 3, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 0, 64, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 0, 64],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 0],"float32"), 3, 1, 1, tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([0, 3, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([10, 0, 64, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 0, 64],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 0],"float32"), 3, 1, tuple(1,1,), 1, )
paddle.nn.functional.unfold(Tensor([0, 3, 64, 64],"float32"), 3, tuple(1,1,), 1, 1, )
paddle.nn.functional.unfold(Tensor([10, 0, 64, 64],"float32"), 3, tuple(1,1,), 1, 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 0, 64],"float32"), 3, tuple(1,1,), 1, 1, )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 0],"float32"), 3, tuple(1,1,), 1, 1, )
paddle.nn.functional.unfold(Tensor([0, 3, 64, 64],"float32"), 3, tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 0, 64, 64],"float32"), 3, tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 0, 64],"float32"), 3, tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 0],"float32"), 3, tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([0, 3, 64, 64],"float32"), tuple(3,3,), tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 0, 64, 64],"float32"), tuple(3,3,), tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 0, 64],"float32"), tuple(3,3,), tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([10, 3, 64, 0],"float32"), tuple(3,3,), tuple(1,1,), tuple(1,1,), tuple(1,1,), )
paddle.nn.functional.unfold(Tensor([0, 3, 20, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 0, 20, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 3, 0, 20],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.nn.functional.unfold(Tensor([3, 3, 20, 0],"float64"), kernel_sizes=list[3,3,], strides=list[1,1,], paddings=list[1,1,1,1,], dilations=list[1,1,], name=None, )
paddle.normal(1.0, Tensor([0, 3, 17],"float64"), None, )
paddle.normal(1.0, Tensor([2, 0, 17],"float64"), None, )
paddle.normal(1.0, Tensor([2, 3, 0],"float64"), None, )
paddle.normal(complex(1.0,1.0), Tensor([0, 5],"float64"), None, )
paddle.normal(complex(1.0,1.0), Tensor([2, 0],"float64"), None, )
paddle.normal(mean=0.0, std=Tensor([0, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=0.0, std=Tensor([1000, 0],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([0, 2],"float64"), std=0.5, shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 0],"float64"), std=0.5, shape=None, name=None, )
paddle.normal(mean=Tensor([0, 2],"float64"), std=Tensor([1000, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 0],"float64"), std=Tensor([1000, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 2],"float64"), std=Tensor([0, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 2],"float64"), std=Tensor([1000, 0],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([0, 2],"float64"), std=Tensor([0, 2],"float64"), shape=None, name=None, )
paddle.normal(mean=Tensor([1000, 0],"float64"), std=Tensor([1000, 0],"float64"), shape=None, name=None, )
paddle.normal(Tensor([0, 100],"complex128"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([1, 0],"complex128"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([1, 100],"complex128"), Tensor([0, 100],"float64"), None, )
paddle.normal(Tensor([1, 100],"complex128"), Tensor([1, 0],"float64"), None, )
paddle.normal(Tensor([0, 100],"complex128"), Tensor([0, 100],"float64"), None, )
paddle.normal(Tensor([1, 0],"complex128"), Tensor([1, 0],"float64"), None, )
paddle.normal(Tensor([0, 100],"float64"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([1, 0],"float64"), Tensor([1, 100],"float64"), None, )
paddle.normal(Tensor([1, 100],"float64"), Tensor([0, 100],"float64"), None, )
paddle.normal(Tensor([1, 100],"float64"), Tensor([1, 0],"float64"), None, )
paddle.normal(Tensor([0, 100],"float64"), Tensor([0, 100],"float64"), None, )
paddle.normal(Tensor([1, 0],"float64"), Tensor([1, 0],"float64"), None, )
paddle.normal(Tensor([0],"complex64"), Tensor([100],"float32"), None, )
paddle.normal(Tensor([100],"complex64"), Tensor([0],"float32"), None, )
paddle.normal(Tensor([0],"complex64"), Tensor([0],"float32"), None, )
paddle.normal(Tensor([0],"float64"), Tensor([100],"float32"), None, )
paddle.normal(Tensor([100],"float64"), Tensor([0],"float32"), None, )
paddle.normal(Tensor([0],"float64"), Tensor([0],"float32"), None, )
paddle.normal(Tensor([0, 3, 4, 5],"float64"), 0.0, None, )
paddle.normal(Tensor([2, 0, 4, 5],"float64"), 0.0, None, )
paddle.normal(Tensor([2, 3, 0, 5],"float64"), 0.0, None, )
paddle.normal(Tensor([2, 3, 4, 0],"float64"), 0.0, None, )
paddle.normal(Tensor([0, 3],"complex128"), 1.0, None, )
paddle.normal(Tensor([2, 0],"complex128"), 1.0, None, )
paddle.ones_like(Tensor([0, 1],"float32"), )
paddle.ones_like(Tensor([1, 0],"float32"), )
paddle.ones_like(Tensor([0, 128, 8, 16],"float32"), )
paddle.ones_like(Tensor([1, 0, 8, 16],"float32"), )
paddle.ones_like(Tensor([1, 128, 0, 16],"float32"), )
paddle.ones_like(Tensor([1, 128, 8, 0],"float32"), )
paddle.ones_like(Tensor([0, 3, 2, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([1, 0, 2, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([1, 3, 0, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([1, 3, 2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([1, 0, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([1, 3, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 32, 128, 128],"float16"), )
paddle.ones_like(Tensor([1, 0, 128, 128],"float16"), )
paddle.ones_like(Tensor([1, 32, 0, 128],"float16"), )
paddle.ones_like(Tensor([1, 32, 128, 0],"float16"), )
paddle.ones_like(Tensor([0, 32, 128, 128],"float32"), )
paddle.ones_like(Tensor([1, 0, 128, 128],"float32"), )
paddle.ones_like(Tensor([1, 32, 0, 128],"float32"), )
paddle.ones_like(Tensor([1, 32, 128, 0],"float32"), )
paddle.ones_like(Tensor([0, 32, 128, 32],"float32"), )
paddle.ones_like(Tensor([1, 0, 128, 32],"float32"), )
paddle.ones_like(Tensor([1, 32, 0, 32],"float32"), )
paddle.ones_like(Tensor([0, 32, 16, 16],"float32"), )
paddle.ones_like(Tensor([1, 0, 16, 16],"float32"), )
paddle.ones_like(Tensor([1, 32, 0, 16],"float32"), )
paddle.ones_like(Tensor([1, 32, 16, 0],"float32"), )
paddle.ones_like(Tensor([0, 32, 8, 8],"float32"), )
paddle.ones_like(Tensor([1, 0, 8, 8],"float32"), )
paddle.ones_like(Tensor([1, 32, 0, 8],"float32"), )
paddle.ones_like(Tensor([1, 32, 8, 0],"float32"), )
paddle.ones_like(Tensor([0, 40, 1723],"float32"), )
paddle.ones_like(Tensor([1, 0, 1723],"float32"), )
paddle.ones_like(Tensor([1, 40, 0],"float32"), )
paddle.ones_like(Tensor([0, 40, 419],"float32"), )
paddle.ones_like(Tensor([1, 0, 419],"float32"), )
paddle.ones_like(Tensor([0, 40, 480],"float32"), )
paddle.ones_like(Tensor([1, 0, 480],"float32"), )
paddle.ones_like(Tensor([0, 64, 1723],"float32"), )
paddle.ones_like(Tensor([1, 64, 0],"float32"), )
paddle.ones_like(Tensor([0, 64, 294],"float32"), )
paddle.ones_like(Tensor([1, 0, 294],"float32"), )
paddle.ones_like(Tensor([0, 64, 448],"float32"), )
paddle.ones_like(Tensor([1, 0, 448],"float32"), )
paddle.ones_like(Tensor([0, 64, 480],"float32"), )
paddle.ones_like(Tensor([0, 64, 493],"float32"), )
paddle.ones_like(Tensor([1, 0, 493],"float32"), )
paddle.ones_like(Tensor([0, 64, 530],"float32"), )
paddle.ones_like(Tensor([1, 0, 530],"float32"), )
paddle.ones_like(Tensor([0, 12],"float32"), )
paddle.ones_like(Tensor([10, 0],"float32"), )
paddle.ones_like(Tensor([0, 12],"float64"), )
paddle.ones_like(Tensor([10, 0],"float64"), )
paddle.ones_like(Tensor([0],"int64"), dtype="int32", )
paddle.ones_like(Tensor([16, 0, 128, 128],"float32"), )
paddle.ones_like(Tensor([16, 32, 0, 128],"float32"), )
paddle.ones_like(Tensor([16, 32, 128, 0],"float32"), )
paddle.ones_like(Tensor([0, 1, 5, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 5, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 1, 0, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 1, 5, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 128],"int64"), dtype="int64", )
paddle.ones_like(Tensor([2, 0],"int64"), dtype="int64", )
paddle.ones_like(Tensor([0, 2, 2],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 2],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 2, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 2, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 2, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 2],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 2, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 2, 2],"int32"), )
paddle.ones_like(Tensor([2, 0, 2],"int32"), )
paddle.ones_like(Tensor([2, 2, 0],"int32"), )
paddle.ones_like(Tensor([0, 2, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 2, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 2, 3],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 3],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3, 2],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 3, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3, 2],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 3, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 3, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3, 3],"float64"), )
paddle.ones_like(Tensor([2, 0, 3],"float64"), )
paddle.ones_like(Tensor([2, 3, 0],"float64"), )
paddle.ones_like(Tensor([0, 3, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3, 5, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 5, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 3, 0, 4],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 3, 5, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3, 5, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 5, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 3, 0, 4],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 3, 5, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3, 5, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 5, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 3, 0, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 3, 5, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3, 5],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0, 5],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3, 5],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0, 5],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3, 5],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0, 5],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3],"bfloat16"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"bfloat16"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"bool"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"bool"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"float16"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"float16"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"float16"), dtype="float16", )
paddle.ones_like(Tensor([2, 0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0, 3],"float32"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"float32"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"float32"), dtype="float32", )
paddle.ones_like(Tensor([2, 0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0, 3],"float64"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"float64"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 3],"int16"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"int16"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"int32"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"int32"), dtype="bool", )
paddle.ones_like(Tensor([0, 3],"int64"), dtype="bool", )
paddle.ones_like(Tensor([2, 0],"int64"), dtype="bool", )
paddle.ones_like(Tensor([0, 4, 3],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 4, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 4],"float64"), )
paddle.ones_like(Tensor([2, 0],"float64"), )
paddle.ones_like(Tensor([0, 5, 4],"float64"), dtype="float64", )
paddle.ones_like(Tensor([2, 5, 0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 8, 8],"float32"), )
paddle.ones_like(Tensor([2, 0, 8],"float32"), )
paddle.ones_like(Tensor([2, 8, 0],"float32"), )
paddle.ones_like(Tensor([0],"float16"), dtype="float16", )
paddle.ones_like(Tensor([0],"float32"), dtype="float32", )
paddle.ones_like(Tensor([0],"float64"), dtype="float64", )
paddle.ones_like(Tensor([0, 28],"float32"), )
paddle.ones_like(Tensor([28, 0],"float32"), )
paddle.ones_like(Tensor([3, 0],"float32"), )
paddle.ones_like(Tensor([0, 2],"float32"), )
paddle.ones_like(Tensor([0, 3],"float32"), )
paddle.ones_like(Tensor([0, 5, 2],"float32"), )
paddle.ones_like(Tensor([4, 0, 2],"float32"), )
paddle.ones_like(Tensor([4, 5, 0],"float32"), )
paddle.ones_like(Tensor([0, 5, 2],"float64"), )
paddle.ones_like(Tensor([4, 0, 2],"float64"), )
paddle.ones_like(Tensor([4, 5, 0],"float64"), )
paddle.ones_like(Tensor([0, 8],"float16"), )
paddle.ones_like(Tensor([4, 0],"float16"), )
paddle.ones_like(Tensor([0, 8],"float32"), )
paddle.ones_like(Tensor([4, 0],"float32"), )
paddle.ones_like(Tensor([0, 8],"float64"), )
paddle.ones_like(Tensor([4, 0],"float64"), )
paddle.ones_like(Tensor([0],"float64"), )
paddle.ones_like(Tensor([0, 3],"float64"), )
paddle.ones_like(Tensor([5, 0],"float64"), )
paddle.ones_like(Tensor([6, 0],"float32"), )
paddle.ones_like(Tensor([0, 32],"bfloat16"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"bfloat16"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"bool"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"bool"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"float16"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"float16"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"float32"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"float32"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"float64"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"float64"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"int16"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"int16"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"int32"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"int32"), dtype="bool", )
paddle.ones_like(Tensor([0, 32],"int64"), dtype="bool", )
paddle.ones_like(Tensor([64, 0],"int64"), dtype="bool", )
paddle.ones_like(Tensor([8, 0],"float32"), )
paddle.outer(Tensor([0, 50],"complex128"), Tensor([50],"complex128"), )
paddle.outer(Tensor([20, 0],"complex128"), Tensor([50],"complex128"), )
paddle.outer(Tensor([20, 50],"complex128"), Tensor([0],"complex128"), )
paddle.outer(Tensor([0, 50],"float64"), Tensor([50],"float64"), )
paddle.outer(Tensor([20, 0],"float64"), Tensor([50],"float64"), )
paddle.outer(Tensor([20, 50],"float64"), Tensor([0],"float64"), )
paddle.outer(Tensor([0, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 0, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 0],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([0, 10],"complex128"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([2, 0],"complex128"), )
paddle.outer(Tensor([0, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 0, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 10, 0],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([0, 10],"float64"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([2, 0],"float64"), )
paddle.outer(Tensor([0, 10, 10],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 0, 10],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 10, 0],"int32"), Tensor([2, 10],"int32"), )
paddle.outer(Tensor([5, 10, 10],"int32"), Tensor([0, 10],"int32"), )
paddle.outer(Tensor([5, 10, 10],"int32"), Tensor([2, 0],"int32"), )
paddle.outer(Tensor([0, 10, 10],"int64"), Tensor([2, 10],"int64"), )
paddle.outer(Tensor([5, 0, 10],"int64"), Tensor([2, 10],"int64"), )
paddle.outer(Tensor([5, 10, 0],"int64"), Tensor([2, 10],"int64"), )
paddle.outer(Tensor([5, 10, 10],"int64"), Tensor([0, 10],"int64"), )
paddle.outer(Tensor([5, 10, 10],"int64"), Tensor([2, 0],"int64"), )
paddle.pdist(Tensor([0, 20],"float32"), 0, )
paddle.pdist(Tensor([10, 0],"float32"), 0, )
paddle.pdist(Tensor([0, 20],"float32"), 1.0, )
paddle.pdist(Tensor([10, 0],"float32"), 1.0, )
paddle.pdist(Tensor([0, 20],"float32"), 1.5, )
paddle.pdist(Tensor([10, 0],"float32"), 1.5, )
paddle.pdist(Tensor([0, 20],"float32"), 2.0, )
paddle.pdist(Tensor([10, 0],"float32"), 2.0, )
paddle.pdist(Tensor([0, 20],"float32"), 2.5, )
paddle.pdist(Tensor([10, 0],"float32"), 2.5, )
paddle.pdist(Tensor([0, 20],"float32"), 3.0, )
paddle.pdist(Tensor([10, 0],"float32"), 3.0, )
paddle.pdist(Tensor([0, 20],"float32"), math.inf, )
paddle.pdist(Tensor([10, 0],"float32"), math.inf, )
paddle.pdist(Tensor([0, 20],"float64"), 2.0, )
paddle.pdist(Tensor([50, 0],"float64"), 2.0, )
paddle.poisson(Tensor([0],"float64"), )
paddle.poisson(Tensor([0, 10],"float32"), )
paddle.poisson(Tensor([10, 0],"float32"), )
paddle.poisson(Tensor([0, 1024, 1024],"float32"), )
paddle.poisson(Tensor([16, 0, 1024],"float32"), )
paddle.poisson(Tensor([16, 1024, 0],"float32"), )
paddle.poisson(Tensor([0],"float32"), )
paddle.poisson(Tensor([0, 3, 1024, 768],"float32"), )
paddle.poisson(Tensor([32, 0, 1024, 768],"float32"), )
paddle.poisson(Tensor([32, 3, 0, 768],"float32"), )
paddle.poisson(Tensor([32, 3, 1024, 0],"float32"), )
paddle.poisson(Tensor([0, 1],"float64"), )
paddle.poisson(Tensor([5000, 0],"float64"), )
paddle.poisson(Tensor([0, 2],"float32"), )
paddle.poisson(Tensor([5000, 0],"float32"), )
paddle.polygamma(Tensor([0, 20, 1],"float32"), 1, )
paddle.polygamma(Tensor([10, 0, 1],"float32"), 1, )
paddle.polygamma(Tensor([10, 20, 0],"float32"), 1, )
paddle.polygamma(Tensor([0, 2, 6],"float64"), 2, )
paddle.polygamma(Tensor([2, 0, 6],"float64"), 2, )
paddle.polygamma(Tensor([2, 2, 0],"float64"), 2, )
paddle.polygamma(Tensor([0, 6],"float64"), 1, )
paddle.polygamma(Tensor([2, 0],"float64"), 1, )
paddle.polygamma(Tensor([0],"float32"), 1, )
paddle.polygamma(Tensor([0],"float32"), 2, )
paddle.polygamma(Tensor([0],"float32"), 3, )
paddle.polygamma(Tensor([0],"float64"), 1, )
paddle.polygamma(Tensor([0],"float64"), 2, )
paddle.polygamma(Tensor([0],"float64"), 3, )
paddle.pow(Tensor([0, 1025, 105],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 105],"float32"), 2.0, )
paddle.pow(Tensor([1, 1025, 0],"float32"), 2.0, )
paddle.pow(Tensor([0, 1025, 112],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 112],"float32"), 2.0, )
paddle.pow(Tensor([0, 1025, 120],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 120],"float32"), 2.0, )
paddle.pow(Tensor([0, 1025, 431],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 431],"float32"), 2.0, )
paddle.pow(Tensor([0, 1025, 74],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 74],"float32"), 2.0, )
paddle.pow(Tensor([0, 21, 120],"float32"), 1.0, )
paddle.pow(Tensor([1, 0, 120],"float32"), 1.0, )
paddle.pow(Tensor([1, 21, 0],"float32"), 1.0, )
paddle.pow(Tensor([0, 21, 124],"float32"), 1.0, )
paddle.pow(Tensor([1, 0, 124],"float32"), 1.0, )
paddle.pow(Tensor([0, 21, 431],"float32"), 1.0, )
paddle.pow(Tensor([1, 0, 431],"float32"), 1.0, )
paddle.pow(Tensor([0, 257, 1723],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 1723],"float32"), 2.0, )
paddle.pow(Tensor([1, 257, 0],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 294],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 294],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 419],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 419],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 448],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 448],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 480],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 480],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 493],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 493],"float32"), 2.0, )
paddle.pow(Tensor([0, 257, 530],"float32"), 2.0, )
paddle.pow(Tensor([1, 0, 530],"float32"), 2.0, )
paddle.pow(Tensor([0, 3, 4, 10],"float32"), 2, )
paddle.pow(Tensor([1, 0, 4, 10],"float32"), 2, )
paddle.pow(Tensor([1, 3, 0, 10],"float32"), 2, )
paddle.pow(Tensor([1, 3, 4, 0],"float32"), 2, )
paddle.pow(Tensor([0, 3, 4, 10],"float64"), 2, )
paddle.pow(Tensor([1, 0, 4, 10],"float64"), 2, )
paddle.pow(Tensor([1, 3, 0, 10],"float64"), 2, )
paddle.pow(Tensor([1, 3, 4, 0],"float64"), 2, )
paddle.pow(Tensor([0, 33, 112],"float32"), 1.0, )
paddle.pow(Tensor([1, 0, 112],"float32"), 1.0, )
paddle.pow(Tensor([1, 33, 0],"float32"), 1.0, )
paddle.pow(Tensor([0, 33, 133],"float32"), 1.0, )
paddle.pow(Tensor([1, 0, 133],"float32"), 1.0, )
paddle.pow(Tensor([0, 33, 431],"float32"), 1.0, )
paddle.pow(Tensor([0],"float32"), 2, )
paddle.pow(Tensor([0],"float32"), 4.0, )
paddle.pow(Tensor([0, 1],"float32"), 2, )
paddle.pow(Tensor([10, 0],"float32"), 2, )
paddle.pow(Tensor([0, 10],"float32"), 2, )
paddle.pow(Tensor([0, 10],"float32"), 2.7, )
paddle.pow(Tensor([10, 0],"float32"), 2.7, )
paddle.pow(Tensor([0, 1024],"float32"), 2, )
paddle.pow(Tensor([0, 16],"float32"), 2, )
paddle.pow(Tensor([0, 20, 1],"float32"), 2, )
paddle.pow(Tensor([10, 0, 1],"float32"), 2, )
paddle.pow(Tensor([10, 20, 0],"float32"), 2, )
paddle.pow(Tensor([0, 20],"float32"), 2, )
paddle.pow(Tensor([0, 784],"float32"), 2, )
paddle.pow(Tensor([1000, 0],"float32"), 2, )
paddle.pow(Tensor([0, 2, 3],"float32"), 2, )
paddle.pow(Tensor([10000, 0, 3],"float32"), 2, )
paddle.pow(Tensor([10000, 2, 0],"float32"), 2, )
paddle.pow(Tensor([0, 2, 3],"float64"), 2, )
paddle.pow(Tensor([10000, 0, 3],"float64"), 2, )
paddle.pow(Tensor([10000, 2, 0],"float64"), 2, )
paddle.pow(Tensor([0, 4],"float64"), 2, )
paddle.pow(Tensor([100000, 0],"float64"), 2, )
paddle.pow(Tensor([1000000, 0],"float64"), 2, )
paddle.pow(Tensor([0, 1024, 8],"float32"), 2, )
paddle.pow(Tensor([1024, 0, 8],"float32"), 2, )
paddle.pow(Tensor([1024, 1024, 0],"float32"), 2, )
paddle.pow(Tensor([0, 1024, 8],"float64"), 2, )
paddle.pow(Tensor([1024, 0, 8],"float64"), 2, )
paddle.pow(Tensor([1024, 1024, 0],"float64"), 2, )
paddle.pow(Tensor([0, 84],"float32"), 2, )
paddle.pow(Tensor([120, 0],"float32"), 2, )
paddle.pow(Tensor([0, 150],"float32"), 2, )
paddle.pow(Tensor([16, 0],"float32"), 2, )
paddle.pow(Tensor([0, 256],"float32"), 2, )
paddle.pow(Tensor([0, 256],"float64"), 2, )
paddle.pow(Tensor([16, 0],"float64"), 2, )
paddle.pow(Tensor([0, 2, 2],"float32"), 5, )
paddle.pow(Tensor([2, 0, 2],"float32"), 5, )
paddle.pow(Tensor([2, 2, 0],"float32"), 5, )
paddle.pow(Tensor([0, 2, 2],"float32"), 6, )
paddle.pow(Tensor([2, 0, 2],"float32"), 6, )
paddle.pow(Tensor([2, 2, 0],"float32"), 6, )
paddle.pow(Tensor([0, 2],"float32"), 5, )
paddle.pow(Tensor([2, 0],"float32"), 5, )
paddle.pow(Tensor([0, 2],"float32"), 6, )
paddle.pow(Tensor([2, 0],"float32"), 6, )
paddle.pow(Tensor([0, 3],"float32"), 2, )
paddle.pow(Tensor([2, 0],"float32"), 2, )
paddle.pow(Tensor([0],"float32"), 5, )
paddle.pow(Tensor([0],"float32"), 6, )
paddle.pow(Tensor([0],"int32"), Tensor([216],"int32"), )
paddle.pow(Tensor([216],"int32"), Tensor([0],"int32"), )
paddle.pow(Tensor([0],"int32"), Tensor([0],"int32"), )
paddle.pow(Tensor([0],"float64"), 3, )
paddle.pow(Tensor([0],"int64"), 6, )
paddle.pow(Tensor([0],"float64"), 8.902181874411676, )
paddle.pow(Tensor([0],"float64"), Tensor([267],"float64"), )
paddle.pow(Tensor([267],"float64"), Tensor([0],"float64"), )
paddle.pow(Tensor([0],"float64"), Tensor([0],"float64"), )
paddle.pow(Tensor([0],"float32"), Tensor([280],"float32"), )
paddle.pow(Tensor([280],"float32"), Tensor([0],"float32"), )
paddle.pow(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.pow(Tensor([0],"int64"), Tensor([282],"int64"), )
paddle.pow(Tensor([282],"int64"), Tensor([0],"int64"), )
paddle.pow(Tensor([0],"int64"), Tensor([0],"int64"), )
paddle.pow(Tensor([0, 3, 3, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 0, 3, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 0, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 3, 0, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 3, 40, 0],"float32"), 0.75, )
paddle.pow(Tensor([0, 3, 40, 40, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 0, 40, 40, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 0, 40, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 40, 0, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 40, 40, 0],"float32"), 0.75, )
paddle.pow(Tensor([0, 3, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 0, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 0, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 3, 40, 0],"float32"), 0.75, )
paddle.pow(Tensor([0, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.pow(Tensor([3, 0],"float32"), Tensor([3, 3],"float32"), )
paddle.pow(Tensor([3, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.pow(Tensor([3, 3],"float32"), Tensor([3, 0],"float32"), )
paddle.pow(Tensor([0, 3],"float32"), Tensor([0, 3],"float32"), )
paddle.pow(Tensor([3, 0],"float32"), Tensor([3, 0],"float32"), )
paddle.pow(Tensor([0, 40, 40, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 0, 40, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 40, 0, 3],"float32"), 0.75, )
paddle.pow(Tensor([3, 40, 40, 0],"float32"), 0.75, )
paddle.pow(Tensor([0, 40, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 0, 40],"float32"), 0.75, )
paddle.pow(Tensor([3, 40, 0],"float32"), 0.75, )
paddle.pow(Tensor([0, 5],"float32"), 2, )
paddle.pow(Tensor([3, 0],"float32"), 2, )
paddle.pow(Tensor([0],"float32"), Tensor([3],"float32"), )
paddle.pow(Tensor([3],"float32"), Tensor([0],"float32"), )
paddle.pow(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.pow(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float32"), )
paddle.pow(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float32"), )
paddle.pow(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float32"), )
paddle.pow(Tensor([0, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 0, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.pow(Tensor([0, 3, 2],"float16"), Tensor([0, 3, 2],"float64"), )
paddle.pow(Tensor([4, 0, 2],"float16"), Tensor([4, 0, 2],"float64"), )
paddle.pow(Tensor([4, 3, 0],"float16"), Tensor([4, 3, 0],"float64"), )
paddle.pow(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.pow(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float16"), )
paddle.pow(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float16"), )
paddle.pow(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float16"), )
paddle.pow(Tensor([0, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 0, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.pow(Tensor([0, 3, 2],"float32"), Tensor([0, 3, 2],"float64"), )
paddle.pow(Tensor([4, 0, 2],"float32"), Tensor([4, 0, 2],"float64"), )
paddle.pow(Tensor([4, 3, 0],"float32"), Tensor([4, 3, 0],"float64"), )
paddle.pow(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.pow(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float16"), )
paddle.pow(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float16"), )
paddle.pow(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float16"), )
paddle.pow(Tensor([0, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 0, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.pow(Tensor([0, 3, 2],"float64"), Tensor([0, 3, 2],"float32"), )
paddle.pow(Tensor([4, 0, 2],"float64"), Tensor([4, 0, 2],"float32"), )
paddle.pow(Tensor([4, 3, 0],"float64"), Tensor([4, 3, 0],"float32"), )
paddle.pow(Tensor([0],"float64"), 2, )
paddle.pow(Tensor([0, 120],"float32"), 2, )
paddle.pow(Tensor([400, 0],"float32"), 2, )
paddle.pow(Tensor([0, 2],"float64"), 1, )
paddle.pow(Tensor([5, 0],"float64"), 1, )
paddle.pow(Tensor([0, 2],"float64"), 2, )
paddle.pow(Tensor([5, 0],"float64"), 2, )
paddle.pow(Tensor([0, 3],"float64"), 2, )
paddle.pow(Tensor([0, 5],"float32"), 6.996091978980955, )
paddle.pow(Tensor([5, 0],"float32"), 6.996091978980955, )
paddle.pow(Tensor([0, 9, 7],"float64"), Tensor([7],"float64"), )
paddle.pow(Tensor([5, 0, 7],"float64"), Tensor([7],"float64"), )
paddle.pow(Tensor([5, 9, 0],"float64"), Tensor([7],"float64"), )
paddle.pow(Tensor([5, 9, 7],"float64"), Tensor([0],"float64"), )
paddle.pow(Tensor([0, 1],"float64"), 2, )
paddle.pow(Tensor([5000, 0],"float64"), 2, )
paddle.pow(Tensor([0, 2],"float32"), 2, )
paddle.pow(Tensor([5000, 0],"float32"), 2, )
paddle.pow(Tensor([50000, 0, 3],"float64"), 2, )
paddle.pow(Tensor([50000, 2, 0],"float64"), 2, )
paddle.pow(Tensor([50000, 0],"float32"), 2, )
paddle.pow(Tensor([0, 9],"float32"), 2, )
paddle.pow(Tensor([6, 0],"float32"), 2, )
paddle.pow(Tensor([0, 16, 32],"float32"), 3, )
paddle.pow(Tensor([8, 0, 32],"float32"), 3, )
paddle.pow(Tensor([8, 16, 0],"float32"), 3, )
paddle.pow(Tensor([84, 0],"float32"), 2, )
paddle.prod(Tensor([0, 10, 5],"complex64"), )
paddle.prod(Tensor([10, 0, 5],"complex64"), )
paddle.prod(Tensor([10, 10, 0],"complex64"), )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 0],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([0, 10, 5],"float32"), )
paddle.prod(Tensor([10, 0, 5],"float32"), )
paddle.prod(Tensor([10, 10, 0],"float32"), )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=-1, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=-1, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=-1, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, dtype="int64", )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, dtype="int64", )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, dtype="int64", )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=1, keepdim=True, dtype="int64", )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=1, keepdim=True, dtype="int64", )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=1, keepdim=True, dtype="int64", )
paddle.prod(Tensor([0, 10, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 0, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 0],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 0, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.prod(Tensor([10, 5, 9, 9],"float64"), Tensor([0],"int64"), )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 0, 3, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 0, 2, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([2, 5, 3, 2, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 5],"float32"), axis=None, )
paddle.prod(Tensor([3, 0],"float32"), axis=None, )
paddle.prod(Tensor([0, 5],"float32"), keepdim=True, )
paddle.prod(Tensor([3, 0],"float32"), keepdim=True, )
paddle.prod(Tensor([0, 6, 10],"float16"), list[0,], False, )
paddle.prod(Tensor([5, 0, 10],"float16"), list[0,], False, )
paddle.prod(Tensor([5, 6, 0],"float16"), list[0,], False, )
paddle.prod(Tensor([0, 6, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 0, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([5, 6, 0],"float32"), list[0,], False, )
paddle.prod(Tensor([0, 6, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 0, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([5, 6, 0],"float64"), list[0,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float16"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float32"), list[2,3,4,], False, )
paddle.prod(Tensor([0, 6, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 0, 2, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 0, 3, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 0, 4, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 0, 2],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([5, 6, 2, 3, 4, 0],"float64"), list[2,3,4,], False, )
paddle.prod(Tensor([0],"float32"), axis=0, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, )
paddle.quantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, )
paddle.quantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.quantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.quantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.quantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.quantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.quantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.quantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.quantile(Tensor([2, 0, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.quantile(Tensor([2, 3, 0],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.quantile(Tensor([0, 3],"float32"), 0.5, axis=None, )
paddle.quantile(Tensor([2, 0],"float32"), 0.5, axis=None, )
paddle.quantile(Tensor([0, 3],"float32"), list[0.3,0.7,], 1, )
paddle.quantile(Tensor([2, 0],"float32"), list[0.3,0.7,], 1, )
paddle.quantile(Tensor([0],"float32"), 0.5, 0, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0, axis=1, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0, axis=1, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0, axis=1, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.35, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.35, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.35, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.5, axis=2, )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.5, axis=2, )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.5, axis=2, )
paddle.quantile(Tensor([0, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([4, 0, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([4, 7, 0],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([0, 7],"float32"), q=0.5, axis=1, )
paddle.quantile(Tensor([4, 0],"float32"), q=0.5, axis=1, )
paddle.quantile(Tensor([0, 7],"float64"), q=0.5, axis=1, )
paddle.quantile(Tensor([4, 0],"float64"), q=0.5, axis=1, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([0, 3, 4],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 0, 4],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 0],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([0],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([0],"float32"), list[0.55,0.7,], 0, )
paddle.rad2deg(Tensor([0],"float32"), )
paddle.rad2deg(Tensor([0],"int64"), )
paddle.rad2deg(Tensor([0, 16, 32],"float32"), )
paddle.rad2deg(Tensor([8, 0, 32],"float32"), )
paddle.rad2deg(Tensor([8, 16, 0],"float32"), )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"bool"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"bool"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"float16"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"float16"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"float32"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"float32"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"float64"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"float64"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"int32"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"int32"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="bool", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="float16", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="float32", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="float64", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="int32", )
paddle.randint_like(Tensor([0, 12],"int64"), low=-100, high=100, dtype="int64", )
paddle.randint_like(Tensor([10, 0],"int64"), low=-100, high=100, dtype="int64", )
paddle.repeat_interleave(Tensor([0, 128],"float32"), 128, 0, )
paddle.repeat_interleave(Tensor([1, 0],"float32"), 128, 0, )
paddle.repeat_interleave(Tensor([0, 2],"int64"), 1, axis=0, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 1, axis=0, )
paddle.repeat_interleave(Tensor([0, 2],"int64"), 2, axis=0, )
paddle.repeat_interleave(Tensor([1, 0],"int64"), 2, axis=0, )
paddle.repeat_interleave(Tensor([0, 3],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([2, 0],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([0, 3],"bfloat16"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 0],"bfloat16"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), Tensor([0],"int32"), None, )
paddle.repeat_interleave(Tensor([0, 3],"int32"), 2, None, )
paddle.repeat_interleave(Tensor([2, 0],"int32"), 2, None, )
paddle.repeat_interleave(Tensor([0, 3],"int32"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 0],"int32"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), Tensor([0],"int32"), None, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([0],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([0],"int32"), 1, )
paddle.repeat_interleave(Tensor([0, 4],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([3, 0],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([0],"int32"), -1, )
paddle.reshape(Tensor([0, 1, 1, 32, 2],"float16"), list[1,1,1,64,], )
paddle.reshape(Tensor([1, 0, 1, 32, 2],"float16"), list[1,1,1,64,], )
paddle.reshape(Tensor([1, 1, 0, 32, 2],"float16"), list[1,1,1,64,], )
paddle.reshape(Tensor([1, 1, 1, 0, 2],"float16"), list[1,1,1,64,], )
paddle.reshape(Tensor([1, 1, 1, 32, 0],"float16"), list[1,1,1,64,], )
paddle.reshape(Tensor([0, 1, 3, 3, 1],"float32"), list[1,3,3,1,1,], )
paddle.reshape(Tensor([1, 0, 3, 3, 1],"float32"), list[1,3,3,1,1,], )
paddle.reshape(Tensor([1, 1, 0, 3, 1],"float32"), list[1,3,3,1,1,], )
paddle.reshape(Tensor([1, 1, 3, 0, 1],"float32"), list[1,3,3,1,1,], )
paddle.reshape(Tensor([1, 1, 3, 3, 0],"float32"), list[1,3,3,1,1,], )
paddle.reshape(Tensor([0, 1, 64, 32, 2],"float16"), list[1,1,64,64,], )
paddle.reshape(Tensor([1, 0, 64, 32, 2],"float16"), list[1,1,64,64,], )
paddle.reshape(Tensor([1, 1, 0, 32, 2],"float16"), list[1,1,64,64,], )
paddle.reshape(Tensor([1, 1, 64, 0, 2],"float16"), list[1,1,64,64,], )
paddle.reshape(Tensor([1, 1, 64, 32, 0],"float16"), list[1,1,64,64,], )
paddle.reshape(Tensor([0, 1],"float32"), list[], )
paddle.reshape(Tensor([1, 0],"float32"), list[], )
paddle.reshape(Tensor([0, 1],"float32"), list[-1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[-1,], )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([1],"int32"), )
paddle.reshape(Tensor([1, 1],"float32"), Tensor([0],"int32"), )
paddle.reshape(Tensor([0, 1],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([1, 0],"float32"), Tensor([3],"int32"), )
paddle.reshape(Tensor([0, 10, 1, 1],"float32"), list[-1,10,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), list[-1,10,], )
paddle.reshape(Tensor([1, 10, 0, 1],"float32"), list[-1,10,], )
paddle.reshape(Tensor([1, 10, 1, 0],"float32"), list[-1,10,], )
paddle.reshape(Tensor([0, 10],"float32"), list[-1,10,1,1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[-1,10,1,1,], )
paddle.reshape(Tensor([0, 100, 10],"float32"), list[100,10,], )
paddle.reshape(Tensor([1, 0, 10],"float32"), list[100,10,], )
paddle.reshape(Tensor([1, 100, 0],"float32"), list[100,10,], )
paddle.reshape(Tensor([0, 100],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1, 100],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 1024, 1, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([1, 1024, 0, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([1, 1024, 1, 0],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([0, 1024],"float32"), list[1,1024,1,1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[1,1024,1,1,], )
paddle.reshape(Tensor([0, 12, 2, 10, 10],"float32"), shape=list[1,24,10,10,], )
paddle.reshape(Tensor([1, 0, 2, 10, 10],"float32"), shape=list[1,24,10,10,], )
paddle.reshape(Tensor([1, 12, 0, 10, 10],"float32"), shape=list[1,24,10,10,], )
paddle.reshape(Tensor([1, 12, 2, 0, 10],"float32"), shape=list[1,24,10,10,], )
paddle.reshape(Tensor([1, 12, 2, 10, 0],"float32"), shape=list[1,24,10,10,], )
paddle.reshape(Tensor([0, 1280, 1, 1],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([1, 1280, 0, 1],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([1, 1280, 1, 0],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([0, 2, 1, 3],"float64"), list[-1,3,], )
paddle.reshape(Tensor([1, 0, 1, 3],"float64"), list[-1,3,], )
paddle.reshape(Tensor([1, 2, 0, 3],"float64"), list[-1,3,], )
paddle.reshape(Tensor([1, 2, 1, 0],"float64"), list[-1,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 0, 3],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 2, 0],"float32"), Tensor([3],"int64"), )
paddle.reshape(Tensor([1, 2, 3],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 4, 2],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 2, 8, 8],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2],"float32"), list[-1,], )
paddle.reshape(Tensor([0, 2048, 1, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([1, 2048, 0, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([1, 2048, 1, 0],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([0, 2048],"float32"), list[1,2048,1,1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[1,2048,1,1,], )
paddle.reshape(Tensor([0, 24, 10, 10],"float32"), shape=list[1,2,12,10,10,], )
paddle.reshape(Tensor([1, 0, 10, 10],"float32"), shape=list[1,2,12,10,10,], )
paddle.reshape(Tensor([1, 24, 0, 10],"float32"), shape=list[1,2,12,10,10,], )
paddle.reshape(Tensor([1, 24, 10, 0],"float32"), shape=list[1,2,12,10,10,], )
paddle.reshape(Tensor([0, 24, 2, 5, 5],"float32"), shape=list[1,48,5,5,], )
paddle.reshape(Tensor([1, 0, 2, 5, 5],"float32"), shape=list[1,48,5,5,], )
paddle.reshape(Tensor([1, 24, 0, 5, 5],"float32"), shape=list[1,48,5,5,], )
paddle.reshape(Tensor([1, 24, 2, 0, 5],"float32"), shape=list[1,48,5,5,], )
paddle.reshape(Tensor([1, 24, 2, 5, 0],"float32"), shape=list[1,48,5,5,], )
paddle.reshape(Tensor([0, 256, 1, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([1, 256, 0, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([1, 256, 1, 0],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([0, 256],"float32"), list[1,256,1,1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[1,256,1,1,], )
paddle.reshape(Tensor([0, 3, 1, 16, 1, 32, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 0, 1, 16, 1, 32, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 3, 0, 16, 1, 32, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 3, 1, 0, 1, 32, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 3, 1, 16, 0, 32, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 3, 1, 16, 1, 0, 1],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([1, 3, 1, 16, 1, 32, 0],"float32"), list[1,6,1,8,1,4,1,8,1,], )
paddle.reshape(Tensor([0, 3, 256, 256],"float32"), list[-1,196608,], )
paddle.reshape(Tensor([1, 0, 256, 256],"float32"), list[-1,196608,], )
paddle.reshape(Tensor([1, 3, 0, 256],"float32"), list[-1,196608,], )
paddle.reshape(Tensor([1, 3, 256, 0],"float32"), list[-1,196608,], )
paddle.reshape(Tensor([0, 3, 3, 1],"float32"), list[3,3,1,1,], )
paddle.reshape(Tensor([1, 0, 3, 1],"float32"), list[3,3,1,1,], )
paddle.reshape(Tensor([1, 3, 0, 1],"float32"), list[3,3,1,1,], )
paddle.reshape(Tensor([1, 3, 3, 0],"float32"), list[3,3,1,1,], )
paddle.reshape(Tensor([0, 3, 32, 32],"float32"), list[-1,3072,], )
paddle.reshape(Tensor([1, 0, 32, 32],"float32"), list[-1,3072,], )
paddle.reshape(Tensor([1, 3, 0, 32],"float32"), list[-1,3072,], )
paddle.reshape(Tensor([1, 3, 32, 0],"float32"), list[-1,3072,], )
paddle.reshape(Tensor([0, 3, 5, 2, 4],"float16"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 0, 5, 2, 4],"float16"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 0, 2, 4],"float16"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 5, 0, 4],"float16"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 5, 2, 0],"float16"), shape=list[15,8,], )
paddle.reshape(Tensor([0, 3, 5, 2, 4],"float32"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 0, 5, 2, 4],"float32"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 0, 2, 4],"float32"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 5, 0, 4],"float32"), shape=list[15,8,], )
paddle.reshape(Tensor([1, 3, 5, 2, 0],"float32"), shape=list[15,8,], )
paddle.reshape(Tensor([0, 3, 5, 8],"float16"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 0, 5, 8],"float16"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 3, 0, 8],"float16"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 3, 5, 0],"float16"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([0, 3, 5, 8],"float32"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 0, 5, 8],"float32"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 3, 0, 8],"float32"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([1, 3, 5, 0],"float32"), shape=list[1,3,5,2,4,], )
paddle.reshape(Tensor([0, 4, 10],"float32"), shape=list[1,-1,10,], )
paddle.reshape(Tensor([1, 0, 10],"float32"), shape=list[1,-1,10,], )
paddle.reshape(Tensor([1, 4, 0],"float32"), shape=list[1,-1,10,], )
paddle.reshape(Tensor([0, 4, 10],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([1, 0, 10],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([1, 4, 0],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([0, 4, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 4, 2],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 4, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([1, 4, 8, 8],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 48, 2, 3, 3],"float32"), shape=list[1,96,3,3,], )
paddle.reshape(Tensor([1, 0, 2, 3, 3],"float32"), shape=list[1,96,3,3,], )
paddle.reshape(Tensor([1, 48, 0, 3, 3],"float32"), shape=list[1,96,3,3,], )
paddle.reshape(Tensor([1, 48, 2, 0, 3],"float32"), shape=list[1,96,3,3,], )
paddle.reshape(Tensor([1, 48, 2, 3, 0],"float32"), shape=list[1,96,3,3,], )
paddle.reshape(Tensor([0, 48, 5, 5],"float32"), shape=list[1,2,24,5,5,], )
paddle.reshape(Tensor([1, 0, 5, 5],"float32"), shape=list[1,2,24,5,5,], )
paddle.reshape(Tensor([1, 48, 0, 5],"float32"), shape=list[1,2,24,5,5,], )
paddle.reshape(Tensor([1, 48, 5, 0],"float32"), shape=list[1,2,24,5,5,], )
paddle.reshape(Tensor([0, 50, 53, 53],"float32"), shape=list[-1,140450,], )
paddle.reshape(Tensor([1, 0, 53, 53],"float32"), shape=list[-1,140450,], )
paddle.reshape(Tensor([1, 50, 0, 53],"float32"), shape=list[-1,140450,], )
paddle.reshape(Tensor([1, 50, 53, 0],"float32"), shape=list[-1,140450,], )
paddle.reshape(Tensor([0, 512, 1, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([1, 0, 1, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([1, 512, 0, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([1, 512, 1, 0],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([0, 512],"float32"), list[1,512,1,1,], )
paddle.reshape(Tensor([1, 0],"float32"), list[1,512,1,1,], )
paddle.reshape(Tensor([0, 6],"float32"), shape=list[-1,6,], )
paddle.reshape(Tensor([1, 0],"float32"), shape=list[-1,6,], )
paddle.reshape(Tensor([0, 96, 3, 3],"float32"), shape=list[1,2,48,3,3,], )
paddle.reshape(Tensor([1, 0, 3, 3],"float32"), shape=list[1,2,48,3,3,], )
paddle.reshape(Tensor([1, 96, 0, 3],"float32"), shape=list[1,2,48,3,3,], )
paddle.reshape(Tensor([1, 96, 3, 0],"float32"), shape=list[1,2,48,3,3,], )
paddle.reshape(Tensor([0],"float32"), list[], )
paddle.reshape(Tensor([0],"float32"), list[1,1,1,1,], )
paddle.reshape(Tensor([0],"float64"), list[1,1,], )
paddle.reshape(Tensor([0],"int64"), list[], name="Categorical_sample", )
paddle.reshape(Tensor([0],"int64"), list[1,], name="Categorical_sample", )
paddle.reshape(Tensor([0],"int64"), list[1,-1,], )
paddle.reshape(Tensor([0, 1, 10],"float32"), list[10,10,], )
paddle.reshape(Tensor([10, 0, 10],"float32"), list[10,10,], )
paddle.reshape(Tensor([10, 1, 0],"float32"), list[10,10,], )
paddle.reshape(Tensor([0, 10, 10, 20],"float32"), list[10,100,20,], )
paddle.reshape(Tensor([10, 0, 10, 20],"float32"), list[10,100,20,], )
paddle.reshape(Tensor([10, 10, 0, 20],"float32"), list[10,100,20,], )
paddle.reshape(Tensor([10, 10, 10, 0],"float32"), list[10,100,20,], )
paddle.reshape(Tensor([0, 16],"float32"), list[-1,1,], )
paddle.reshape(Tensor([10, 0],"float32"), list[-1,1,], )
paddle.reshape(Tensor([0, 20, 1],"float32"), list[-1,], )
paddle.reshape(Tensor([10, 0, 1],"float32"), list[-1,], )
paddle.reshape(Tensor([10, 20, 0],"float32"), list[-1,], )
paddle.reshape(Tensor([0, 20, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 0, 1],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 20, 0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([10, 20, 1],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 20],"float64"), list[10,20,], )
paddle.reshape(Tensor([10, 0],"float64"), list[10,20,], )
paddle.reshape(Tensor([0, 5],"float32"), list[2,25,], )
paddle.reshape(Tensor([10, 0],"float32"), list[2,25,], )
paddle.reshape(Tensor([0, 5],"int64"), list[2,25,], )
paddle.reshape(Tensor([10, 0],"int64"), list[2,25,], )
paddle.reshape(Tensor([0],"float32"), list[1,10,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[2,5,], )
paddle.reshape(Tensor([0],"int64"), list[10,], name="Categorical_sample", )
paddle.reshape(Tensor([0],"float32"), list[100,], name="Uniform_sample", )
paddle.reshape(Tensor([0],"float32"), Tensor([1],"int64"), )
paddle.reshape(Tensor([100],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float64"), Tensor([1],"int64"), )
paddle.reshape(Tensor([100],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 1],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([1000, 0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([0, 2],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1000, 0],"float64"), Tensor([2],"int64"), )
paddle.reshape(Tensor([1000, 2],"float64"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([0, 1, 128],"float32"), shape=list[-1,32,128,], )
paddle.reshape(Tensor([1024, 0, 128],"float32"), shape=list[-1,32,128,], )
paddle.reshape(Tensor([1024, 1, 0],"float32"), shape=list[-1,32,128,], )
paddle.reshape(Tensor([0, 1],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([12, 0],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([0, 1],"float64"), shape=list[-1,3,], )
paddle.reshape(Tensor([12, 0],"float64"), shape=list[-1,3,], )
paddle.reshape(Tensor([0, 5],"float32"), list[15,4,], )
paddle.reshape(Tensor([12, 0],"float32"), list[15,4,], )
paddle.reshape(Tensor([0, 5],"int64"), list[15,4,], )
paddle.reshape(Tensor([12, 0],"int64"), list[15,4,], )
paddle.reshape(Tensor([0],"float32"), list[1,12,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,12,1,1,1,], )
paddle.reshape(Tensor([0],"int64"), shape=list[1,1,3,4,], )
paddle.reshape(Tensor([0, 1, 784],"float32"), shape=list[128,-1,], )
paddle.reshape(Tensor([128, 0, 784],"float32"), shape=list[128,-1,], )
paddle.reshape(Tensor([128, 1, 0],"float32"), shape=list[128,-1,], )
paddle.reshape(Tensor([0, 50, 4, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([128, 0, 4, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([128, 50, 0, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([128, 50, 4, 0],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([0],"float32"), list[1,8,1,16,], )
paddle.reshape(Tensor([0, 1],"int64"), list[13,], )
paddle.reshape(Tensor([13, 0],"int64"), list[13,], )
paddle.reshape(Tensor([0, 1],"int64"), list[14,], )
paddle.reshape(Tensor([14, 0],"int64"), list[14,], )
paddle.reshape(Tensor([0, 1],"int64"), list[15,], )
paddle.reshape(Tensor([15, 0],"int64"), list[15,], )
paddle.reshape(Tensor([0, 6],"float16"), shape=list[1,3,5,6,], )
paddle.reshape(Tensor([15, 0],"float16"), shape=list[1,3,5,6,], )
paddle.reshape(Tensor([0, 6],"float32"), shape=list[1,3,5,6,], )
paddle.reshape(Tensor([15, 0],"float32"), shape=list[1,3,5,6,], )
paddle.reshape(Tensor([0, 1, 128],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([16, 0, 128],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([16, 1, 0],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([0, 1],"int64"), list[16,], )
paddle.reshape(Tensor([16, 0],"int64"), list[16,], )
paddle.reshape(Tensor([0, 2048, 1, 1],"float32"), list[-1,8,2048,], )
paddle.reshape(Tensor([16, 0, 1, 1],"float32"), list[-1,8,2048,], )
paddle.reshape(Tensor([16, 2048, 0, 1],"float32"), list[-1,8,2048,], )
paddle.reshape(Tensor([16, 2048, 1, 0],"float32"), list[-1,8,2048,], )
paddle.reshape(Tensor([0, 1],"int64"), list[17,], )
paddle.reshape(Tensor([17, 0],"int64"), list[17,], )
paddle.reshape(Tensor([18, 0],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([0, 1],"int64"), list[18,], )
paddle.reshape(Tensor([18, 0],"int64"), list[18,], )
paddle.reshape(Tensor([2, 0, 128],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([2, 1, 0],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([0, 1, 24],"float32"), list[-1,24,], )
paddle.reshape(Tensor([2, 0, 24],"float32"), list[-1,24,], )
paddle.reshape(Tensor([2, 1, 0],"float32"), list[-1,24,], )
paddle.reshape(Tensor([0, 1, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 4, 2],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 1, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 1, 8, 8],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 1, 8],"float32"), list[-1,8,], )
paddle.reshape(Tensor([2, 0, 8],"float32"), list[-1,8,], )
paddle.reshape(Tensor([2, 1, 0],"float32"), list[-1,8,], )
paddle.reshape(Tensor([0, 112, 2, 28, 28],"float32"), shape=list[2,224,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,224,28,28,], )
paddle.reshape(Tensor([2, 112, 0, 28, 28],"float32"), shape=list[2,224,28,28,], )
paddle.reshape(Tensor([2, 112, 2, 0, 28],"float32"), shape=list[2,224,28,28,], )
paddle.reshape(Tensor([2, 112, 2, 28, 0],"float32"), shape=list[2,224,28,28,], )
paddle.reshape(Tensor([0, 116, 2, 14, 14],"float32"), shape=list[2,232,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,232,14,14,], )
paddle.reshape(Tensor([2, 116, 0, 14, 14],"float32"), shape=list[2,232,14,14,], )
paddle.reshape(Tensor([2, 116, 2, 0, 14],"float32"), shape=list[2,232,14,14,], )
paddle.reshape(Tensor([2, 116, 2, 14, 0],"float32"), shape=list[2,232,14,14,], )
paddle.reshape(Tensor([0, 116, 28, 28],"float32"), shape=list[2,2,58,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,58,28,28,], )
paddle.reshape(Tensor([2, 116, 0, 28],"float32"), shape=list[2,2,58,28,28,], )
paddle.reshape(Tensor([2, 116, 28, 0],"float32"), shape=list[2,2,58,28,28,], )
paddle.reshape(Tensor([0, 12, 2, 28, 28],"float32"), shape=list[2,24,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,24,28,28,], )
paddle.reshape(Tensor([2, 12, 0, 28, 28],"float32"), shape=list[2,24,28,28,], )
paddle.reshape(Tensor([2, 12, 2, 0, 28],"float32"), shape=list[2,24,28,28,], )
paddle.reshape(Tensor([2, 12, 2, 28, 0],"float32"), shape=list[2,24,28,28,], )
paddle.reshape(Tensor([0, 128, 60],"float32"), list[-1,60,], )
paddle.reshape(Tensor([2, 0, 60],"float32"), list[-1,60,], )
paddle.reshape(Tensor([2, 128, 0],"float32"), list[-1,60,], )
paddle.reshape(Tensor([0, 128, 7, 7],"float32"), shape=list[2,2,64,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,64,7,7,], )
paddle.reshape(Tensor([2, 128, 0, 7],"float32"), shape=list[2,2,64,7,7,], )
paddle.reshape(Tensor([2, 128, 7, 0],"float32"), shape=list[2,2,64,7,7,], )
paddle.reshape(Tensor([0, 16, 2, 28, 28],"float32"), shape=list[2,32,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,32,28,28,], )
paddle.reshape(Tensor([2, 16, 0, 28, 28],"float32"), shape=list[2,32,28,28,], )
paddle.reshape(Tensor([2, 16, 2, 0, 28],"float32"), shape=list[2,32,28,28,], )
paddle.reshape(Tensor([2, 16, 2, 28, 0],"float32"), shape=list[2,32,28,28,], )
paddle.reshape(Tensor([0, 176, 2, 14, 14],"float32"), shape=list[2,352,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,352,14,14,], )
paddle.reshape(Tensor([2, 176, 0, 14, 14],"float32"), shape=list[2,352,14,14,], )
paddle.reshape(Tensor([2, 176, 2, 0, 14],"float32"), shape=list[2,352,14,14,], )
paddle.reshape(Tensor([2, 176, 2, 14, 0],"float32"), shape=list[2,352,14,14,], )
paddle.reshape(Tensor([0, 176, 28, 28],"float32"), shape=list[2,2,88,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,88,28,28,], )
paddle.reshape(Tensor([2, 176, 0, 28],"float32"), shape=list[2,2,88,28,28,], )
paddle.reshape(Tensor([2, 176, 28, 0],"float32"), shape=list[2,2,88,28,28,], )
paddle.reshape(Tensor([0, 192, 7, 7],"float32"), shape=list[2,2,96,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,96,7,7,], )
paddle.reshape(Tensor([2, 192, 0, 7],"float32"), shape=list[2,2,96,7,7,], )
paddle.reshape(Tensor([2, 192, 7, 0],"float32"), shape=list[2,2,96,7,7,], )
paddle.reshape(Tensor([0, 198],"float32"), list[6,-1,], )
paddle.reshape(Tensor([2, 0],"float32"), list[6,-1,], )
paddle.reshape(Tensor([0, 2, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 1, 32, 2],"float16"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 64, 32, 2],"float16"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 16],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 16],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 2, 8, 8, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 0, 8, 8, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 0, 8, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 2, 8, 8, 2],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([2, 0],"float32"), list[-1,], )
paddle.reshape(Tensor([0, 2],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 0],"float64"), list[-1,], )
paddle.reshape(Tensor([0, 2048, 1, 1],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 0, 1, 1],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 2048, 0, 1],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 2048, 1, 0],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 0, 1, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 2048, 0, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 2048, 1, 0],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([0, 2048],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([2, 0],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([0, 224, 28, 28],"float32"), shape=list[2,2,112,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,112,28,28,], )
paddle.reshape(Tensor([2, 224, 0, 28],"float32"), shape=list[2,2,112,28,28,], )
paddle.reshape(Tensor([2, 224, 28, 0],"float32"), shape=list[2,2,112,28,28,], )
paddle.reshape(Tensor([0, 232, 14, 14],"float32"), shape=list[2,2,116,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,116,14,14,], )
paddle.reshape(Tensor([2, 232, 0, 14],"float32"), shape=list[2,2,116,14,14,], )
paddle.reshape(Tensor([2, 232, 14, 0],"float32"), shape=list[2,2,116,14,14,], )
paddle.reshape(Tensor([0, 232, 2, 7, 7],"float32"), shape=list[2,464,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,464,7,7,], )
paddle.reshape(Tensor([2, 232, 0, 7, 7],"float32"), shape=list[2,464,7,7,], )
paddle.reshape(Tensor([2, 232, 2, 0, 7],"float32"), shape=list[2,464,7,7,], )
paddle.reshape(Tensor([2, 232, 2, 7, 0],"float32"), shape=list[2,464,7,7,], )
paddle.reshape(Tensor([0, 24, 2, 14, 14],"float32"), shape=list[2,48,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,48,14,14,], )
paddle.reshape(Tensor([2, 24, 0, 14, 14],"float32"), shape=list[2,48,14,14,], )
paddle.reshape(Tensor([2, 24, 2, 0, 14],"float32"), shape=list[2,48,14,14,], )
paddle.reshape(Tensor([2, 24, 2, 14, 0],"float32"), shape=list[2,48,14,14,], )
paddle.reshape(Tensor([0, 24, 2, 28, 28],"float32"), shape=list[2,48,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,48,28,28,], )
paddle.reshape(Tensor([2, 24, 0, 28, 28],"float32"), shape=list[2,48,28,28,], )
paddle.reshape(Tensor([2, 24, 2, 0, 28],"float32"), shape=list[2,48,28,28,], )
paddle.reshape(Tensor([2, 24, 2, 28, 0],"float32"), shape=list[2,48,28,28,], )
paddle.reshape(Tensor([0, 24, 28, 28],"float32"), shape=list[2,2,12,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,12,28,28,], )
paddle.reshape(Tensor([2, 24, 0, 28],"float32"), shape=list[2,2,12,28,28,], )
paddle.reshape(Tensor([2, 24, 28, 0],"float32"), shape=list[2,2,12,28,28,], )
paddle.reshape(Tensor([0, 244, 2, 14, 14],"float32"), shape=list[2,488,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,488,14,14,], )
paddle.reshape(Tensor([2, 244, 0, 14, 14],"float32"), shape=list[2,488,14,14,], )
paddle.reshape(Tensor([2, 244, 2, 0, 14],"float32"), shape=list[2,488,14,14,], )
paddle.reshape(Tensor([2, 244, 2, 14, 0],"float32"), shape=list[2,488,14,14,], )
paddle.reshape(Tensor([0, 25],"float32"), list[2,5,5,], )
paddle.reshape(Tensor([2, 0],"float32"), list[2,5,5,], )
paddle.reshape(Tensor([0, 25],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([2, 0],"float32"), shape=list[Tensor([1],"int32"),10,], )
paddle.reshape(Tensor([2, 25],"float32"), shape=list[Tensor([0],"int32"),10,], )
paddle.reshape(Tensor([0, 25],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 0],"float32"), shape=Tensor([3],"int32"), )
paddle.reshape(Tensor([2, 25],"float32"), shape=Tensor([0],"int32"), )
paddle.reshape(Tensor([0, 27],"float32"), list[2,3,3,3,], )
paddle.reshape(Tensor([2, 0],"float32"), list[2,3,3,3,], )
paddle.reshape(Tensor([0, 3, 3, 3],"float32"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 0, 3, 3],"float32"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 3, 0, 3],"float32"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 3, 3, 0],"float32"), tuple(2,-1,), )
paddle.reshape(Tensor([0, 3, 4],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 0, 4],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex128"), tuple(0,-1,), )
paddle.reshape(Tensor([0, 3, 4],"complex128"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 0, 4],"complex128"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex128"), tuple(2,-1,), )
paddle.reshape(Tensor([0, 3, 4],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 0, 4],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex64"), tuple(0,-1,), )
paddle.reshape(Tensor([0, 3, 4],"complex64"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 0, 4],"complex64"), tuple(2,-1,), )
paddle.reshape(Tensor([2, 3, 0],"complex64"), tuple(2,-1,), )
paddle.reshape(Tensor([0, 3, 4],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 0, 4],"float64"), list[-1,], )
paddle.reshape(Tensor([2, 3, 0],"float64"), list[-1,], )
paddle.reshape(Tensor([0, 3, 5, 2, 4],"float16"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 0, 5, 2, 4],"float16"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 0, 2, 4],"float16"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 5, 0, 4],"float16"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 5, 2, 0],"float16"), shape=list[30,8,], )
paddle.reshape(Tensor([0, 3, 5, 2, 4],"float32"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 0, 5, 2, 4],"float32"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 0, 2, 4],"float32"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 5, 0, 4],"float32"), shape=list[30,8,], )
paddle.reshape(Tensor([2, 3, 5, 2, 0],"float32"), shape=list[30,8,], )
paddle.reshape(Tensor([0, 3, 5, 8],"float16"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 0, 5, 8],"float16"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 3, 0, 8],"float16"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 3, 5, 0],"float16"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([0, 3, 5, 8],"float32"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 0, 5, 8],"float32"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 3, 0, 8],"float32"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([2, 3, 5, 0],"float32"), shape=list[2,3,5,2,4,], )
paddle.reshape(Tensor([0, 3],"float32"), list[3,2,], )
paddle.reshape(Tensor([2, 0],"float32"), list[3,2,], )
paddle.reshape(Tensor([0, 3],"float64"), list[-1,], )
paddle.reshape(Tensor([0, 3],"int32"), shape=tuple(-1,1,), )
paddle.reshape(Tensor([2, 0],"int32"), shape=tuple(-1,1,), )
paddle.reshape(Tensor([0, 3],"int64"), list[-1,], )
paddle.reshape(Tensor([2, 0],"int64"), list[-1,], )
paddle.reshape(Tensor([0, 3],"int64"), list[-1,1,], )
paddle.reshape(Tensor([2, 0],"int64"), list[-1,1,], )
paddle.reshape(Tensor([0, 3072],"float32"), list[2,3,32,32,], )
paddle.reshape(Tensor([2, 0],"float32"), list[2,3,32,32,], )
paddle.reshape(Tensor([0, 32, 2, 14, 14],"float32"), shape=list[2,64,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,64,14,14,], )
paddle.reshape(Tensor([2, 32, 0, 14, 14],"float32"), shape=list[2,64,14,14,], )
paddle.reshape(Tensor([2, 32, 2, 0, 14],"float32"), shape=list[2,64,14,14,], )
paddle.reshape(Tensor([2, 32, 2, 14, 0],"float32"), shape=list[2,64,14,14,], )
paddle.reshape(Tensor([0, 32, 28, 28],"float32"), shape=list[2,2,16,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,16,28,28,], )
paddle.reshape(Tensor([2, 32, 0, 28],"float32"), shape=list[2,2,16,28,28,], )
paddle.reshape(Tensor([2, 32, 28, 0],"float32"), shape=list[2,2,16,28,28,], )
paddle.reshape(Tensor([0, 352, 14, 14],"float32"), shape=list[2,2,176,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,176,14,14,], )
paddle.reshape(Tensor([2, 352, 0, 14],"float32"), shape=list[2,2,176,14,14,], )
paddle.reshape(Tensor([2, 352, 14, 0],"float32"), shape=list[2,2,176,14,14,], )
paddle.reshape(Tensor([0, 352, 2, 7, 7],"float32"), shape=list[2,704,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,704,7,7,], )
paddle.reshape(Tensor([2, 352, 0, 7, 7],"float32"), shape=list[2,704,7,7,], )
paddle.reshape(Tensor([2, 352, 2, 0, 7],"float32"), shape=list[2,704,7,7,], )
paddle.reshape(Tensor([2, 352, 2, 7, 0],"float32"), shape=list[2,704,7,7,], )
paddle.reshape(Tensor([0, 4, 4, 4],"float32"), list[2,64,], )
paddle.reshape(Tensor([2, 0, 4, 4],"float32"), list[2,64,], )
paddle.reshape(Tensor([2, 4, 0, 4],"float32"), list[2,64,], )
paddle.reshape(Tensor([2, 4, 4, 0],"float32"), list[2,64,], )
paddle.reshape(Tensor([0, 4, 6],"float16"), shape=list[8,6,], )
paddle.reshape(Tensor([2, 0, 6],"float16"), shape=list[8,6,], )
paddle.reshape(Tensor([2, 4, 0],"float16"), shape=list[8,6,], )
paddle.reshape(Tensor([0, 4, 6],"float32"), shape=list[8,6,], )
paddle.reshape(Tensor([2, 0, 6],"float32"), shape=list[8,6,], )
paddle.reshape(Tensor([2, 4, 0],"float32"), shape=list[8,6,], )
paddle.reshape(Tensor([2, 4, 0, 4, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 0, 2],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 4, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 4, 2],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([2, 4, 0, 8],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 0],"float32"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 4, 8, 8],"float32"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 464, 7, 7],"float32"), shape=list[2,2,232,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,232,7,7,], )
paddle.reshape(Tensor([2, 464, 0, 7],"float32"), shape=list[2,2,232,7,7,], )
paddle.reshape(Tensor([2, 464, 7, 0],"float32"), shape=list[2,2,232,7,7,], )
paddle.reshape(Tensor([0, 48, 14, 14],"float32"), shape=list[2,2,24,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,24,14,14,], )
paddle.reshape(Tensor([2, 48, 0, 14],"float32"), shape=list[2,2,24,14,14,], )
paddle.reshape(Tensor([2, 48, 14, 0],"float32"), shape=list[2,2,24,14,14,], )
paddle.reshape(Tensor([0, 48, 2, 14, 14],"float32"), shape=list[2,96,14,14,], )
paddle.reshape(Tensor([2, 0, 2, 14, 14],"float32"), shape=list[2,96,14,14,], )
paddle.reshape(Tensor([2, 48, 0, 14, 14],"float32"), shape=list[2,96,14,14,], )
paddle.reshape(Tensor([2, 48, 2, 0, 14],"float32"), shape=list[2,96,14,14,], )
paddle.reshape(Tensor([2, 48, 2, 14, 0],"float32"), shape=list[2,96,14,14,], )
paddle.reshape(Tensor([0, 48, 2, 7, 7],"float32"), shape=list[2,96,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,96,7,7,], )
paddle.reshape(Tensor([2, 48, 0, 7, 7],"float32"), shape=list[2,96,7,7,], )
paddle.reshape(Tensor([2, 48, 2, 0, 7],"float32"), shape=list[2,96,7,7,], )
paddle.reshape(Tensor([2, 48, 2, 7, 0],"float32"), shape=list[2,96,7,7,], )
paddle.reshape(Tensor([0, 48, 28, 28],"float32"), shape=list[2,2,24,28,28,], )
paddle.reshape(Tensor([2, 0, 28, 28],"float32"), shape=list[2,2,24,28,28,], )
paddle.reshape(Tensor([2, 48, 0, 28],"float32"), shape=list[2,2,24,28,28,], )
paddle.reshape(Tensor([2, 48, 28, 0],"float32"), shape=list[2,2,24,28,28,], )
paddle.reshape(Tensor([0, 488, 14, 14],"float32"), shape=list[2,2,244,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,244,14,14,], )
paddle.reshape(Tensor([2, 488, 0, 14],"float32"), shape=list[2,2,244,14,14,], )
paddle.reshape(Tensor([2, 488, 14, 0],"float32"), shape=list[2,2,244,14,14,], )
paddle.reshape(Tensor([0, 488, 2, 7, 7],"float32"), shape=list[2,976,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,976,7,7,], )
paddle.reshape(Tensor([2, 488, 0, 7, 7],"float32"), shape=list[2,976,7,7,], )
paddle.reshape(Tensor([2, 488, 2, 0, 7],"float32"), shape=list[2,976,7,7,], )
paddle.reshape(Tensor([2, 488, 2, 7, 0],"float32"), shape=list[2,976,7,7,], )
paddle.reshape(Tensor([0, 5],"float32"), list[10,], )
paddle.reshape(Tensor([2, 0],"float32"), list[10,], )
paddle.reshape(Tensor([0, 5],"int64"), list[10,], )
paddle.reshape(Tensor([2, 0],"int64"), list[10,], )
paddle.reshape(Tensor([2, 0, 4, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([2, 50, 0, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([2, 50, 4, 0],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([0, 58, 2, 28, 28],"float32"), shape=list[2,116,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,116,28,28,], )
paddle.reshape(Tensor([2, 58, 0, 28, 28],"float32"), shape=list[2,116,28,28,], )
paddle.reshape(Tensor([2, 58, 2, 0, 28],"float32"), shape=list[2,116,28,28,], )
paddle.reshape(Tensor([2, 58, 2, 28, 0],"float32"), shape=list[2,116,28,28,], )
paddle.reshape(Tensor([0, 6, 32, 32],"float32"), list[2,-1,], )
paddle.reshape(Tensor([2, 0, 32, 32],"float32"), list[2,-1,], )
paddle.reshape(Tensor([2, 6, 0, 32],"float32"), list[2,-1,], )
paddle.reshape(Tensor([2, 6, 32, 0],"float32"), list[2,-1,], )
paddle.reshape(Tensor([0, 60],"float32"), list[12,10,], )
paddle.reshape(Tensor([2, 0],"float32"), list[12,10,], )
paddle.reshape(Tensor([0, 64, 14, 14],"float32"), shape=list[2,2,32,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,32,14,14,], )
paddle.reshape(Tensor([2, 64, 0, 14],"float32"), shape=list[2,2,32,14,14,], )
paddle.reshape(Tensor([2, 64, 14, 0],"float32"), shape=list[2,2,32,14,14,], )
paddle.reshape(Tensor([0, 64, 2, 7, 7],"float32"), shape=list[2,128,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,128,7,7,], )
paddle.reshape(Tensor([2, 64, 0, 7, 7],"float32"), shape=list[2,128,7,7,], )
paddle.reshape(Tensor([2, 64, 2, 0, 7],"float32"), shape=list[2,128,7,7,], )
paddle.reshape(Tensor([2, 64, 2, 7, 0],"float32"), shape=list[2,128,7,7,], )
paddle.reshape(Tensor([0, 704, 7, 7],"float32"), shape=list[2,2,352,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,352,7,7,], )
paddle.reshape(Tensor([2, 704, 0, 7],"float32"), shape=list[2,2,352,7,7,], )
paddle.reshape(Tensor([2, 704, 7, 0],"float32"), shape=list[2,2,352,7,7,], )
paddle.reshape(Tensor([0, 8, 1, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 0, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 1, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 1, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 1, 32, 2],"float16"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 8, 16, 2],"float32"), list[-1,8,32,], )
paddle.reshape(Tensor([2, 0, 16, 2],"float32"), list[-1,8,32,], )
paddle.reshape(Tensor([2, 8, 0, 2],"float32"), list[-1,8,32,], )
paddle.reshape(Tensor([2, 8, 16, 0],"float32"), list[-1,8,32,], )
paddle.reshape(Tensor([0, 8, 3, 224, 224],"float32"), list[-1,3,224,224,], )
paddle.reshape(Tensor([2, 0, 3, 224, 224],"float32"), list[-1,3,224,224,], )
paddle.reshape(Tensor([2, 8, 0, 224, 224],"float32"), list[-1,3,224,224,], )
paddle.reshape(Tensor([2, 8, 3, 0, 224],"float32"), list[-1,3,224,224,], )
paddle.reshape(Tensor([2, 8, 3, 224, 0],"float32"), list[-1,3,224,224,], )
paddle.reshape(Tensor([0, 8, 64, 32, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 64, 0, 2],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 64, 32, 0],"float16"), Tensor([4],"int64"), )
paddle.reshape(Tensor([2, 8, 64, 32, 2],"float16"), Tensor([0],"int64"), )
paddle.reshape(Tensor([0, 8],"float32"), list[-1,1,8,], )
paddle.reshape(Tensor([2, 0],"float32"), list[-1,1,8,], )
paddle.reshape(Tensor([0, 8],"float32"), list[2,8,1,], )
paddle.reshape(Tensor([2, 0],"float32"), list[2,8,1,], )
paddle.reshape(Tensor([0, 88, 2, 28, 28],"float32"), shape=list[2,176,28,28,], )
paddle.reshape(Tensor([2, 0, 2, 28, 28],"float32"), shape=list[2,176,28,28,], )
paddle.reshape(Tensor([2, 88, 0, 28, 28],"float32"), shape=list[2,176,28,28,], )
paddle.reshape(Tensor([2, 88, 2, 0, 28],"float32"), shape=list[2,176,28,28,], )
paddle.reshape(Tensor([2, 88, 2, 28, 0],"float32"), shape=list[2,176,28,28,], )
paddle.reshape(Tensor([0, 96, 14, 14],"float32"), shape=list[2,2,48,14,14,], )
paddle.reshape(Tensor([2, 0, 14, 14],"float32"), shape=list[2,2,48,14,14,], )
paddle.reshape(Tensor([2, 96, 0, 14],"float32"), shape=list[2,2,48,14,14,], )
paddle.reshape(Tensor([2, 96, 14, 0],"float32"), shape=list[2,2,48,14,14,], )
paddle.reshape(Tensor([0, 96, 2, 7, 7],"float32"), shape=list[2,192,7,7,], )
paddle.reshape(Tensor([2, 0, 2, 7, 7],"float32"), shape=list[2,192,7,7,], )
paddle.reshape(Tensor([2, 96, 0, 7, 7],"float32"), shape=list[2,192,7,7,], )
paddle.reshape(Tensor([2, 96, 2, 0, 7],"float32"), shape=list[2,192,7,7,], )
paddle.reshape(Tensor([2, 96, 2, 7, 0],"float32"), shape=list[2,192,7,7,], )
paddle.reshape(Tensor([0, 96, 7, 7],"float32"), shape=list[2,2,48,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,48,7,7,], )
paddle.reshape(Tensor([2, 96, 0, 7],"float32"), shape=list[2,2,48,7,7,], )
paddle.reshape(Tensor([2, 96, 7, 0],"float32"), shape=list[2,2,48,7,7,], )
paddle.reshape(Tensor([0, 976, 7, 7],"float32"), shape=list[2,2,488,7,7,], )
paddle.reshape(Tensor([2, 0, 7, 7],"float32"), shape=list[2,2,488,7,7,], )
paddle.reshape(Tensor([2, 976, 0, 7],"float32"), shape=list[2,2,488,7,7,], )
paddle.reshape(Tensor([2, 976, 7, 0],"float32"), shape=list[2,2,488,7,7,], )
paddle.reshape(Tensor([0],"float32"), list[1,2,], )
paddle.reshape(Tensor([0],"float32"), list[1,2,1,1,], )
paddle.reshape(Tensor([0],"float32"), shape=list[1,-1,], )
paddle.reshape(Tensor([0],"float64"), list[-1,], )
paddle.reshape(Tensor([0],"float64"), list[2,], )
paddle.reshape(Tensor([0, 1],"int64"), list[24,], )
paddle.reshape(Tensor([24, 0],"int64"), list[24,], )
paddle.reshape(Tensor([0],"float64"), list[2,3,4,], )
paddle.reshape(Tensor([0],"int64"), shape=list[1,1,3,3,3,], )
paddle.reshape(Tensor([0],"int64"), shape=list[1,3,3,3,], )
paddle.reshape(Tensor([0, 1, 3, 3, 40, 40],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([3, 0, 3, 3, 40, 40],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([3, 1, 0, 3, 40, 40],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([3, 1, 3, 0, 40, 40],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([3, 1, 3, 3, 0, 40],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([3, 1, 3, 3, 40, 0],"float32"), shape=list[3,1,3,3,1600,], )
paddle.reshape(Tensor([0, 1, 3, 40, 40, 3],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([3, 0, 3, 40, 40, 3],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([3, 1, 0, 40, 40, 3],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([3, 1, 3, 0, 40, 3],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([3, 1, 3, 40, 0, 3],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([3, 1, 3, 40, 40, 0],"float32"), shape=list[3,1,3,1600,3,], )
paddle.reshape(Tensor([0, 1, 3, 40, 40],"float32"), shape=list[3,1,3,40,40,], )
paddle.reshape(Tensor([3, 0, 3, 40, 40],"float32"), shape=list[3,1,3,40,40,], )
paddle.reshape(Tensor([3, 1, 0, 40, 40],"float32"), shape=list[3,1,3,40,40,], )
paddle.reshape(Tensor([3, 1, 3, 0, 40],"float32"), shape=list[3,1,3,40,40,], )
paddle.reshape(Tensor([3, 1, 3, 40, 0],"float32"), shape=list[3,1,3,40,40,], )
paddle.reshape(Tensor([0, 1, 40, 40, 3],"float32"), shape=list[3,1,40,40,3,], )
paddle.reshape(Tensor([3, 0, 40, 40, 3],"float32"), shape=list[3,1,40,40,3,], )
paddle.reshape(Tensor([3, 1, 0, 40, 3],"float32"), shape=list[3,1,40,40,3,], )
paddle.reshape(Tensor([3, 1, 40, 0, 3],"float32"), shape=list[3,1,40,40,3,], )
paddle.reshape(Tensor([3, 1, 40, 40, 0],"float32"), shape=list[3,1,40,40,3,], )
paddle.reshape(Tensor([0, 100, 120],"float64"), list[120,300,], )
paddle.reshape(Tensor([3, 0, 120],"float64"), list[120,300,], )
paddle.reshape(Tensor([3, 100, 0],"float64"), list[120,300,], )
paddle.reshape(Tensor([0, 18],"float32"), list[3,2,3,3,], )
paddle.reshape(Tensor([3, 0],"float32"), list[3,2,3,3,], )
paddle.reshape(Tensor([0, 2, 3, 3],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([3, 0, 3, 3],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([3, 2, 0, 3],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([3, 2, 3, 0],"float32"), tuple(3,-1,), )
paddle.reshape(Tensor([0, 2, 3, 3],"int64"), list[-1,3,], )
paddle.reshape(Tensor([3, 0, 3, 3],"int64"), list[-1,3,], )
paddle.reshape(Tensor([3, 2, 0, 3],"int64"), list[-1,3,], )
paddle.reshape(Tensor([3, 2, 3, 0],"int64"), list[-1,3,], )
paddle.reshape(Tensor([0, 2, 5],"float32"), list[6,5,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[6,5,], )
paddle.reshape(Tensor([3, 2, 0],"float32"), list[6,5,], )
paddle.reshape(Tensor([0, 2],"int64"), list[3,2,], )
paddle.reshape(Tensor([3, 0],"int64"), list[3,2,], )
paddle.reshape(Tensor([0, 3, 1600, 3],"float32"), list[3,3,40,40,3,], )
paddle.reshape(Tensor([3, 0, 1600, 3],"float32"), list[3,3,40,40,3,], )
paddle.reshape(Tensor([3, 3, 0, 3],"float32"), list[3,3,40,40,3,], )
paddle.reshape(Tensor([3, 3, 1600, 0],"float32"), list[3,3,40,40,3,], )
paddle.reshape(Tensor([0, 3, 3, 1600],"float32"), list[3,3,3,40,40,], )
paddle.reshape(Tensor([3, 0, 3, 1600],"float32"), list[3,3,3,40,40,], )
paddle.reshape(Tensor([3, 3, 0, 1600],"float32"), list[3,3,3,40,40,], )
paddle.reshape(Tensor([3, 3, 3, 0],"float32"), list[3,3,3,40,40,], )
paddle.reshape(Tensor([0, 3, 3],"float32"), list[3,-1,3,], )
paddle.reshape(Tensor([3, 0, 3],"float32"), list[3,-1,3,], )
paddle.reshape(Tensor([3, 3, 0],"float32"), list[3,-1,3,], )
paddle.reshape(Tensor([0, 3, 40, 40],"float32"), list[3,3,40,40,], )
paddle.reshape(Tensor([3, 0, 40, 40],"float32"), list[3,3,40,40,], )
paddle.reshape(Tensor([3, 3, 0, 40],"float32"), list[3,3,40,40,], )
paddle.reshape(Tensor([3, 3, 40, 0],"float32"), list[3,3,40,40,], )
paddle.reshape(Tensor([0, 32, 32],"float32"), list[3,1024,], )
paddle.reshape(Tensor([3, 0, 32],"float32"), list[3,1024,], )
paddle.reshape(Tensor([3, 32, 0],"float32"), list[3,1024,], )
paddle.reshape(Tensor([0, 4, 4, 5, 7],"float32"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 0, 4, 5, 7],"float32"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 0, 5, 7],"float32"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 4, 0, 7],"float32"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 4, 5, 0],"float32"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([0, 4, 4, 5, 7],"int64"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 0, 4, 5, 7],"int64"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 0, 5, 7],"int64"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 4, 0, 7],"int64"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([3, 4, 4, 5, 0],"int64"), list[1,12,2,5,14,], )
paddle.reshape(Tensor([0, 4, 5],"float32"), list[1,-1,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[1,-1,], )
paddle.reshape(Tensor([3, 4, 0],"float32"), list[1,-1,], )
paddle.reshape(Tensor([0, 4, 5],"float32"), list[2,-1,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[2,-1,], )
paddle.reshape(Tensor([3, 4, 0],"float32"), list[2,-1,], )
paddle.reshape(Tensor([0, 4, 5],"float32"), list[3,-1,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[3,-1,], )
paddle.reshape(Tensor([3, 4, 0],"float32"), list[3,-1,], )
paddle.reshape(Tensor([0, 4, 5],"float32"), list[4,-1,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[4,-1,], )
paddle.reshape(Tensor([3, 4, 0],"float32"), list[4,-1,], )
paddle.reshape(Tensor([0, 4, 5],"float32"), list[5,-1,], )
paddle.reshape(Tensor([3, 0, 5],"float32"), list[5,-1,], )
paddle.reshape(Tensor([3, 4, 0],"float32"), list[5,-1,], )
paddle.reshape(Tensor([0, 4],"float32"), list[2,2,3,], )
paddle.reshape(Tensor([3, 0],"float32"), list[2,2,3,], )
paddle.reshape(Tensor([0, 40, 40, 3],"float32"), list[3,40,40,3,], )
paddle.reshape(Tensor([3, 0, 40, 3],"float32"), list[3,40,40,3,], )
paddle.reshape(Tensor([3, 40, 0, 3],"float32"), list[3,40,40,3,], )
paddle.reshape(Tensor([3, 40, 40, 0],"float32"), list[3,40,40,3,], )
paddle.reshape(Tensor([0, 5],"float32"), list[3,5,], )
paddle.reshape(Tensor([3, 0],"float32"), list[3,5,], )
paddle.reshape(Tensor([0, 5],"float64"), list[3,5,], )
paddle.reshape(Tensor([3, 0],"float64"), list[3,5,], )
paddle.reshape(Tensor([0],"float32"), list[1,3,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,3,1,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[3,1,1,1,], )
paddle.reshape(Tensor([0],"int64"), list[1,-1,], name="Categorical_probs", )
paddle.reshape(Tensor([0],"int64"), list[1,1,-1,], name="Categorical_probs", )
paddle.reshape(Tensor([0, 6],"float16"), shape=list[2,3,5,6,], )
paddle.reshape(Tensor([30, 0],"float16"), shape=list[2,3,5,6,], )
paddle.reshape(Tensor([0, 6],"float32"), shape=list[2,3,5,6,], )
paddle.reshape(Tensor([30, 0],"float32"), shape=list[2,3,5,6,], )
paddle.reshape(Tensor([0, 32],"float64"), shape=list[-1,4,32,], )
paddle.reshape(Tensor([32, 0],"float64"), shape=list[-1,4,32,], )
paddle.reshape(Tensor([0, 32],"int64"), shape=list[-1,1,], )
paddle.reshape(Tensor([32, 0],"int64"), shape=list[-1,1,], )
paddle.reshape(Tensor([0, 4, 512],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([32, 0, 512],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([32, 4, 0],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([0, 8],"float32"), shape=tuple(-1,4,8,), )
paddle.reshape(Tensor([32, 0],"float32"), shape=tuple(-1,4,8,), )
paddle.reshape(Tensor([0, 1],"int64"), list[33,], )
paddle.reshape(Tensor([33, 0],"int64"), list[33,], )
paddle.reshape(Tensor([36, 0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([0],"int64"), shape=list[1,1,3,3,4,], )
paddle.reshape(Tensor([0, 1, 10],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([4, 0, 10],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([4, 1, 0],"float32"), shape=list[-1,10,], )
paddle.reshape(Tensor([4, 0, 128],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([4, 1, 0],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([0, 1, 3, 3],"complex128"), list[-1,3,], )
paddle.reshape(Tensor([4, 0, 3, 3],"complex128"), list[-1,3,], )
paddle.reshape(Tensor([4, 1, 0, 3],"complex128"), list[-1,3,], )
paddle.reshape(Tensor([4, 1, 3, 0],"complex128"), list[-1,3,], )
paddle.reshape(Tensor([0, 1],"float32"), list[-1,1,], )
paddle.reshape(Tensor([4, 0],"float32"), list[-1,1,], )
paddle.reshape(Tensor([4, 0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([0, 10],"float32"), shape=list[1,-1,10,], )
paddle.reshape(Tensor([4, 0],"float32"), shape=list[1,-1,10,], )
paddle.reshape(Tensor([0, 10],"float32"), shape=list[-1,1,10,], )
paddle.reshape(Tensor([4, 0],"float32"), shape=list[-1,1,10,], )
paddle.reshape(Tensor([4, 0, 1, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([4, 1024, 0, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([4, 1024, 1, 0],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([4, 0, 1, 1],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([4, 1280, 0, 1],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([4, 1280, 1, 0],"float32"), shape=list[-1,1280,], )
paddle.reshape(Tensor([0, 2],"float32"), tuple(2,4,), )
paddle.reshape(Tensor([4, 0],"float32"), tuple(2,4,), )
paddle.reshape(Tensor([0, 3, 1, 10],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([4, 0, 1, 10],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([4, 3, 0, 10],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([4, 3, 1, 0],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([0, 3, 1],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([4, 0, 1],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([4, 3, 0],"float32"), shape=list[-1,3,], )
paddle.reshape(Tensor([0, 3, 10],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([4, 0, 10],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([4, 3, 0],"float32"), shape=list[-1,3,10,], )
paddle.reshape(Tensor([0, 3, 1000],"float32"), shape=list[-1,1000,], )
paddle.reshape(Tensor([4, 0, 1000],"float32"), shape=list[-1,1000,], )
paddle.reshape(Tensor([4, 3, 0],"float32"), shape=list[-1,1000,], )
paddle.reshape(Tensor([0, 3, 1000],"float64"), shape=list[-1,1000,], )
paddle.reshape(Tensor([4, 0, 1000],"float64"), shape=list[-1,1000,], )
paddle.reshape(Tensor([4, 3, 0],"float64"), shape=list[-1,1000,], )
paddle.reshape(Tensor([0, 30],"float32"), list[-1,3,10,], )
paddle.reshape(Tensor([4, 0],"float32"), list[-1,3,10,], )
paddle.reshape(Tensor([0, 4, 2, 3],"int32"), list[-1,3,], )
paddle.reshape(Tensor([4, 0, 2, 3],"int32"), list[-1,3,], )
paddle.reshape(Tensor([4, 4, 0, 3],"int32"), list[-1,3,], )
paddle.reshape(Tensor([4, 4, 2, 0],"int32"), list[-1,3,], )
paddle.reshape(Tensor([0],"float32"), list[-1,], )
paddle.reshape(Tensor([0],"float32"), list[1,4,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,4,1,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[2,2,], )
paddle.reshape(Tensor([0],"float32"), list[4,], )
paddle.reshape(Tensor([0],"float32"), shape=list[-1,4,], )
paddle.reshape(Tensor([0],"float64"), list[2,2,], )
paddle.reshape(Tensor([0],"float64"), list[4,], )
paddle.reshape(Tensor([0],"float64"), list[4,1,], )
paddle.reshape(Tensor([0, 10],"int64"), list[9,5000,10,], name="Categorical_sample", )
paddle.reshape(Tensor([45000, 0],"int64"), list[9,5000,10,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 1, 2, 3],"float32"), list[-1,3,], )
paddle.reshape(Tensor([5, 0, 2, 3],"float32"), list[-1,3,], )
paddle.reshape(Tensor([5, 1, 0, 3],"float32"), list[-1,3,], )
paddle.reshape(Tensor([5, 1, 2, 0],"float32"), list[-1,3,], )
paddle.reshape(Tensor([0, 10, 8],"float32"), list[5,10,8,], name="Normal_sample", )
paddle.reshape(Tensor([5, 0, 8],"float32"), list[5,10,8,], name="Normal_sample", )
paddle.reshape(Tensor([5, 10, 0],"float32"), list[5,10,8,], name="Normal_sample", )
paddle.reshape(Tensor([0, 2, 5, 3],"float16"), list[-1,3,], )
paddle.reshape(Tensor([5, 0, 5, 3],"float16"), list[-1,3,], )
paddle.reshape(Tensor([5, 2, 0, 3],"float16"), list[-1,3,], )
paddle.reshape(Tensor([5, 2, 5, 0],"float16"), list[-1,3,], )
paddle.reshape(Tensor([0, 2],"float32"), shape=list[5,-1,], )
paddle.reshape(Tensor([5, 0],"float32"), shape=list[5,-1,], )
paddle.reshape(Tensor([0, 3, 5, 3],"complex64"), list[-1,3,], )
paddle.reshape(Tensor([5, 0, 5, 3],"complex64"), list[-1,3,], )
paddle.reshape(Tensor([5, 3, 0, 3],"complex64"), list[-1,3,], )
paddle.reshape(Tensor([5, 3, 5, 0],"complex64"), list[-1,3,], )
paddle.reshape(Tensor([0, 7],"int32"), shape=tuple(7,5,), )
paddle.reshape(Tensor([5, 0],"int32"), shape=tuple(7,5,), )
paddle.reshape(Tensor([0],"float32"), list[1,5,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,5,1,1,1,], )
paddle.reshape(Tensor([0],"int32"), list[-1,1,], )
paddle.reshape(Tensor([0],"int32"), list[5,], )
paddle.reshape(Tensor([0],"int32"), shape=list[1,5,], )
paddle.reshape(Tensor([0],"int32"), shape=list[5,], )
paddle.reshape(Tensor([0],"int32"), shape=tuple(-1,5,), )
paddle.reshape(Tensor([0],"int32"), shape=tuple(-1,5,1,), )
paddle.reshape(Tensor([0],"int64"), list[10,5000,], name="Categorical_sample", )
paddle.reshape(Tensor([0],"float32"), list[1,512,1,1,], )
paddle.reshape(Tensor([0, 10],"int64"), list[9,6,10,], name="Categorical_sample", )
paddle.reshape(Tensor([54, 0],"int64"), list[9,6,10,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 1, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(Tensor([58, 0, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(Tensor([58, 1, 0],"float32"), shape=list[-1,2,], )
paddle.reshape(Tensor([0, 1],"int32"), shape=tuple(3,2,), )
paddle.reshape(Tensor([6, 0],"int32"), shape=tuple(3,2,), )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[0,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,0,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,-1,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,1,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[1,18,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,18,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,18,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,3,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,6,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,9,1,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[-1,9,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[12,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[12,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[12,1,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,-1,0,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,1,18,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,1,18,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,1,18,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,-1,18,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,3,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,3,3,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,6,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,6,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,6,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[2,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[2,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[2,9,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[3,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[3,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[3,6,2,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[4,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[4,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[4,9,1,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[6,2,3,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[6,2,3,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[6,2,3,], )
paddle.reshape(Tensor([0, 2, 3],"float32"), list[6,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"float32"), list[6,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), list[6,3,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[0,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,0,2,-1,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,0,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,-1,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,-1,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,1,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[1,18,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,18,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,18,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[1,2,2,3,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,3,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,6,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,9,1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[-1,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[-1,9,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[12,1,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[12,1,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[12,1,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,-1,0,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,1,18,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,1,18,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,1,18,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,-1,18,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,-1,18,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,3,0,-1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,3,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,3,3,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,6,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,6,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,6,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[2,9,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[2,9,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[2,9,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[3,6,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[3,6,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[3,6,2,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[4,9,1,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[4,9,1,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[4,9,1,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[6,2,3,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[6,2,3,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[6,2,3,], )
paddle.reshape(Tensor([0, 2, 3],"int64"), list[6,3,2,], )
paddle.reshape(Tensor([6, 0, 3],"int64"), list[6,3,2,], )
paddle.reshape(Tensor([6, 2, 0],"int64"), list[6,3,2,], )
paddle.reshape(Tensor([0, 2, 4],"float16"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 0, 4],"float16"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 2, 0],"float16"), shape=list[6,8,], )
paddle.reshape(Tensor([0, 2, 4],"float32"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 0, 4],"float32"), shape=list[6,8,], )
paddle.reshape(Tensor([6, 2, 0],"float32"), shape=list[6,8,], )
paddle.reshape(Tensor([0, 3, 1, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 0, 1, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 3, 0, 32],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([6, 3, 1, 0],"float32"), shape=list[-1,32,], )
paddle.reshape(Tensor([0, 8],"float32"), list[-1,3,8,], )
paddle.reshape(Tensor([6, 0],"float32"), list[-1,3,8,], )
paddle.reshape(Tensor([0],"float32"), list[1,6,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,6,1,1,1,], )
paddle.reshape(Tensor([0],"float64"), list[2,3,], )
paddle.reshape(Tensor([0],"float64"), list[6,], )
paddle.reshape(Tensor([0, 1],"int64"), list[60,], )
paddle.reshape(Tensor([60, 0],"int64"), list[60,], )
paddle.reshape(Tensor([0],"int64"), list[10,6,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 1],"int64"), list[63,], )
paddle.reshape(Tensor([63, 0],"int64"), list[63,], )
paddle.reshape(Tensor([64, 0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([0, 32],"float32"), list[16,-1,], )
paddle.reshape(Tensor([64, 0],"float32"), list[16,-1,], )
paddle.reshape(Tensor([0, 50, 4, 4],"float16"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 0, 4, 4],"float16"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 50, 0, 4],"float16"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 50, 4, 0],"float16"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 0, 4, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 50, 0, 4],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([64, 50, 4, 0],"float32"), shape=list[-1,800,], )
paddle.reshape(Tensor([0, 64],"float16"), tuple(1,1,64,64,), )
paddle.reshape(Tensor([64, 0],"float16"), tuple(1,1,64,64,), )
paddle.reshape(Tensor([0],"float32"), list[1,8,1,8,], )
paddle.reshape(Tensor([0, 64],"float16"), tuple(1,1,65,64,), )
paddle.reshape(Tensor([65, 0],"float16"), tuple(1,1,65,64,), )
paddle.reshape(Tensor([0],"complex64"), list[7,], name="Normal_sample", )
paddle.reshape(Tensor([0],"float32"), list[7,], name="Normal_sample", )
paddle.reshape(Tensor([0],"float32"), list[7,], name="Uniform_sample", )
paddle.reshape(Tensor([8, 0, 128],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([8, 1, 0],"float32"), shape=list[-1,128,], )
paddle.reshape(Tensor([8, 0],"int64"), tuple(-1,1,), )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([8, 1024, 0, 1],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([8, 1024, 1, 0],"float32"), shape=list[-1,1024,], )
paddle.reshape(Tensor([0, 1024],"float32"), list[8,1024,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,1024,1,1,], )
paddle.reshape(Tensor([8, 0, 1, 1],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([8, 2048, 0, 1],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([8, 2048, 1, 0],"float16"), shape=list[-1,2048,], )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([8, 2048, 0, 1],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([8, 2048, 1, 0],"float32"), shape=list[-1,2048,], )
paddle.reshape(Tensor([0, 2048],"float32"), list[8,2048,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,2048,1,1,], )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([8, 256, 0, 1],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([8, 256, 1, 0],"float32"), shape=list[-1,256,], )
paddle.reshape(Tensor([0, 256],"float32"), list[8,256,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,256,1,1,], )
paddle.reshape(Tensor([0, 3, 4, 4, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 0, 4, 4, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 0, 4, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 0, 5, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 0, 3],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 0],"float32"), list[24,8,10,3,], )
paddle.reshape(Tensor([0, 3, 4, 4, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 0, 4, 4, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 0, 4, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 0, 5, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 0, 3],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([8, 3, 4, 4, 5, 0],"int64"), list[24,8,10,3,], )
paddle.reshape(Tensor([0, 3],"int64"), list[2,4,3,], name="Categorical_sample", )
paddle.reshape(Tensor([8, 0],"int64"), list[2,4,3,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 4, 100],"float64"), list[-1,400,], )
paddle.reshape(Tensor([8, 0, 100],"float64"), list[-1,400,], )
paddle.reshape(Tensor([8, 4, 0],"float64"), list[-1,400,], )
paddle.reshape(Tensor([0, 4, 1000],"float32"), list[-1,4000,], )
paddle.reshape(Tensor([8, 0, 1000],"float32"), list[-1,4000,], )
paddle.reshape(Tensor([8, 4, 0],"float32"), list[-1,4000,], )
paddle.reshape(Tensor([0, 4, 32],"float64"), shape=list[-1,32,], )
paddle.reshape(Tensor([8, 0, 32],"float64"), shape=list[-1,32,], )
paddle.reshape(Tensor([8, 4, 0],"float64"), shape=list[-1,32,], )
paddle.reshape(Tensor([0, 4, 8],"float32"), shape=tuple(-1,8,), )
paddle.reshape(Tensor([8, 0, 8],"float32"), shape=tuple(-1,8,), )
paddle.reshape(Tensor([8, 4, 0],"float32"), shape=tuple(-1,8,), )
paddle.reshape(Tensor([0, 4],"float32"), list[8,4,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,4,1,], )
paddle.reshape(Tensor([8, 0, 1, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([8, 512, 0, 1],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([8, 512, 1, 0],"float32"), shape=list[-1,512,], )
paddle.reshape(Tensor([0, 512],"float32"), list[8,512,1,1,], )
paddle.reshape(Tensor([8, 0],"float32"), list[8,512,1,1,], )
paddle.reshape(Tensor([0, 6],"int64"), list[2,4,3,2,], name="Categorical_sample", )
paddle.reshape(Tensor([8, 0],"int64"), list[2,4,3,2,], name="Categorical_sample", )
paddle.reshape(Tensor([0],"float32"), list[1,8,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[1,8,1,1,1,], )
paddle.reshape(Tensor([0],"float32"), list[8,1,], )
paddle.reshape(Tensor([0],"int64"), list[2,4,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 10],"int64"), list[9,10,], name="Categorical_sample", )
paddle.reshape(Tensor([9, 0],"int64"), list[9,10,], name="Categorical_sample", )
paddle.reshape(Tensor([0, 8],"float32"), list[18,4,], )
paddle.reshape(Tensor([9, 0],"float32"), list[18,4,], )
paddle.reshape(Tensor([0, 8],"int64"), list[18,4,], )
paddle.reshape(Tensor([9, 0],"int64"), list[18,4,], )
paddle.reshape(Tensor([0],"int64"), shape=list[1,1,3,3,], )
paddle.reshape(Tensor([0],"int64"), shape=list[1,3,3,], )
paddle.reshape(x=Tensor([0, 1],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[100,], )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[100,], )
paddle.reshape(x=Tensor([0, 8],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([10, 0],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[10,], )
paddle.reshape(x=Tensor([0, 3],"float32"), shape=list[6,], )
paddle.reshape(x=Tensor([2, 0],"float32"), shape=list[6,], )
paddle.reshape(x=Tensor([0, 8, 1],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([2, 0, 1],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([2, 8, 0],"float32"), shape=list[2,8,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[200,], )
paddle.reshape(x=Tensor([20, 0],"float32"), shape=list[200,], )
paddle.reshape(x=Tensor([0, 4, 512],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([32, 0, 512],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([32, 4, 0],"float32"), shape=list[0,0,8,64,], )
paddle.reshape(x=Tensor([0, 4, 8, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([32, 0, 8, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([32, 4, 0, 64],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([32, 4, 8, 0],"float32"), shape=list[0,0,512,], )
paddle.reshape(x=Tensor([0, 9],"float32"), shape=list[36,], )
paddle.reshape(x=Tensor([4, 0],"float32"), shape=list[36,], )
paddle.reshape(x=Tensor([0, 1, 10],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 0, 10],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"float32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 1, 10],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 0, 10],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"int32"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 1, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 0, 10],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([5, 1, 0],"uint8"), shape=list[5,10,], )
paddle.reshape(x=Tensor([0, 140, 2, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([58, 0, 2, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([58, 140, 0, 1],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([58, 140, 2, 0],"float32"), shape=list[0,0,2,], )
paddle.reshape(x=Tensor([0, 140, 2],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([58, 0, 2],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([58, 140, 0],"float32"), shape=list[0,0,2,1,], )
paddle.reshape(x=Tensor([0, 140, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([58, 0, 2],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([58, 140, 0],"float32"), shape=list[-1,2,], )
paddle.reshape(x=Tensor([0, 10],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([8, 0],"float32"), shape=list[80,], )
paddle.reshape(x=Tensor([0],"float32"), shape=list[8,], )
paddle.roll(Tensor([0, 3],"float32"), 1, )
paddle.roll(Tensor([2, 0],"float32"), 1, )
paddle.roll(Tensor([0, 3],"bool"), shifts=1, )
paddle.roll(Tensor([3, 0],"bool"), shifts=1, )
paddle.roll(Tensor([0, 3],"bool"), shifts=1, axis=0, )
paddle.roll(Tensor([3, 0],"bool"), shifts=1, axis=0, )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, )
paddle.roll(Tensor([0, 3],"float64"), shifts=1, axis=0, )
paddle.roll(Tensor([3, 0],"float64"), shifts=1, axis=0, )
paddle.roll(Tensor([0, 3],"int64"), shifts=Tensor([2],"int64"), axis=list[0,1,], )
paddle.roll(Tensor([3, 0],"int64"), shifts=Tensor([2],"int64"), axis=list[0,1,], )
paddle.roll(Tensor([3, 3],"int64"), shifts=Tensor([0],"int64"), axis=list[0,1,], )
paddle.rot90(Tensor([0, 3],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(Tensor([2, 0],"float32"), k=1, axes=list[0,1,], )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], )
paddle.row_stack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.row_stack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.row_stack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.row_stack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.rsqrt(Tensor([0, 1, 4096],"float32"), )
paddle.rsqrt(Tensor([1, 0, 4096],"float32"), )
paddle.rsqrt(Tensor([1, 1, 0],"float32"), )
paddle.rsqrt(Tensor([0, 300, 1],"float32"), )
paddle.rsqrt(Tensor([1, 0, 1],"float32"), )
paddle.rsqrt(Tensor([1, 300, 0],"float32"), )
paddle.rsqrt(Tensor([0, 2, 3],"float32"), )
paddle.rsqrt(Tensor([10000, 0, 3],"float32"), )
paddle.rsqrt(Tensor([10000, 2, 0],"float32"), )
paddle.rsqrt(Tensor([0, 2, 3],"float64"), )
paddle.rsqrt(Tensor([10000, 0, 3],"float64"), )
paddle.rsqrt(Tensor([10000, 2, 0],"float64"), )
paddle.rsqrt(Tensor([0],"float32"), )
paddle.rsqrt(Tensor([0, 1],"float32"), )
paddle.rsqrt(Tensor([16, 0],"float32"), )
paddle.rsqrt(Tensor([0, 1],"float64"), )
paddle.rsqrt(Tensor([16, 0],"float64"), )
paddle.rsqrt(Tensor([0, 1],"float16"), )
paddle.rsqrt(Tensor([2, 0],"float16"), )
paddle.rsqrt(Tensor([2, 0],"float32"), )
paddle.rsqrt(Tensor([0, 3],"float32"), )
paddle.rsqrt(Tensor([0, 3],"float64"), )
paddle.rsqrt(Tensor([2, 0],"float64"), )
paddle.rsqrt(Tensor([32, 0],"float16"), )
paddle.rsqrt(Tensor([32, 0],"float32"), )
paddle.select_scatter(Tensor([0, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 0, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 0, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 0, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 0],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([0, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 0, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 0, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 0],"int32"), 2, 1, )
paddle.select_scatter(Tensor([0, 3, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 0, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 0, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 0],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([0, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 0, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 0],"float64"), 2, 1, )
paddle.select_scatter(Tensor([0, 3, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 0, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 0],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([0, 4],"float32"), 1, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([2, 0],"float32"), 1, 1, )
paddle.sgn(Tensor([0, 20, 2],"float16"), )
paddle.sgn(Tensor([12, 0, 2],"float16"), )
paddle.sgn(Tensor([12, 20, 0],"float16"), )
paddle.sgn(Tensor([0, 20, 2],"float32"), )
paddle.sgn(Tensor([12, 0, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 0],"float32"), )
paddle.sgn(Tensor([0, 20, 2],"float64"), )
paddle.sgn(Tensor([12, 0, 2],"float64"), )
paddle.sgn(Tensor([12, 20, 0],"float64"), )
paddle.sgn(Tensor([0, 4],"complex128"), )
paddle.sgn(Tensor([2, 0],"complex128"), )
paddle.sgn(Tensor([0, 4],"complex64"), )
paddle.sgn(Tensor([2, 0],"complex64"), )
paddle.sign(Tensor([0, 4],"float32"), )
paddle.sign(Tensor([1, 0],"float32"), )
paddle.sign(Tensor([0, 17, 10],"int16"), )
paddle.sign(Tensor([11, 0, 10],"int16"), )
paddle.sign(Tensor([11, 17, 0],"int16"), )
paddle.sign(Tensor([0, 17, 10],"int32"), )
paddle.sign(Tensor([11, 0, 10],"int32"), )
paddle.sign(Tensor([11, 17, 0],"int32"), )
paddle.sign(Tensor([0, 17],"float32"), )
paddle.sign(Tensor([11, 0],"float32"), )
paddle.sign(Tensor([0, 20, 2],"float16"), )
paddle.sign(Tensor([12, 0, 2],"float16"), )
paddle.sign(Tensor([12, 20, 0],"float16"), )
paddle.sign(Tensor([0, 20, 2],"float32"), )
paddle.sign(Tensor([12, 0, 2],"float32"), )
paddle.sign(Tensor([12, 20, 0],"float32"), )
paddle.sign(Tensor([0, 20, 2],"float64"), )
paddle.sign(Tensor([12, 0, 2],"float64"), )
paddle.sign(Tensor([12, 20, 0],"float64"), )
paddle.sign(Tensor([0, 20, 2],"int16"), )
paddle.sign(Tensor([12, 0, 2],"int16"), )
paddle.sign(Tensor([12, 20, 0],"int16"), )
paddle.sign(Tensor([0, 20, 2],"int32"), )
paddle.sign(Tensor([12, 0, 2],"int32"), )
paddle.sign(Tensor([12, 20, 0],"int32"), )
paddle.sign(Tensor([0, 20, 2],"int64"), )
paddle.sign(Tensor([12, 0, 2],"int64"), )
paddle.sign(Tensor([12, 20, 0],"int64"), )
paddle.sign(Tensor([0, 20, 2],"int8"), )
paddle.sign(Tensor([12, 0, 2],"int8"), )
paddle.sign(Tensor([12, 20, 0],"int8"), )
paddle.sign(Tensor([0, 20, 2],"uint8"), )
paddle.sign(Tensor([12, 0, 2],"uint8"), )
paddle.sign(Tensor([12, 20, 0],"uint8"), )
paddle.sign(Tensor([0, 84],"float32"), )
paddle.sign(Tensor([120, 0],"float32"), )
paddle.sign(Tensor([0],"int64"), )
paddle.sign(Tensor([0],"uint8"), )
paddle.sign(Tensor([0, 16],"float32"), )
paddle.sign(Tensor([150, 0],"float32"), )
paddle.sign(Tensor([0, 1, 28, 28],"float32"), )
paddle.sign(Tensor([16, 0, 28, 28],"float32"), )
paddle.sign(Tensor([16, 1, 0, 28],"float32"), )
paddle.sign(Tensor([16, 1, 28, 0],"float32"), )
paddle.sign(Tensor([0, 120],"float32"), )
paddle.sign(Tensor([16, 0],"float32"), )
paddle.sign(Tensor([0, 400],"float32"), )
paddle.sign(Tensor([0, 6, 14, 14],"float32"), )
paddle.sign(Tensor([16, 0, 14, 14],"float32"), )
paddle.sign(Tensor([16, 6, 0, 14],"float32"), )
paddle.sign(Tensor([16, 6, 14, 0],"float32"), )
paddle.sign(Tensor([0, 6, 5, 5],"float32"), )
paddle.sign(Tensor([16, 0, 5, 5],"float32"), )
paddle.sign(Tensor([16, 6, 0, 5],"float32"), )
paddle.sign(Tensor([16, 6, 5, 0],"float32"), )
paddle.sign(Tensor([0, 3, 4, 5],"float64"), )
paddle.sign(Tensor([2, 0, 4, 5],"float64"), )
paddle.sign(Tensor([2, 3, 0, 5],"float64"), )
paddle.sign(Tensor([2, 3, 4, 0],"float64"), )
paddle.sign(Tensor([0, 3, 4, 5],"int8"), )
paddle.sign(Tensor([2, 0, 4, 5],"int8"), )
paddle.sign(Tensor([2, 3, 0, 5],"int8"), )
paddle.sign(Tensor([2, 3, 4, 0],"int8"), )
paddle.sign(Tensor([32, 0, 28, 28],"float32"), )
paddle.sign(Tensor([32, 1, 0, 28],"float32"), )
paddle.sign(Tensor([32, 1, 28, 0],"float32"), )
paddle.sign(Tensor([32, 0],"float32"), )
paddle.sign(Tensor([0, 32, 128],"float32"), )
paddle.sign(Tensor([32, 0, 128],"float32"), )
paddle.sign(Tensor([32, 32, 0],"float32"), )
paddle.sign(Tensor([32, 0, 14, 14],"float32"), )
paddle.sign(Tensor([32, 6, 0, 14],"float32"), )
paddle.sign(Tensor([32, 6, 14, 0],"float32"), )
paddle.sign(Tensor([400, 0],"float32"), )
paddle.sign(Tensor([0],"complex64"), )
paddle.sign(Tensor([0],"float64"), )
paddle.sign(Tensor([0, 1, 3, 3],"float32"), )
paddle.sign(Tensor([6, 0, 3, 3],"float32"), )
paddle.sign(Tensor([6, 1, 0, 3],"float32"), )
paddle.sign(Tensor([6, 1, 3, 0],"float32"), )
paddle.sign(Tensor([64, 0, 28, 28],"float32"), )
paddle.sign(Tensor([64, 1, 0, 28],"float32"), )
paddle.sign(Tensor([64, 1, 28, 0],"float32"), )
paddle.sign(Tensor([64, 0],"float32"), )
paddle.sign(Tensor([64, 0, 14, 14],"float32"), )
paddle.sign(Tensor([64, 6, 0, 14],"float32"), )
paddle.sign(Tensor([64, 6, 14, 0],"float32"), )
paddle.sign(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.sign(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.sign(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.sign(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.sign(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.sign(Tensor([0, 10],"float32"), )
paddle.sign(Tensor([84, 0],"float32"), )
paddle.sign(Tensor([0, 6],"float32"), )
paddle.sign(Tensor([9, 0],"float32"), )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, 99, 299, Tensor([299],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, 299, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, 99, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, 99, None, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, False, False, True, 1888, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, False, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, None, True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 257, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 0, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 0],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([1, 257, 471],"complex128"), 512, None, None, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([0, 471],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([257, 0],"complex128"), 512, None, None, Tensor([512],"float64"), True, False, True, None, False, )
paddle.signal.istft(Tensor([257, 471],"complex128"), 512, None, None, Tensor([0],"float64"), True, False, True, None, False, )
paddle.signbit(Tensor([0, 17, 10],"int16"), )
paddle.signbit(Tensor([11, 0, 10],"int16"), )
paddle.signbit(Tensor([11, 17, 0],"int16"), )
paddle.signbit(Tensor([0, 17, 10],"int32"), )
paddle.signbit(Tensor([11, 0, 10],"int32"), )
paddle.signbit(Tensor([11, 17, 0],"int32"), )
paddle.signbit(Tensor([0, 17],"float32"), )
paddle.signbit(Tensor([11, 0],"float32"), )
paddle.signbit(Tensor([0, 20, 2],"float32"), )
paddle.signbit(Tensor([12, 0, 2],"float32"), )
paddle.signbit(Tensor([12, 20, 0],"float32"), )
paddle.signbit(Tensor([0, 20, 2],"float64"), )
paddle.signbit(Tensor([12, 0, 2],"float64"), )
paddle.signbit(Tensor([12, 20, 0],"float64"), )
paddle.signbit(Tensor([0, 20, 2],"int16"), )
paddle.signbit(Tensor([12, 0, 2],"int16"), )
paddle.signbit(Tensor([12, 20, 0],"int16"), )
paddle.signbit(Tensor([0, 20, 2],"int32"), )
paddle.signbit(Tensor([12, 0, 2],"int32"), )
paddle.signbit(Tensor([12, 20, 0],"int32"), )
paddle.signbit(Tensor([0, 20, 2],"int64"), )
paddle.signbit(Tensor([12, 0, 2],"int64"), )
paddle.signbit(Tensor([12, 20, 0],"int64"), )
paddle.signbit(Tensor([0, 20, 2],"int8"), )
paddle.signbit(Tensor([12, 0, 2],"int8"), )
paddle.signbit(Tensor([12, 20, 0],"int8"), )
paddle.signbit(Tensor([0, 20, 2],"uint8"), )
paddle.signbit(Tensor([12, 0, 2],"uint8"), )
paddle.signbit(Tensor([12, 20, 0],"uint8"), )
paddle.signbit(Tensor([0],"int64"), )
paddle.signbit(Tensor([0],"uint8"), )
paddle.signbit(Tensor([0, 3, 4, 5],"float64"), )
paddle.signbit(Tensor([2, 0, 4, 5],"float64"), )
paddle.signbit(Tensor([2, 3, 0, 5],"float64"), )
paddle.signbit(Tensor([2, 3, 4, 0],"float64"), )
paddle.signbit(Tensor([0, 3, 4, 5],"int8"), )
paddle.signbit(Tensor([2, 0, 4, 5],"int8"), )
paddle.signbit(Tensor([2, 3, 0, 5],"int8"), )
paddle.signbit(Tensor([2, 3, 4, 0],"int8"), )
paddle.signbit(Tensor([0, 17, 5, 6, 7],"float16"), )
paddle.signbit(Tensor([8, 0, 5, 6, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 0, 6, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 5, 0, 7],"float16"), )
paddle.signbit(Tensor([8, 17, 5, 6, 0],"float16"), )
paddle.sin(Tensor([0, 128, 1, 32],"float32"), )
paddle.sin(Tensor([1, 0, 1, 32],"float32"), )
paddle.sin(Tensor([1, 128, 0, 32],"float32"), )
paddle.sin(Tensor([1, 128, 1, 0],"float32"), )
paddle.sin(Tensor([0, 10],"float32"), )
paddle.sin(Tensor([10, 0],"float32"), )
paddle.sin(Tensor([0, 20, 1],"float32"), )
paddle.sin(Tensor([10, 0, 1],"float32"), )
paddle.sin(Tensor([10, 20, 0],"float32"), )
paddle.sin(Tensor([0, 3, 4],"float32"), )
paddle.sin(Tensor([2, 0, 4],"float32"), )
paddle.sin(Tensor([2, 3, 0],"float32"), )
paddle.sin(Tensor([0, 3],"float32"), )
paddle.sin(Tensor([2, 0],"float32"), )
paddle.sin(Tensor([0],"float32"), )
paddle.sin(Tensor([0],"float64"), )
paddle.sin(Tensor([0, 32],"float16"), )
paddle.sin(Tensor([64, 0],"float16"), )
paddle.sin(Tensor([65, 0],"float16"), )
paddle.sin(Tensor([0, 16, 32],"complex128"), )
paddle.sin(Tensor([8, 0, 32],"complex128"), )
paddle.sin(Tensor([8, 16, 0],"complex128"), )
paddle.sin(Tensor([0, 16, 32],"complex64"), )
paddle.sin(Tensor([8, 0, 32],"complex64"), )
paddle.sin(Tensor([8, 16, 0],"complex64"), )
paddle.sin(Tensor([0, 16, 32],"float16"), )
paddle.sin(Tensor([8, 0, 32],"float16"), )
paddle.sin(Tensor([8, 16, 0],"float16"), )
paddle.sin(Tensor([0, 16, 32],"float32"), )
paddle.sin(Tensor([8, 0, 32],"float32"), )
paddle.sin(Tensor([8, 16, 0],"float32"), )
paddle.sin(Tensor([0, 16, 32],"float64"), )
paddle.sin(Tensor([8, 0, 32],"float64"), )
paddle.sin(Tensor([8, 16, 0],"float64"), )
paddle.sinc(Tensor([0, 64],"float32"), )
paddle.sinc(Tensor([16, 0],"float32"), )
paddle.sinc(Tensor([0, 64],"float64"), )
paddle.sinc(Tensor([16, 0],"float64"), )
paddle.sinc(Tensor([0],"float32"), )
paddle.sinc(Tensor([0],"float64"), )
paddle.sinh(Tensor([0, 20, 1],"float32"), )
paddle.sinh(Tensor([10, 0, 1],"float32"), )
paddle.sinh(Tensor([10, 20, 0],"float32"), )
paddle.sinh(Tensor([0, 3],"float32"), )
paddle.sinh(Tensor([2, 0],"float32"), )
paddle.sinh(Tensor([0, 16, 32],"complex128"), )
paddle.sinh(Tensor([8, 0, 32],"complex128"), )
paddle.sinh(Tensor([8, 16, 0],"complex128"), )
paddle.sinh(Tensor([0, 16, 32],"complex64"), )
paddle.sinh(Tensor([8, 0, 32],"complex64"), )
paddle.sinh(Tensor([8, 16, 0],"complex64"), )
paddle.sinh(Tensor([0, 16, 32],"float16"), )
paddle.sinh(Tensor([8, 0, 32],"float16"), )
paddle.sinh(Tensor([8, 16, 0],"float16"), )
paddle.sinh(Tensor([0, 16, 32],"float32"), )
paddle.sinh(Tensor([8, 0, 32],"float32"), )
paddle.sinh(Tensor([8, 16, 0],"float32"), )
paddle.sinh(Tensor([0, 16, 32],"float64"), )
paddle.sinh(Tensor([8, 0, 32],"float64"), )
paddle.sinh(Tensor([8, 16, 0],"float64"), )
paddle.sqrt(Tensor([0, 10],"float64"), )
paddle.sqrt(Tensor([1, 0],"float64"), )
paddle.sqrt(Tensor([0, 2, 1],"float32"), )
paddle.sqrt(Tensor([1, 0, 1],"float32"), )
paddle.sqrt(Tensor([1, 2, 0],"float32"), )
paddle.sqrt(Tensor([0, 2, 2],"float32"), )
paddle.sqrt(Tensor([1, 0, 2],"float32"), )
paddle.sqrt(Tensor([0, 3, 10],"float64"), )
paddle.sqrt(Tensor([1, 0, 10],"float64"), )
paddle.sqrt(Tensor([1, 3, 0],"float64"), )
paddle.sqrt(Tensor([0, 4],"float32"), )
paddle.sqrt(Tensor([1, 0],"float32"), )
paddle.sqrt(Tensor([0, 4],"float64"), )
paddle.sqrt(Tensor([0],"float32"), )
paddle.sqrt(Tensor([0],"float64"), )
paddle.sqrt(Tensor([0, 1],"float32"), )
paddle.sqrt(Tensor([2, 0],"float32"), )
paddle.sqrt(Tensor([2, 0, 1],"float32"), )
paddle.sqrt(Tensor([2, 2, 0],"float32"), )
paddle.sqrt(Tensor([2, 0, 2],"float32"), )
paddle.sqrt(Tensor([0, 3],"float32"), )
paddle.sqrt(Tensor([0, 32, 128],"float32"), )
paddle.sqrt(Tensor([32, 0, 128],"float32"), )
paddle.sqrt(Tensor([32, 32, 0],"float32"), )
paddle.sqrt(Tensor([0, 3],"float64"), )
paddle.sqrt(Tensor([5, 0],"float64"), )
paddle.sqrt(Tensor([0, 16, 32],"float32"), )
paddle.sqrt(Tensor([8, 0, 32],"float32"), )
paddle.sqrt(Tensor([8, 16, 0],"float32"), )
paddle.square(Tensor([0, 1],"float32"), )
paddle.square(Tensor([1, 0],"float32"), )
paddle.square(Tensor([0, 196608],"float32"), )
paddle.square(Tensor([0, 3072],"float32"), )
paddle.square(Tensor([0],"float32"), )
paddle.square(Tensor([0],"float64"), )
paddle.square(Tensor([0, 10],"float32"), )
paddle.square(Tensor([10, 0],"float32"), )
paddle.square(Tensor([0, 10],"float32"), name=None, )
paddle.square(Tensor([10, 0],"float32"), name=None, )
paddle.square(Tensor([0, 2, 3],"float32"), )
paddle.square(Tensor([10, 0, 3],"float32"), )
paddle.square(Tensor([10, 2, 0],"float32"), )
paddle.square(Tensor([0, 2],"float32"), )
paddle.square(Tensor([0, 2],"float64"), )
paddle.square(Tensor([10, 0],"float64"), )
paddle.square(Tensor([0, 3],"float32"), )
paddle.square(Tensor([0],"float16"), )
paddle.square(Tensor([0, 10],"float16"), )
paddle.square(Tensor([1000, 0],"float16"), )
paddle.square(Tensor([1000, 0],"float32"), )
paddle.square(Tensor([0, 1000],"float16"), )
paddle.square(Tensor([0, 1000],"float32"), )
paddle.square(Tensor([1024, 0],"float16"), )
paddle.square(Tensor([1024, 0],"float32"), )
paddle.square(Tensor([0, 1024],"float16"), )
paddle.square(Tensor([0, 1024],"float32"), )
paddle.square(Tensor([0, 2],"float16"), )
paddle.square(Tensor([2, 0],"float32"), )
paddle.square(Tensor([0, 10, 10],"float32"), )
paddle.square(Tensor([2, 0, 10],"float32"), )
paddle.square(Tensor([2, 10, 0],"float32"), )
paddle.square(Tensor([0, 10, 10],"float32"), name=None, )
paddle.square(Tensor([2, 0, 10],"float32"), name=None, )
paddle.square(Tensor([2, 10, 0],"float32"), name=None, )
paddle.square(Tensor([0, 3],"float64"), )
paddle.square(Tensor([2, 0],"float64"), )
paddle.square(Tensor([0, 42],"float32"), )
paddle.square(Tensor([0, 2, 3, 3],"float32"), )
paddle.square(Tensor([3, 0, 3, 3],"float32"), )
paddle.square(Tensor([3, 2, 0, 3],"float32"), )
paddle.square(Tensor([3, 2, 3, 0],"float32"), )
paddle.square(Tensor([0, 3, 10, 10],"float32"), )
paddle.square(Tensor([3, 0, 10, 10],"float32"), )
paddle.square(Tensor([3, 3, 0, 10],"float32"), )
paddle.square(Tensor([3, 3, 10, 0],"float32"), )
paddle.square(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.square(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.square(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.square(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.square(Tensor([3, 0],"float64"), )
paddle.square(Tensor([0, 4],"float32"), )
paddle.square(Tensor([3, 0],"float32"), )
paddle.square(Tensor([0, 8],"float32"), )
paddle.square(Tensor([0, 4096],"float32"), )
paddle.square(Tensor([300, 0],"float32"), )
paddle.square(Tensor([0, 20],"float32"), )
paddle.square(Tensor([32, 0],"float32"), )
paddle.square(Tensor([0, 3, 2],"float64"), )
paddle.square(Tensor([4, 0, 2],"float64"), )
paddle.square(Tensor([4, 3, 0],"float64"), )
paddle.square(Tensor([5, 0],"float64"), )
paddle.square(Tensor([0, 16, 32],"complex128"), )
paddle.square(Tensor([8, 0, 32],"complex128"), )
paddle.square(Tensor([8, 16, 0],"complex128"), )
paddle.square(Tensor([0, 16, 32],"complex64"), )
paddle.square(Tensor([8, 0, 32],"complex64"), )
paddle.square(Tensor([8, 16, 0],"complex64"), )
paddle.square(Tensor([0, 16, 32],"float16"), )
paddle.square(Tensor([8, 0, 32],"float16"), )
paddle.square(Tensor([8, 16, 0],"float16"), )
paddle.square(Tensor([0, 16, 32],"float32"), )
paddle.square(Tensor([8, 0, 32],"float32"), )
paddle.square(Tensor([8, 16, 0],"float32"), )
paddle.square(Tensor([0, 16, 32],"float64"), )
paddle.square(Tensor([8, 0, 32],"float64"), )
paddle.square(Tensor([8, 16, 0],"float64"), )
paddle.squeeze(Tensor([0, 1, 32],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([1, 0, 32],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([1, 1, 0],"float64"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([1, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 3, 4],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 0, 4],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 3, 0],"float64"), axis=0, )
paddle.squeeze(Tensor([0, 3],"float64"), axis=0, )
paddle.squeeze(Tensor([1, 0],"float64"), axis=0, )
paddle.squeeze(Tensor([0, 6, 1, 1],"float32"), list[], )
paddle.squeeze(Tensor([1, 0, 1, 1],"float32"), list[], )
paddle.squeeze(Tensor([1, 6, 0, 1],"float32"), list[], )
paddle.squeeze(Tensor([1, 6, 1, 0],"float32"), list[], )
paddle.squeeze(Tensor([0, 6, 1, 1],"float32"), list[1,2,], )
paddle.squeeze(Tensor([1, 0, 1, 1],"float32"), list[1,2,], )
paddle.squeeze(Tensor([1, 6, 0, 1],"float32"), list[1,2,], )
paddle.squeeze(Tensor([1, 6, 1, 0],"float32"), list[1,2,], )
paddle.squeeze(Tensor([0, 8, 16, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 0, 16, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 8, 0, 128, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 8, 16, 0, 64],"float32"), axis=0, )
paddle.squeeze(Tensor([1, 8, 16, 128, 0],"float32"), axis=0, )
paddle.squeeze(Tensor([0],"float32"), axis=0, )
paddle.squeeze(Tensor([0],"float32"), axis=-1, )
paddle.squeeze(Tensor([0],"float64"), axis=0, )
paddle.squeeze(Tensor([0, 10, 10],"float64"), )
paddle.squeeze(Tensor([10, 0, 10],"float64"), )
paddle.squeeze(Tensor([10, 10, 0],"float64"), )
paddle.squeeze(Tensor([0, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([10, 0, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([10, 10, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 20, 1],"float32"), )
paddle.squeeze(Tensor([10, 0, 1],"float32"), )
paddle.squeeze(Tensor([10, 20, 0],"float32"), )
paddle.squeeze(Tensor([0, 1],"float64"), 1, )
paddle.squeeze(Tensor([100, 0],"float64"), 1, )
paddle.squeeze(Tensor([0, 1],"float64"), -1, )
paddle.squeeze(Tensor([100, 0],"float64"), -1, )
paddle.squeeze(Tensor([0, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([100, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 1, 10000],"float32"), )
paddle.squeeze(Tensor([128, 0, 10000],"float32"), )
paddle.squeeze(Tensor([128, 1, 0],"float32"), )
paddle.squeeze(Tensor([0, 1, 2, 2],"float64"), 1, )
paddle.squeeze(Tensor([2, 0, 2, 2],"float64"), 1, )
paddle.squeeze(Tensor([2, 1, 0, 2],"float64"), 1, )
paddle.squeeze(Tensor([2, 1, 2, 0],"float64"), 1, )
paddle.squeeze(Tensor([0, 1],"float32"), axis=1, )
paddle.squeeze(Tensor([2, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([2, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 1],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([2, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([2, 0],"float64"), 1, )
paddle.squeeze(Tensor([0, 1000, 1, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([2, 0, 1, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([2, 1000, 0, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([2, 1000, 1, 0],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([0, 1024, 1, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([2, 1024, 0, 1],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([2, 1024, 1, 0],"float32"), axis=list[2,3,], )
paddle.squeeze(Tensor([0, 2, 2, 1],"float64"), -1, )
paddle.squeeze(Tensor([2, 0, 2, 1],"float64"), -1, )
paddle.squeeze(Tensor([2, 2, 0, 1],"float64"), -1, )
paddle.squeeze(Tensor([2, 2, 2, 0],"float64"), -1, )
paddle.squeeze(Tensor([0, 2, 2, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 2, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 2, 0, 1],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 2, 2, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 2],"float32"), )
paddle.squeeze(Tensor([2, 0],"float32"), )
paddle.squeeze(Tensor([0, 3, 1],"float32"), )
paddle.squeeze(Tensor([2, 0, 1],"float32"), )
paddle.squeeze(Tensor([2, 3, 0],"float32"), )
paddle.squeeze(Tensor([0, 3, 10, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 10, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 0, 10, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 10, 0, 10],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 10, 10, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 3, 2, 5],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0, 2, 5],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 0, 5],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 3, 2, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0, 3],"float32"), )
paddle.squeeze(Tensor([0, 3],"float32"), axis=-1, )
paddle.squeeze(Tensor([0, 5],"float64"), )
paddle.squeeze(Tensor([2, 0],"float64"), )
paddle.squeeze(Tensor([0, 5],"float64"), axis=-1, )
paddle.squeeze(Tensor([2, 0],"float64"), axis=-1, )
paddle.squeeze(Tensor([0],"float32"), )
paddle.squeeze(Tensor([0, 1, 3, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 3, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 1600, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 0, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 1600, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 3, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 3, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 3, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 0, 1600],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 3, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 3, 40, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 3, 40, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 40, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 0, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 3, 40, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 40, 40, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 40, 40, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 40, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 40, 0, 3],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 40, 40, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 40, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0, 40, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 0, 40],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 1, 40, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([3, 0],"float32"), axis=list[1,], )
paddle.squeeze(Tensor([0, 1],"float32"), list[-1,], )
paddle.squeeze(Tensor([3, 0],"float32"), list[-1,], )
paddle.squeeze(Tensor([0, 2, 1],"float32"), axis=2, )
paddle.squeeze(Tensor([3, 0, 1],"float32"), axis=2, )
paddle.squeeze(Tensor([3, 2, 0],"float32"), axis=2, )
paddle.squeeze(Tensor([0, 2, 2, 1],"int64"), axis=-1, )
paddle.squeeze(Tensor([3, 0, 2, 1],"int64"), axis=-1, )
paddle.squeeze(Tensor([3, 2, 0, 1],"int64"), axis=-1, )
paddle.squeeze(Tensor([3, 2, 2, 0],"int64"), axis=-1, )
paddle.squeeze(Tensor([0, 1, 6],"float64"), axis=1, )
paddle.squeeze(Tensor([4, 0, 6],"float64"), axis=1, )
paddle.squeeze(Tensor([4, 1, 0],"float64"), axis=1, )
paddle.squeeze(Tensor([4, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([4, 0],"float32"), list[-1,], )
paddle.squeeze(Tensor([0, 1],"float64"), axis=1, )
paddle.squeeze(Tensor([4, 0],"float64"), axis=1, )
paddle.squeeze(Tensor([0, 1],"int64"), axis=-1, )
paddle.squeeze(Tensor([4, 0],"int64"), axis=-1, )
paddle.squeeze(Tensor([0, 512, 512, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 0, 512, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 512, 0, 1],"float64"), -1, )
paddle.squeeze(Tensor([4, 512, 512, 0],"float64"), -1, )
paddle.squeeze(Tensor([0, 7, 1],"float64"), axis=2, )
paddle.squeeze(Tensor([4, 0, 1],"float64"), axis=2, )
paddle.squeeze(Tensor([4, 7, 0],"float64"), axis=2, )
paddle.squeeze(Tensor([0, 1, 10],"float32"), axis=1, )
paddle.squeeze(Tensor([5, 0, 10],"float32"), axis=1, )
paddle.squeeze(Tensor([5, 1, 0],"float32"), axis=1, )
paddle.squeeze(Tensor([0, 1, 4],"float64"), axis=1, )
paddle.squeeze(Tensor([5, 0, 4],"float64"), axis=1, )
paddle.squeeze(Tensor([5, 1, 0],"float64"), axis=1, )
paddle.squeeze(Tensor([5, 0],"float64"), axis=1, )
paddle.squeeze(Tensor([0, 10, 8, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 0, 8, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 10, 0, 1, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 10, 8, 0, 2],"float32"), axis=-1, )
paddle.squeeze(Tensor([5, 10, 8, 1, 0],"float32"), axis=-1, )
paddle.squeeze(Tensor([7, 0],"float64"), axis=1, )
paddle.squeeze(Tensor([0, 1, 8],"float32"), list[1,], )
paddle.squeeze(Tensor([8, 0, 8],"float32"), list[1,], )
paddle.squeeze(Tensor([8, 1, 0],"float32"), list[1,], )
paddle.squeeze(Tensor([0, 11, 1],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 0, 1],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 11, 0],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([0, 12, 1],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([8, 12, 0],"float32"), axis=list[2,], )
paddle.squeeze(Tensor([0, 16, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 0, 1],"float32"), axis=-1, )
paddle.squeeze(Tensor([8, 16, 0],"float32"), axis=-1, )
paddle.stack(list[Tensor([0, 1, 1, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 0],"float16"),Tensor([1, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([0, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 32],"float16"),Tensor([1, 1, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 1, 32],"float16"),Tensor([0, 1, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1, 32],"float16"),Tensor([1, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 1, 0],"float16"),Tensor([1, 1, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 64, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 64, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 0, 32],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 0],"float16"),Tensor([1, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([0, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 1, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 32],"float16"),Tensor([1, 1, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 64, 32],"float16"),Tensor([0, 1, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 64, 32],"float16"),Tensor([1, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([1, 1, 64, 0],"float16"),Tensor([1, 1, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 1],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 1],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([0, 128, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 32],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 128, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 0],"float64"),Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([1, 2, 0],"float64"),Tensor([1, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 1],"float64"),Tensor([1, 2, 1],"float64"),Tensor([1, 2, 0],"float64"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),Tensor([0, 2, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 0],"float64"),Tensor([1, 2, 0],"float64"),Tensor([1, 2, 0],"float64"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 0, 4],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 0],"float32"),Tensor([1, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 4],"float32"),Tensor([0, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 4],"float32"),Tensor([1, 2, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 8, 4],"float32"),Tensor([0, 2, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 0, 4],"float32"),Tensor([1, 2, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 2, 8, 0],"float32"),Tensor([1, 2, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([1, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 0],"float32"),Tensor([1, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([1, 2],"float32"),Tensor([1, 0],"float32"),], -1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([0, 300, 4096],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0, 4096],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 0],"float32"),Tensor([1, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([0, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([1, 0, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 4096],"float32"),Tensor([1, 300, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 300, 4096],"float32"),Tensor([0, 300, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 0, 4096],"float32"),Tensor([1, 0, 4096],"float32"),], axis=0, )
paddle.stack(list[Tensor([1, 300, 0],"float32"),Tensor([1, 300, 0],"float32"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=0, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),Tensor([1, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 32],"float64"),Tensor([1, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 4, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 0, 8, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 0, 4],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 0],"float32"),Tensor([1, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 4],"float32"),Tensor([1, 4, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 0, 4],"float32"),Tensor([1, 4, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([1, 4, 8, 0],"float32"),Tensor([1, 4, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),Tensor([1],"float16"),], )
paddle.stack(list[Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([1],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),Tensor([0],"float16"),], )
paddle.stack(list[Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], 1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),], -1, )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),Tensor([1],"float32"),], )
paddle.stack(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float64"),Tensor([1],"float64"),], -1, )
paddle.stack(list[Tensor([1],"float64"),Tensor([0],"float64"),], -1, )
paddle.stack(list[Tensor([0],"float64"),Tensor([0],"float64"),], -1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([1],"int64"),], axis=0, )
paddle.stack(list[Tensor([1],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=0, )
paddle.stack(list[Tensor([0],"int64"),Tensor([1],"int64"),], axis=1, )
paddle.stack(list[Tensor([1],"int64"),Tensor([0],"int64"),], axis=1, )
paddle.stack(list[Tensor([0],"int64"),Tensor([0],"int64"),], axis=1, )
paddle.stack(list[Tensor([0, 10, 10],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 0, 10],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([10, 0, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 10],"float64"),Tensor([10, 10, 0],"float64"),], -1, )
paddle.stack(list[Tensor([0, 10, 10],"float64"),Tensor([0, 10, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 0, 10],"float64"),Tensor([10, 0, 10],"float64"),], -1, )
paddle.stack(list[Tensor([10, 10, 0],"float64"),Tensor([10, 10, 0],"float64"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([10],"float32"),], )
paddle.stack(list[Tensor([10],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([10],"float32"),], axis=1, )
paddle.stack(list[Tensor([10],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"int32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),Tensor([12],"float32"),], )
paddle.stack(list[Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([12],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([120],"float32"),], )
paddle.stack(list[Tensor([120],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0, 128],"float32"),Tensor([128, 128],"float32"),], axis=-1, )
paddle.stack(list[Tensor([128, 0],"float32"),Tensor([128, 128],"float32"),], axis=-1, )
paddle.stack(list[Tensor([128, 128],"float32"),Tensor([0, 128],"float32"),], axis=-1, )
paddle.stack(list[Tensor([128, 128],"float32"),Tensor([128, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 128],"float32"),Tensor([0, 128],"float32"),], axis=-1, )
paddle.stack(list[Tensor([128, 0],"float32"),Tensor([128, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 512],"float16"),Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"float16"),Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([0, 512],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 0],"float16"),Tensor([128, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),Tensor([0, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"float16"),Tensor([128, 512],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"float16"),Tensor([0, 512],"float16"),Tensor([0, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),Tensor([128, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"int32"),Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"int32"),Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([0, 512],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 0],"int32"),Tensor([128, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),Tensor([0, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 512],"int32"),Tensor([128, 512],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"int32"),Tensor([0, 512],"int32"),Tensor([0, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),Tensor([128, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),Tensor([15],"float32"),], )
paddle.stack(list[Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([15],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([16],"float32"),], )
paddle.stack(list[Tensor([16],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0, 1, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 0, 4],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 0],"float32"),Tensor([2, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 4],"float32"),Tensor([0, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 4],"float32"),Tensor([2, 1, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 8, 4],"float32"),Tensor([0, 1, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 0, 4],"float32"),Tensor([2, 1, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 1, 8, 0],"float32"),Tensor([2, 1, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1],"float32"),Tensor([2, 1],"float32"),], -1, )
paddle.stack(list[Tensor([2, 0],"float32"),Tensor([2, 1],"float32"),], -1, )
paddle.stack(list[Tensor([2, 1],"float32"),Tensor([0, 1],"float32"),], -1, )
paddle.stack(list[Tensor([2, 1],"float32"),Tensor([2, 0],"float32"),], -1, )
paddle.stack(list[Tensor([2, 0],"float32"),Tensor([2, 0],"float32"),], -1, )
paddle.stack(list[Tensor([0, 2, 1, 32],"float16"),Tensor([2, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 1, 32],"float16"),Tensor([2, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 0, 32],"float16"),Tensor([2, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 0],"float16"),Tensor([2, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 32],"float16"),Tensor([0, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 32],"float16"),Tensor([2, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 32],"float16"),Tensor([2, 2, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 32],"float16"),Tensor([2, 2, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 1, 32],"float16"),Tensor([0, 2, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 1, 32],"float16"),Tensor([2, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 0, 32],"float16"),Tensor([2, 2, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 1, 0],"float16"),Tensor([2, 2, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 64, 32],"float16"),Tensor([2, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 64, 32],"float16"),Tensor([2, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 0, 32],"float16"),Tensor([2, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 0],"float16"),Tensor([2, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 32],"float16"),Tensor([0, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 32],"float16"),Tensor([2, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 32],"float16"),Tensor([2, 2, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 32],"float16"),Tensor([2, 2, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 64, 32],"float16"),Tensor([0, 2, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 64, 32],"float16"),Tensor([2, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 64, 0],"float16"),Tensor([2, 2, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 0, 8],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 0],"float32"),Tensor([2, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 8],"float32"),Tensor([0, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 0, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 8],"float32"),Tensor([2, 2, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 8, 8],"float32"),Tensor([0, 2, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 0, 8],"float32"),Tensor([2, 2, 0, 8],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 2, 8, 0],"float32"),Tensor([2, 2, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2],"float32"),Tensor([2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([2, 0],"float32"),Tensor([2, 2],"float32"),], -1, )
paddle.stack(list[Tensor([2, 2],"float32"),Tensor([0, 2],"float32"),], -1, )
paddle.stack(list[Tensor([2, 2],"float32"),Tensor([2, 0],"float32"),], -1, )
paddle.stack(list[Tensor([0, 3, 4],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 0, 4],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 3, 0],"float32"),Tensor([2, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 3, 4],"float32"),Tensor([0, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 3, 4],"float32"),Tensor([2, 0, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 3, 4],"float32"),Tensor([2, 3, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 3, 4],"float32"),Tensor([0, 3, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 0, 4],"float32"),Tensor([2, 0, 4],"float32"),], axis=1, )
paddle.stack(list[Tensor([2, 3, 0],"float32"),Tensor([2, 3, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 4, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 8, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 0, 4],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 0],"float32"),Tensor([2, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 4],"float32"),Tensor([0, 4, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 0, 8, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 4],"float32"),Tensor([2, 4, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 0, 4],"float32"),Tensor([2, 4, 0, 4],"float32"),], axis=-1, )
paddle.stack(list[Tensor([2, 4, 8, 0],"float32"),Tensor([2, 4, 8, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 5],"float64"),Tensor([2, 5],"float64"),], -1, )
paddle.stack(list[Tensor([2, 0],"float64"),Tensor([2, 5],"float64"),], -1, )
paddle.stack(list[Tensor([2, 5],"float64"),Tensor([0, 5],"float64"),], -1, )
paddle.stack(list[Tensor([2, 5],"float64"),Tensor([2, 0],"float64"),], -1, )
paddle.stack(list[Tensor([0, 5],"float64"),Tensor([0, 5],"float64"),], -1, )
paddle.stack(list[Tensor([2, 0],"float64"),Tensor([2, 0],"float64"),], -1, )
paddle.stack(list[Tensor([0, 512],"float16"),Tensor([2, 512],"float16"),Tensor([2, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 0],"float16"),Tensor([2, 512],"float16"),Tensor([2, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"float16"),Tensor([0, 512],"float16"),Tensor([2, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"float16"),Tensor([2, 0],"float16"),Tensor([2, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"float16"),Tensor([2, 512],"float16"),Tensor([0, 512],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"float16"),Tensor([2, 512],"float16"),Tensor([2, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([2, 0],"float16"),Tensor([2, 0],"float16"),Tensor([2, 0],"float16"),], axis=1, )
paddle.stack(list[Tensor([0, 512],"int32"),Tensor([2, 512],"int32"),Tensor([2, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 0],"int32"),Tensor([2, 512],"int32"),Tensor([2, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"int32"),Tensor([0, 512],"int32"),Tensor([2, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"int32"),Tensor([2, 0],"int32"),Tensor([2, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"int32"),Tensor([2, 512],"int32"),Tensor([0, 512],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 512],"int32"),Tensor([2, 512],"int32"),Tensor([2, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([2, 0],"int32"),Tensor([2, 0],"int32"),Tensor([2, 0],"int32"),], axis=1, )
paddle.stack(list[Tensor([0, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 0, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 0],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 0, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 0],"float32"),Tensor([2, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 8],"float32"),Tensor([2, 6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),Tensor([0, 6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 0, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),Tensor([2, 0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 0, 8],"float32"),Tensor([2, 6, 0, 8],"float32"),Tensor([2, 6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([2, 6, 8, 0],"float32"),Tensor([2, 6, 8, 0],"float32"),Tensor([2, 6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 8, 1, 32],"float16"),Tensor([2, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 1, 32],"float16"),Tensor([2, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 0, 32],"float16"),Tensor([2, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 0],"float16"),Tensor([2, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 32],"float16"),Tensor([0, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 32],"float16"),Tensor([2, 0, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 32],"float16"),Tensor([2, 8, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 32],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 8, 1, 32],"float16"),Tensor([0, 8, 1, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 0, 32],"float16"),Tensor([2, 8, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 1, 0],"float16"),Tensor([2, 8, 1, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 8, 64, 32],"float16"),Tensor([2, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 0, 64, 32],"float16"),Tensor([2, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 0, 32],"float16"),Tensor([2, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 32],"float16"),Tensor([0, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 32],"float16"),Tensor([2, 0, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 32],"float16"),Tensor([2, 8, 0, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 32],"float16"),Tensor([2, 8, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 8, 64, 32],"float16"),Tensor([0, 8, 64, 32],"float16"),], axis=-1, )
paddle.stack(list[Tensor([2, 8, 64, 0],"float16"),Tensor([2, 8, 64, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 8],"float32"),Tensor([2, 8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),Tensor([2, 0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),Tensor([2, 8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0],"float32"),Tensor([2],"float32"),], 0, )
paddle.stack(list[Tensor([2],"float32"),Tensor([0],"float32"),], 0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),], 0, )
paddle.stack(list[Tensor([0],"float32"),Tensor([2],"float32"),], -1, )
paddle.stack(list[Tensor([2],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),Tensor([2],"float32"),], )
paddle.stack(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),], 1, )
paddle.stack(list[Tensor([252],"float64"),Tensor([0],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),], 1, )
paddle.stack(list[Tensor([252],"float64"),Tensor([252],"float64"),Tensor([0],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),], 1, )
paddle.stack(list[Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([0],"float64"),Tensor([252],"float64"),], 1, )
paddle.stack(list[Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([252],"float64"),Tensor([0],"float64"),], 1, )
paddle.stack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], 1, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),Tensor([28, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 28],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),Tensor([0, 28],"float32"),], axis=-3, )
paddle.stack(list[Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),Tensor([28, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 0, 3],"int64"),Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 0],"int64"),Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([0, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([3, 0, 3],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([3, 2, 0],"int64"),Tensor([3, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),Tensor([0, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),Tensor([3, 0, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 3],"int64"),Tensor([3, 2, 3],"int64"),Tensor([3, 2, 0],"int64"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 3],"int64"),Tensor([0, 2, 3],"int64"),Tensor([0, 2, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 0, 3],"int64"),Tensor([3, 0, 3],"int64"),Tensor([3, 0, 3],"int64"),], axis=-1, )
paddle.stack(list[Tensor([3, 2, 0],"int64"),Tensor([3, 2, 0],"int64"),Tensor([3, 2, 0],"int64"),], axis=-1, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([3, 8, 8],"float32"),], )
paddle.stack(list[Tensor([3, 0, 8],"float32"),Tensor([3, 8, 8],"float32"),], )
paddle.stack(list[Tensor([3, 8, 0],"float32"),Tensor([3, 8, 8],"float32"),], )
paddle.stack(list[Tensor([3, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], )
paddle.stack(list[Tensor([3, 8, 8],"float32"),Tensor([3, 0, 8],"float32"),], )
paddle.stack(list[Tensor([3, 8, 8],"float32"),Tensor([3, 8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], )
paddle.stack(list[Tensor([3, 0, 8],"float32"),Tensor([3, 0, 8],"float32"),], )
paddle.stack(list[Tensor([3, 8, 0],"float32"),Tensor([3, 8, 0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([3],"float32"),], 1, )
paddle.stack(list[Tensor([3],"float32"),Tensor([0],"float32"),], 1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([3],"float32"),], -1, )
paddle.stack(list[Tensor([3],"float32"),Tensor([0],"float32"),], -1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([3],"float32"),Tensor([3],"float32"),], axis=1, )
paddle.stack(list[Tensor([3],"float32"),Tensor([0],"float32"),Tensor([3],"float32"),], axis=1, )
paddle.stack(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float32"),Tensor([0],"float32"),Tensor([0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 0, 3],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 0],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([0, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([4, 0, 3],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 0],"complex128"),Tensor([4, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([0, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([4, 0, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 3],"complex128"),Tensor([4, 1, 0],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 3],"complex128"),Tensor([0, 1, 3],"complex128"),Tensor([0, 1, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 0, 3],"complex128"),Tensor([4, 0, 3],"complex128"),Tensor([4, 0, 3],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([4, 1, 0],"complex128"),Tensor([4, 1, 0],"complex128"),Tensor([4, 1, 0],"complex128"),], axis=-1, )
paddle.stack(list[Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),Tensor([4, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([0, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 16],"float64"),Tensor([4, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),Tensor([0, 16],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),Tensor([4, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([0, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 32],"float32"),Tensor([4, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),Tensor([0, 32],"float32"),], axis=1, )
paddle.stack(list[Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),Tensor([4, 0],"float32"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),], )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),Tensor([4, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 32],"float64"),Tensor([4, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),Tensor([0, 32],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 0, 2],"int32"),Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 0],"int32"),Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([0, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([4, 0, 2],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([4, 4, 0],"int32"),Tensor([4, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),Tensor([0, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),Tensor([4, 0, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 2],"int32"),Tensor([4, 4, 2],"int32"),Tensor([4, 4, 0],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 4, 2],"int32"),Tensor([0, 4, 2],"int32"),Tensor([0, 4, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 0, 2],"int32"),Tensor([4, 0, 2],"int32"),Tensor([4, 0, 2],"int32"),], axis=-1, )
paddle.stack(list[Tensor([4, 4, 0],"int32"),Tensor([4, 4, 0],"int32"),Tensor([4, 4, 0],"int32"),], axis=-1, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),Tensor([4, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 5],"float64"),Tensor([4, 5],"float64"),], -1, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 5],"float64"),], -1, )
paddle.stack(list[Tensor([4, 5],"float64"),Tensor([0, 5],"float64"),], -1, )
paddle.stack(list[Tensor([4, 5],"float64"),Tensor([4, 0],"float64"),], -1, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 0],"float64"),], -1, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),], )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),], )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),], )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),], )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),Tensor([4, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([0, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 8],"float64"),Tensor([4, 0],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),Tensor([0, 8],"float64"),], axis=1, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 0],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 0, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 1, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0, 1],"float64"),Tensor([5, 0, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 0],"float64"),Tensor([5, 1, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 0],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 0, 1],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 1, 0],"float64"),Tensor([5, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 0, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 1],"float64"),Tensor([5, 1, 1],"float64"),Tensor([5, 1, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0, 1],"float64"),Tensor([5, 0, 1],"float64"),Tensor([5, 0, 1],"float64"),], 0, )
paddle.stack(list[Tensor([5, 1, 0],"float64"),Tensor([5, 1, 0],"float64"),Tensor([5, 1, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 2],"float32"),Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 0],"float32"),Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([5, 0, 2],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([5, 1, 0],"float32"),Tensor([5, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),Tensor([5, 0, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 2],"float32"),Tensor([5, 1, 2],"float32"),Tensor([5, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),Tensor([0, 1, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 2],"float32"),Tensor([5, 0, 2],"float32"),Tensor([5, 0, 2],"float32"),], axis=-1, )
paddle.stack(list[Tensor([5, 1, 0],"float32"),Tensor([5, 1, 0],"float32"),Tensor([5, 1, 0],"float32"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 5],"float16"),Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 0],"float16"),Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([0, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([5, 0, 5],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([5, 2, 0],"float16"),Tensor([5, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),Tensor([0, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),Tensor([5, 0, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 5],"float16"),Tensor([5, 2, 5],"float16"),Tensor([5, 2, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 2, 5],"float16"),Tensor([0, 2, 5],"float16"),Tensor([0, 2, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 5],"float16"),Tensor([5, 0, 5],"float16"),Tensor([5, 0, 5],"float16"),], axis=-1, )
paddle.stack(list[Tensor([5, 2, 0],"float16"),Tensor([5, 2, 0],"float16"),Tensor([5, 2, 0],"float16"),], axis=-1, )
paddle.stack(list[Tensor([0, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 5],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 0],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([0, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([5, 0, 5],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 0],"complex64"),Tensor([5, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([0, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([5, 0, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 5],"complex64"),Tensor([5, 3, 0],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([0, 3, 5],"complex64"),Tensor([0, 3, 5],"complex64"),Tensor([0, 3, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 0, 5],"complex64"),Tensor([5, 0, 5],"complex64"),Tensor([5, 0, 5],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([5, 3, 0],"complex64"),Tensor([5, 3, 0],"complex64"),Tensor([5, 3, 0],"complex64"),], axis=-1, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([5, 4],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0],"float64"),Tensor([5, 4],"float64"),], 0, )
paddle.stack(list[Tensor([5, 4],"float64"),Tensor([0, 4],"float64"),], 0, )
paddle.stack(list[Tensor([5, 4],"float64"),Tensor([5, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], 0, )
paddle.stack(list[Tensor([5, 0],"float64"),Tensor([5, 0],"float64"),], 0, )
paddle.stack(list[Tensor([0],"float64"),Tensor([5],"float64"),], 0, )
paddle.stack(list[Tensor([5],"float64"),Tensor([0],"float64"),], 0, )
paddle.stack(list[Tensor([0],"float64"),Tensor([0],"float64"),], 0, )
paddle.stack(list[Tensor([0, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 0, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 0],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([6, 0, 28],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([6, 28, 0],"float32"),Tensor([6, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 0, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 28],"float32"),Tensor([6, 28, 28],"float32"),Tensor([6, 28, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),Tensor([0, 28, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 0, 28],"float32"),Tensor([6, 0, 28],"float32"),Tensor([6, 0, 28],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 28, 0],"float32"),Tensor([6, 28, 0],"float32"),Tensor([6, 28, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 0, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 0],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),Tensor([6, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 8],"float32"),Tensor([6, 8, 8],"float32"),Tensor([6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),Tensor([0, 8, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 0, 8],"float32"),Tensor([6, 0, 8],"float32"),Tensor([6, 0, 8],"float32"),], axis=-4, )
paddle.stack(list[Tensor([6, 8, 0],"float32"),Tensor([6, 8, 0],"float32"),Tensor([6, 8, 0],"float32"),], axis=-4, )
paddle.stack(list[Tensor([0],"float32"),Tensor([6],"float32"),], )
paddle.stack(list[Tensor([6],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),Tensor([8, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 4],"float64"),Tensor([8, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),Tensor([0, 4],"float64"),], axis=0, )
paddle.stack(list[Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),Tensor([8, 0],"float64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),], )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),], )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),], )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),], )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),], )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),], axis=2, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=2, )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),], axis=2, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),Tensor([8, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([0, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 4],"int64"),Tensor([8, 0],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),Tensor([0, 4],"int64"),], axis=0, )
paddle.stack(list[Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),Tensor([8, 0],"int64"),], axis=0, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], axis=-3, )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], axis=-3, )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),Tensor([8, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 8],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),Tensor([0, 8],"float32"),], )
paddle.stack(list[Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),Tensor([8, 0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([84],"float32"),], )
paddle.stack(list[Tensor([84],"float32"),Tensor([0],"float32"),], )
paddle.stack(list[Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),Tensor([9],"float32"),], )
paddle.stack(list[Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([9],"float32"),Tensor([0],"float32"),], )
paddle.stack(tuple(Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 0, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 14],"float32"),Tensor([14, 3, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),Tensor([0, 3, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),Tensor([14, 0, 14],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),Tensor([14, 3, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([0, 224, 224],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 224],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([0, 224, 224],"float32"),Tensor([0, 224, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 0, 224],"float32"),Tensor([3, 0, 224],"float32"),), axis=0, )
paddle.stack(tuple(Tensor([3, 224, 0],"float32"),Tensor([3, 224, 0],"float32"),), axis=0, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 140],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([0, 140, 140],"float32"),Tensor([0, 140, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 0, 140],"float32"),Tensor([58, 0, 140],"float32"),], axis=1, )
paddle.stack(x=list[Tensor([58, 140, 0],"float32"),Tensor([58, 140, 0],"float32"),], axis=1, )
paddle.std(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.std(Tensor([0, 84],"float32"), axis=0, )
paddle.std(Tensor([120, 0],"float32"), axis=0, )
paddle.std(Tensor([0, 150],"float32"), axis=1, )
paddle.std(Tensor([16, 0],"float32"), axis=1, )
paddle.std(Tensor([0],"float32"), )
paddle.std(Tensor([0, 5],"float32"), )
paddle.std(Tensor([3, 0],"float32"), )
paddle.std(Tensor([0, 120],"float32"), axis=0, )
paddle.std(Tensor([400, 0],"float32"), axis=0, )
paddle.std(Tensor([0, 9],"float32"), axis=1, )
paddle.std(Tensor([6, 0],"float32"), axis=1, )
paddle.std(Tensor([0, 10],"float32"), axis=0, )
paddle.std(Tensor([84, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 1],"float32"), )
paddle.sum(Tensor([1, 0],"float32"), )
paddle.sum(Tensor([0, 1],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 1000],"float32"), axis=1, )
paddle.sum(Tensor([1, 0],"float32"), axis=1, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 14, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 0, 5, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 14, 0, 14],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([1, 14, 5, 0],"int64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 16],"int64"), axis=0, )
paddle.sum(Tensor([1, 0],"int64"), axis=0, )
paddle.sum(Tensor([0, 196608],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([1, 2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([0, 3, 3, 5],"float32"), )
paddle.sum(Tensor([1, 0, 3, 5],"float32"), )
paddle.sum(Tensor([1, 3, 0, 5],"float32"), )
paddle.sum(Tensor([1, 3, 3, 0],"float32"), )
paddle.sum(Tensor([0, 3, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float32"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), 2, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), list[1,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3],"float32"), axis=0, )
paddle.sum(Tensor([1, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 3072],"float32"), axis=1, )
paddle.sum(Tensor([0],"float32"), )
paddle.sum(Tensor([0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 10, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 0, 5],"float64"), name=None, )
paddle.sum(Tensor([10, 10, 0],"float64"), name=None, )
paddle.sum(Tensor([0, 10],"float32"), )
paddle.sum(Tensor([10, 0],"float32"), )
paddle.sum(Tensor([0, 10],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([10, 0],"float32"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 10],"float32"), name=None, )
paddle.sum(Tensor([10, 0],"float32"), name=None, )
paddle.sum(Tensor([0, 2],"float32"), )
paddle.sum(Tensor([0, 2],"float32"), name=None, )
paddle.sum(Tensor([0, 20, 2],"float32"), axis=-1, )
paddle.sum(Tensor([10, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([10, 20, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 20, 2],"float64"), axis=-1, )
paddle.sum(Tensor([10, 0, 2],"float64"), axis=-1, )
paddle.sum(Tensor([10, 20, 0],"float64"), axis=-1, )
paddle.sum(Tensor([0, 20],"float64"), axis=-1, )
paddle.sum(Tensor([10, 0],"float64"), axis=-1, )
paddle.sum(Tensor([0, 20],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([10, 0],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 5, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 0, 9, 9],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 5, 0, 9],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 5, 9, 0],"float64"), Tensor([2],"int64"), )
paddle.sum(Tensor([10, 5, 9, 9],"float64"), Tensor([0],"int64"), )
paddle.sum(Tensor([0, 5],"int64"), )
paddle.sum(Tensor([10, 0],"int64"), )
paddle.sum(Tensor([0],"float16"), )
paddle.sum(Tensor([0, 1, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 1],"float32"), None, None, False, None, )
paddle.sum(Tensor([100, 1, 0],"float32"), None, None, False, None, )
paddle.sum(Tensor([0, 1, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 0, 1],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 1, 0],"float64"), None, None, False, None, )
paddle.sum(Tensor([100, 0],"float32"), )
paddle.sum(Tensor([0, 200],"float32"), )
paddle.sum(Tensor([0, 10],"float16"), )
paddle.sum(Tensor([1000, 0],"float16"), )
paddle.sum(Tensor([1000, 0],"float32"), )
paddle.sum(Tensor([0, 1000],"float16"), )
paddle.sum(Tensor([0, 1000],"float32"), )
paddle.sum(Tensor([0, 784],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1000, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 0, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([10000, 2, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 4],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([100000, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1000000, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0],"float16"), )
paddle.sum(Tensor([1024, 0],"float32"), )
paddle.sum(Tensor([0, 1024, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 1024, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 0, 8],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([1024, 1024, 0],"float64"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 1024],"float16"), )
paddle.sum(Tensor([0, 1024],"float32"), )
paddle.sum(Tensor([0, 2],"float16"), )
paddle.sum(Tensor([12, 0],"int64"), )
paddle.sum(Tensor([0],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 84],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([120, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([128, 0],"float32"), )
paddle.sum(Tensor([0, 32, 32],"float32"), axis=0, )
paddle.sum(Tensor([128, 0, 32],"float32"), axis=0, )
paddle.sum(Tensor([128, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 150],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([16, 0],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([0, 256],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float32"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 256],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([16, 0],"float64"), -1, keepdim=True, name=None, )
paddle.sum(Tensor([0, 32, 128],"float32"), axis=0, )
paddle.sum(Tensor([16, 0, 128],"float32"), axis=0, )
paddle.sum(Tensor([16, 32, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 32, 64],"float32"), axis=0, )
paddle.sum(Tensor([16, 0, 64],"float32"), axis=0, )
paddle.sum(Tensor([0, 10, 10],"float32"), )
paddle.sum(Tensor([2, 0, 10],"float32"), )
paddle.sum(Tensor([2, 10, 0],"float32"), )
paddle.sum(Tensor([0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([2, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([0, 100],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 100],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 0],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([2, 0, 2],"float32"), axis=-1, )
paddle.sum(Tensor([2, 2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([2, 0],"float32"), )
paddle.sum(Tensor([0, 2],"float32"), axis=1, )
paddle.sum(Tensor([2, 0],"float32"), axis=1, )
paddle.sum(Tensor([2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2],"float64"), axis=1, )
paddle.sum(Tensor([2, 0],"float64"), axis=1, )
paddle.sum(Tensor([0, 2],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([2, 0],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 256],"int64"), axis=0, )
paddle.sum(Tensor([2, 0],"int64"), axis=0, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"int64"), )
paddle.sum(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"int64"), )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,1,2,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[0,2,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=list[2,], keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 0, 4, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 0, 5],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([2, 3, 4, 0],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[0,2,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[-1,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=list[2,], keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,1,3,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 0, 4, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 0, 5],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([2, 3, 4, 0],"int64"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.sum(Tensor([0, 3, 4],"int32"), )
paddle.sum(Tensor([2, 0, 4],"int32"), )
paddle.sum(Tensor([2, 3, 0],"int32"), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=0, )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=0, )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=0, )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 3, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 0, 4],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([2, 3, 0],"int32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0, 3],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=-1, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[0,], keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=list[-1,], keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 3],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([2, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 3],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([2, 0],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.sum(Tensor([0, 4],"float32"), axis=0, )
paddle.sum(Tensor([2, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 5],"float32"), )
paddle.sum(Tensor([0, 5],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float32"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), 0, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), -1, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), -1, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=False, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=True, dtype="float32", )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=True, dtype="float32", )
paddle.sum(Tensor([0, 5],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([2, 0],"int64"), )
paddle.sum(Tensor([0, 8, 16],"float32"), axis=1, )
paddle.sum(Tensor([2, 0, 16],"float32"), axis=1, )
paddle.sum(Tensor([2, 8, 0],"float32"), axis=1, )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0],"int32"), )
paddle.sum(Tensor([0],"int64"), )
paddle.sum(Tensor([0, 28, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 0, 28, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 0, 80],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([256, 28, 28, 0],"float32"), axis=tuple(0,1,2,), )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 10],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 10],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 2, 3, 3],"float32"), )
paddle.sum(Tensor([3, 0, 3, 3],"float32"), )
paddle.sum(Tensor([3, 2, 0, 3],"float32"), )
paddle.sum(Tensor([3, 2, 3, 0],"float32"), )
paddle.sum(Tensor([0, 2, 4],"float32"), axis=1, )
paddle.sum(Tensor([3, 0, 4],"float32"), axis=1, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=1, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 2, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 0, 5],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 2, 0],"float32"), axis=list[-2,-1,], keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), )
paddle.sum(Tensor([0, 2],"float32"), axis=0, )
paddle.sum(Tensor([3, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 3, 10, 10],"float32"), )
paddle.sum(Tensor([3, 0, 10, 10],"float32"), )
paddle.sum(Tensor([3, 3, 0, 10],"float32"), )
paddle.sum(Tensor([3, 3, 10, 0],"float32"), )
paddle.sum(Tensor([0, 3, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 0, 10, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 0, 10],"float32"), name=None, )
paddle.sum(Tensor([3, 3, 10, 0],"float32"), name=None, )
paddle.sum(Tensor([0, 3, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 0, 3, 3, 3],"float32"), )
paddle.sum(Tensor([3, 3, 0, 3, 3],"float32"), )
paddle.sum(Tensor([3, 3, 3, 0, 3],"float32"), )
paddle.sum(Tensor([3, 3, 3, 3, 0],"float32"), )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float32"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"float64"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int32"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4, 2],"int64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 0, 2],"int64"), axis=2, keepdim=True, )
paddle.sum(Tensor([3, 4, 0],"int64"), axis=2, keepdim=True, )
paddle.sum(Tensor([0, 4, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 0, 4, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4, 0, 5, 7],"int64"), )
paddle.sum(Tensor([3, 4, 4, 0, 7],"int64"), )
paddle.sum(Tensor([3, 4, 4, 5, 0],"int64"), )
paddle.sum(Tensor([0, 4],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0],"float16"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4],"float16"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0],"float16"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([3, 0],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 4],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([3, 0],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 4],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=False, )
paddle.sum(Tensor([0, 5],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([3, 0],"bool"), axis=None, keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), axis=-1, )
paddle.sum(Tensor([3, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 5],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"float32"), axis=None, )
paddle.sum(Tensor([3, 0],"float32"), axis=None, )
paddle.sum(Tensor([0, 5],"float32"), keepdim=True, )
paddle.sum(Tensor([3, 0],"float32"), keepdim=True, )
paddle.sum(Tensor([0, 5],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 0],"float32"), None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"float64"), axis=-1, )
paddle.sum(Tensor([3, 0],"float64"), axis=-1, )
paddle.sum(Tensor([0, 5],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([3, 0],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 5],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([3, 0],"float64"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=False, name=None, )
paddle.sum(Tensor([0, 5],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([3, 0],"int64"), axis=None, keepdim=True, name=None, )
paddle.sum(Tensor([0],"float32"), axis=-1, )
paddle.sum(Tensor([0],"float32"), name=None, )
paddle.sum(Tensor([0],"float64"), )
paddle.sum(Tensor([0],"float64"), axis=-1, )
paddle.sum(Tensor([0],"float64"), axis=-1, keepdim=True, )
paddle.sum(Tensor([0, 200, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([30, 0, 40],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([30, 200, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 128, 128],"float32"), )
paddle.sum(Tensor([32, 0, 128],"float32"), )
paddle.sum(Tensor([32, 128, 0],"float32"), )
paddle.sum(Tensor([0, 128, 256],"float32"), )
paddle.sum(Tensor([32, 0, 256],"float32"), )
paddle.sum(Tensor([0, 32, 128],"float32"), axis=1, )
paddle.sum(Tensor([32, 0, 128],"float32"), axis=1, )
paddle.sum(Tensor([32, 32, 0],"float32"), axis=1, )
paddle.sum(Tensor([0, 64, 128],"float32"), axis=0, )
paddle.sum(Tensor([32, 0, 128],"float32"), axis=0, )
paddle.sum(Tensor([32, 64, 0],"float32"), axis=0, )
paddle.sum(Tensor([0, 20],"float32"), )
paddle.sum(Tensor([4, 0],"float32"), )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=False, )
paddle.sum(Tensor([0, 3, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 0, 2, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 0, 5],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([4, 3, 2, 0],"float32"), axis=list[1,3,], keepdim=True, )
paddle.sum(Tensor([0, 3, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 0, 2],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([4, 3, 0],"float32"), axis=1, keepdim=False, )
paddle.sum(Tensor([0, 3, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 0, 2],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([4, 3, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 3],"float16"), axis=1, )
paddle.sum(Tensor([4, 0],"float16"), axis=1, )
paddle.sum(Tensor([0, 4],"complex128"), )
paddle.sum(Tensor([4, 0],"complex128"), )
paddle.sum(Tensor([0, 4],"complex64"), )
paddle.sum(Tensor([4, 0],"complex64"), )
paddle.sum(Tensor([0, 5, 5],"float64"), )
paddle.sum(Tensor([4, 0, 5],"float64"), )
paddle.sum(Tensor([4, 5, 0],"float64"), )
paddle.sum(Tensor([0],"float32"), axis=0, )
paddle.sum(Tensor([40, 0],"float32"), )
paddle.sum(Tensor([0, 20, 50],"float32"), )
paddle.sum(Tensor([40, 0, 50],"float32"), )
paddle.sum(Tensor([40, 20, 0],"float32"), )
paddle.sum(Tensor([0],"int32"), axis=0, keepdim=True, )
paddle.sum(Tensor([0],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([0, 120],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([400, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 300, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 0, 20, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 0, 10],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([400, 300, 20, 0],"float32"), axis=tuple(0,1,), )
paddle.sum(Tensor([0, 1, 200],"float32"), axis=-1, )
paddle.sum(Tensor([464, 0, 200],"float32"), axis=-1, )
paddle.sum(Tensor([464, 1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 1],"float64"), )
paddle.sum(Tensor([5, 0],"float64"), )
paddle.sum(Tensor([0, 20],"float64"), )
paddle.sum(Tensor([5, 0],"float32"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 0],"float32"), axis=1, keepdim=True, )
paddle.sum(Tensor([5, 0],"float64"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 0],"float64"), axis=1, keepdim=True, )
paddle.sum(Tensor([5, 0],"int64"), axis=0, keepdim=True, )
paddle.sum(Tensor([5, 0],"int64"), axis=1, keepdim=True, )
paddle.sum(Tensor([0, 5],"float64"), name=None, )
paddle.sum(Tensor([5, 0],"float64"), name=None, )
paddle.sum(Tensor([0],"bool"), axis=list[0,], keepdim=False, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float32"), axis=-1, keepdim=True, name="Categorical_kl_divergence", )
paddle.sum(Tensor([0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"float64"), name=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0],"int64"), axis=list[0,], keepdim=False, name=None, )
paddle.sum(Tensor([0, 1],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([5000, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 2],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([5000, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([50000, 0, 3],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([50000, 2, 0],"float64"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([50000, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([512, 0, 200],"float32"), axis=-1, )
paddle.sum(Tensor([512, 1, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 256, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 0, 14, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 256, 0, 14],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([512, 256, 14, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 256],"float32"), )
paddle.sum(Tensor([512, 0],"float32"), )
paddle.sum(Tensor([6, 0],"float32"), )
paddle.sum(Tensor([0, 2, 10],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([6, 0, 10],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, "float64", False, None, )
paddle.sum(Tensor([0, 2, 3],"float32"), )
paddle.sum(Tensor([6, 0, 3],"float32"), )
paddle.sum(Tensor([6, 2, 0],"float32"), )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float32"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), -2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 0, 3],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([6, 2, 0],"float64"), None, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 2, 3],"int64"), )
paddle.sum(Tensor([6, 0, 3],"int64"), )
paddle.sum(Tensor([6, 2, 0],"int64"), )
paddle.sum(Tensor([0, 9],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([6, 0],"float32"), 1, keepdim=False, name=None, )
paddle.sum(Tensor([0, 128, 56, 56],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([64, 0, 56, 56],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([64, 128, 0, 56],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([64, 128, 56, 0],"float32"), axis=tuple(0,2,3,), )
paddle.sum(Tensor([0, 128, 96],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 0, 96],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([64, 128, 0],"float32"), axis=list[1,2,], )
paddle.sum(Tensor([0, 3],"float32"), axis=-1, )
paddle.sum(Tensor([7, 0],"float32"), axis=-1, )
paddle.sum(Tensor([0, 16, 32],"float16"), )
paddle.sum(Tensor([8, 0, 32],"float16"), )
paddle.sum(Tensor([8, 16, 0],"float16"), )
paddle.sum(Tensor([0, 16, 32],"float32"), )
paddle.sum(Tensor([8, 0, 32],"float32"), )
paddle.sum(Tensor([8, 16, 0],"float32"), )
paddle.sum(Tensor([0, 16, 32],"float64"), )
paddle.sum(Tensor([8, 0, 32],"float64"), )
paddle.sum(Tensor([8, 16, 0],"float64"), )
paddle.sum(Tensor([0, 3, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 0, 4, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 0, 1, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 0, 1, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 1, 0, 1],"int64"), )
paddle.sum(Tensor([8, 3, 4, 1, 1, 0],"int64"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float32"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 0, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 1, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 2, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 3, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 4, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=False, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"float64"), 5, keepdim=True, dtype=None, )
paddle.sum(Tensor([0, 3, 4, 4, 5, 3],"int64"), )
paddle.sum(Tensor([8, 0, 4, 4, 5, 3],"int64"), )
paddle.sum(Tensor([8, 3, 0, 4, 5, 3],"int64"), )
paddle.sum(Tensor([8, 3, 4, 0, 5, 3],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 0, 3],"int64"), )
paddle.sum(Tensor([8, 3, 4, 4, 5, 0],"int64"), )
paddle.sum(Tensor([0, 4],"float32"), )
paddle.sum(Tensor([8, 0],"float32"), )
paddle.sum(Tensor([0, 10],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([84, 0],"float32"), 0, keepdim=False, name=None, )
paddle.sum(Tensor([0, 8],"int64"), )
paddle.sum(Tensor([9, 0],"int64"), )
paddle.sum(Tensor([96, 0, 32],"float32"), axis=0, )
paddle.sum(Tensor([96, 32, 0],"float32"), axis=0, )
paddle.t(Tensor([0, 5],"float64"), )
paddle.t(Tensor([1, 0],"float64"), )
paddle.t(Tensor([0, 20],"float32"), )
paddle.t(Tensor([10, 0],"float32"), )
paddle.t(Tensor([10, 0],"float64"), )
paddle.t(Tensor([0],"float64"), )
paddle.t(Tensor([0, 10],"float32"), )
paddle.t(Tensor([20, 0],"float32"), )
paddle.t(Tensor([0],"float32"), )
paddle.take(Tensor([0, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"float64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 0],"int64"), mode="clip", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 0],"int64"), mode="clip", )
paddle.take(Tensor([0, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float64"), Tensor([0, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 0],"int64"), mode="wrap", )
paddle.take(Tensor([0, 4],"float64"), Tensor([0, 8],"int64"), mode="wrap", )
paddle.take(Tensor([3, 0],"float64"), Tensor([5, 0],"int64"), mode="wrap", )
paddle.take(Tensor([0, 4],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"int32"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int32"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.take(Tensor([0, 4],"int64"), Tensor([0, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 0],"int64"), Tensor([2, 0],"int64"), mode="raise", )
paddle.tan(Tensor([0, 20, 1],"float32"), )
paddle.tan(Tensor([10, 0, 1],"float32"), )
paddle.tan(Tensor([10, 20, 0],"float32"), )
paddle.tan(Tensor([0, 1, 2, 2],"float32"), )
paddle.tan(Tensor([100, 0, 2, 2],"float32"), )
paddle.tan(Tensor([100, 1, 0, 2],"float32"), )
paddle.tan(Tensor([100, 1, 2, 0],"float32"), )
paddle.tan(Tensor([0, 1, 2],"float32"), )
paddle.tan(Tensor([100, 0, 2],"float32"), )
paddle.tan(Tensor([100, 1, 0],"float32"), )
paddle.tan(Tensor([0, 1],"float32"), )
paddle.tan(Tensor([100, 0],"float32"), )
paddle.tan(Tensor([0, 1],"float64"), )
paddle.tan(Tensor([100, 0],"float64"), )
paddle.tan(Tensor([0, 2, 1],"float32"), )
paddle.tan(Tensor([100, 0, 1],"float32"), )
paddle.tan(Tensor([100, 2, 0],"float32"), )
paddle.tan(Tensor([0, 2, 3, 1],"float32"), )
paddle.tan(Tensor([100, 0, 3, 1],"float32"), )
paddle.tan(Tensor([100, 2, 0, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3, 0],"float32"), )
paddle.tan(Tensor([0, 2, 3],"float32"), )
paddle.tan(Tensor([100, 0, 3],"float32"), )
paddle.tan(Tensor([0, 2],"float32"), )
paddle.tan(Tensor([0],"float32"), )
paddle.tan(Tensor([0, 16, 32],"complex128"), )
paddle.tan(Tensor([8, 0, 32],"complex128"), )
paddle.tan(Tensor([8, 16, 0],"complex128"), )
paddle.tan(Tensor([0, 16, 32],"complex64"), )
paddle.tan(Tensor([8, 0, 32],"complex64"), )
paddle.tan(Tensor([8, 16, 0],"complex64"), )
paddle.tan(Tensor([0, 16, 32],"float16"), )
paddle.tan(Tensor([8, 0, 32],"float16"), )
paddle.tan(Tensor([8, 16, 0],"float16"), )
paddle.tan(Tensor([0, 16, 32],"float32"), )
paddle.tan(Tensor([8, 0, 32],"float32"), )
paddle.tan(Tensor([8, 16, 0],"float32"), )
paddle.tan(Tensor([0, 16, 32],"float64"), )
paddle.tan(Tensor([8, 0, 32],"float64"), )
paddle.tan(Tensor([8, 16, 0],"float64"), )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), 2, axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), 2, axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), 2, axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), 2, axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), 3, axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), 3, axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), 3, axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), 3, axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([0, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 0, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 0, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 0],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([0, 4, 6],"bool"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"bool"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"bool"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"int32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"int32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int32"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 6],"uint8"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 6],"uint8"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"uint8"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), 2, axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), 2, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), 2, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), 2, axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), 3, axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), 3, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), 3, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), 3, axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([4, 0, 7, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([4, 4, 0, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 0],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), 2, axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), 2, axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), 2, axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([0, 4, 7],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([4, 0, 7],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([4, 4, 0],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([0, 6],"bool"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"bool"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"float32"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"float32"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"float64"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"float64"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"int32"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"int32"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"int64"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 6],"uint8"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 0],"uint8"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), 2, axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), 2, axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), 3, axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), list[2,3,], axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), list[2,3,], axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), list[2,4,6,], axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), list[2,4,6,], axis=1, )
paddle.tensor_split(Tensor([0, 7],"int64"), tuple(2,6,), axis=1, )
paddle.tensor_split(Tensor([4, 0],"int64"), tuple(2,6,), axis=1, )
paddle.tensor_split(Tensor([0],"bool"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"float16"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"float32"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"float64"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"int32"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"int64"), 2, )
paddle.tensor_split(Tensor([0],"int64"), 3, )
paddle.tensor_split(Tensor([0],"int64"), 3, axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,5,], )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,5,), )
paddle.tensor_split(Tensor([0],"uint8"), 3, axis=0, )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), 2, )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), 2, )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), 2, )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), 3, )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), 3, )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), 3, )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0, 4, 3],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7, 0, 3],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7, 4, 0],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0, 4],"int64"), 2, )
paddle.tensor_split(Tensor([7, 0],"int64"), 2, )
paddle.tensor_split(Tensor([0, 4],"int64"), 3, )
paddle.tensor_split(Tensor([7, 0],"int64"), 3, )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([0, 4],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0, 4],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7, 0],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0],"int64"), 2, axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,1,3,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,3,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([0],"int64"), list[2,4,6,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[3,-1,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), list[3,-1,5,2,16,], axis=0, )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([0],"int64"), tuple(2,6,), axis=0, )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 5],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 1, 5],"float64"), Tensor([0, 5, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 1, 5],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([1, 5, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 1, 0],"float64"), Tensor([1, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 1, 5, 5],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 1, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 0, 5, 5],"float64"), Tensor([1, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 0, 5],"float64"), Tensor([1, 1, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0],"float64"), Tensor([10],"float64"), axes=1, )
paddle.tensordot(Tensor([10],"float64"), Tensor([0],"float64"), axes=1, )
paddle.tensordot(Tensor([0],"float64"), Tensor([0],"float64"), axes=1, )
paddle.tensordot(Tensor([0, 3],"float64"), Tensor([2, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 0],"float64"), Tensor([2, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 3],"float64"), Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 3],"float64"), Tensor([2, 0],"float64"), axes=2, )
paddle.tensordot(Tensor([0, 3],"float64"), Tensor([0, 3],"float64"), axes=2, )
paddle.tensordot(Tensor([2, 0],"float64"), Tensor([2, 0],"float64"), axes=2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[1,], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), list[1,], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), list[1,], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([0],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), list[Tensor([2],"int64"),Tensor([0],"int64"),], )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([0],"int64"), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([0, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(1,), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(1,), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(Tensor([2],"int64"),Tensor([0],"int64"),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([0, 4, 4],"float32"), Tensor([0, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 0, 4],"float32"), Tensor([4, 0, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 0],"float32"), Tensor([4, 4, 0],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 0, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 0, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 1, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 1, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), 2, )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), 2, )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), list[1,], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), list[1,], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), list[list[1,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), list[Tensor([2],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([0],"int64"),Tensor([2],"int64"),], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[Tensor([2],"int64"),Tensor([0],"int64"),], )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([0],"int64"), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), Tensor([2, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([0, 2],"int64"), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([2, 0],"int64"), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(1,), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(1,), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(Tensor([2],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([0],"int64"),Tensor([2],"int64"),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(Tensor([2],"int64"),Tensor([0],"int64"),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([0, 4, 4],"float64"), Tensor([0, 4, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 0, 4],"float64"), Tensor([4, 0, 5],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([3, 4, 0],"float64"), Tensor([4, 4, 0],"float64"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 1, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([1, 0, 1, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([1, 1, 0, 1],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([1, 1, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 1],"float64"), Tensor([0, 5, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 1],"float64"), Tensor([5, 0, 1, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 1],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 1, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float32"), Tensor([0, 5, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float32"), Tensor([5, 0, 5, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float32"), Tensor([5, 5, 0, 5],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float32"), Tensor([5, 5, 5, 0],"float32"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[3,0,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,1,3,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,1,2,0,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 5],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([0, 5, 5, 5],"float64"), Tensor([0, 5, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 0, 5, 5],"float64"), Tensor([5, 0, 5, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 0, 5],"float64"), Tensor([5, 5, 0, 5],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 0],"float64"), Tensor([5, 5, 5, 0],"float64"), list[list[3,2,1,0,],list[0,1,3,2,],], )
paddle.tile(Tensor([0, 2, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 0, 1, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 0, 64, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 0, 16],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([1, 2, 1, 64, 0],"float32"), list[1,1,4,1,1,], )
paddle.tile(Tensor([0, 2],"float32"), repeat_times=list[2,1,], )
paddle.tile(Tensor([1, 0],"float32"), repeat_times=list[2,1,], )
paddle.tile(Tensor([0, 2, 1, 1, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 0, 1, 1, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 2, 0, 1, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 2, 1, 0, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 2, 1, 1, 0],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([0, 2, 1, 64, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 0, 1, 64, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 2, 0, 64, 64],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([2, 2, 1, 64, 0],"float16"), list[1,1,4,1,1,], )
paddle.tile(Tensor([0, 3],"float32"), list[2,2,], )
paddle.tile(Tensor([2, 0],"float32"), list[2,2,], )
paddle.tile(Tensor([0, 8, 1, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 0, 1, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 0, 1, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 0, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 1, 0],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([0, 8, 1, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 0, 1, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 0, 64, 64],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([2, 8, 1, 64, 0],"float16"), list[1,1,1,1,1,], )
paddle.tile(Tensor([0, 2, 1, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 0, 1, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 0, 64, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 0, 32],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([3, 2, 1, 64, 0],"float16"), list[1,1,8,1,1,], )
paddle.tile(Tensor([0, 1, 32],"float64"), list[1,4,1,], )
paddle.tile(Tensor([8, 0, 32],"float64"), list[1,4,1,], )
paddle.tile(Tensor([8, 1, 0],"float64"), list[1,4,1,], )
paddle.tile(Tensor([0, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([8, 0],"int64"), list[1,4,], )
paddle.tile(Tensor([0, 4, 1],"float64"), list[1,1,100,], )
paddle.tile(Tensor([8, 0, 1],"float64"), list[1,1,100,], )
paddle.tile(Tensor([8, 4, 0],"float64"), list[1,1,100,], )
paddle.tile(x=Tensor([0, 512],"float64"), repeat_times=list[471,1,], )
paddle.tile(x=Tensor([1, 0],"float64"), repeat_times=list[471,1,], )
paddle.trace(Tensor([0, 2],"float32"), )
paddle.trace(Tensor([2, 0],"float32"), )
paddle.transpose(Tensor([0, 10, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([1, 10, 0],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 10],"float64"), list[1,0,], )
paddle.transpose(Tensor([1, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 100, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 100, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 40],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 40],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 8],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 8],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 12, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 12, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float16"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 128, 32, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 32, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 0, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 32, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 128, 32, 32],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 32],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 128, 0, 32],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 128, 32, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 32, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 0, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 128, 8, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 8, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 0, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 128, 8, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 16, 32, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 16, 0, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 16, 32, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 16, 32, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 32, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 16, 0, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 16, 32, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 17, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 17, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 17, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 2, 12, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 0, 12, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 10, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 12, 0, 10],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 12, 10, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 2, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 2, 24, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 0, 24, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 5, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 24, 0, 5],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 24, 5, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 48, 3, 3],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 0, 48, 3, 3],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 0, 3, 3],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 48, 0, 3],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([1, 2, 48, 3, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2],"float32"), list[1,0,], )
paddle.transpose(Tensor([1, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 3, 2, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 2, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 0, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 0, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 5, 0],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 2, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 2, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 0, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 2, 5, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 4, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 4, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 0, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 4, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 4, 2, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 5, 2, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 5, 2, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 0, 2, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 5, 0, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 5, 2, 0],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 5, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 0, 5, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 5, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([1, 3, 5, 2, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 32, 128, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 128, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 0, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 128, 0],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 32, 128, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 128, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 0, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 128, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 32, 128, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 128, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 0, 32],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 32, 16, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 16, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 0, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 16, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 32, 8, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 8, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 0, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 32, 8, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 4, 100],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 100],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 4, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 4, 17],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 0, 17],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 4, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 4, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 40, 100],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 40, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 40, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 40, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 40, 8],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 50],"complex128"), list[1,0,], )
paddle.transpose(Tensor([1, 0],"complex128"), list[1,0,], )
paddle.transpose(Tensor([0, 50],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 6, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 6, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 8, 128, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 128, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 8, 0, 16],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 8, 128, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 8, 128, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 128, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 8, 0, 16],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 8, 128, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 8, 14, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([1, 0, 14, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([1, 8, 0, 12],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([1, 8, 14, 0],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([0, 8, 2, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1, 0, 2, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1, 8, 0, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1, 8, 2, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 32, 8],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 0, 32, 8],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 8, 0, 8],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([1, 8, 32, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 8, 32, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 0, 32, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 8, 0, 8],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([1, 8, 32, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 8, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1, 0, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1, 8, 4, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 8, 5],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 5],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 8, 6],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([1, 0, 6],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 8, 8],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([1, 8, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 15, 10],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([10, 0, 10],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([10, 15, 0],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([0, 15, 10],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([10, 0, 10],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([10, 15, 0],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([0, 15, 10],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([10, 0, 10],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([10, 15, 0],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 20, 1],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([10, 0, 1],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([10, 20, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1000],"float32"), list[1,0,], )
paddle.transpose(Tensor([100, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 12],"float64"), list[1,0,], )
paddle.transpose(Tensor([100, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 2],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 300],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 4],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 40],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 6],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 8],"float64"), list[1,0,], )
paddle.transpose(Tensor([0],"float32"), list[0,], )
paddle.transpose(Tensor([0, 10],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([1000, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 10],"float64"), perm=list[1,0,], )
paddle.transpose(Tensor([1000, 0],"float64"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([11, 0, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([11, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([12, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([12, 0, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([12, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0],"int64"), list[0,], )
paddle.transpose(Tensor([0, 10, 10],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([15, 0, 10],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([15, 10, 0],"bool"), list[1,0,2,], )
paddle.transpose(Tensor([0, 10, 10],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([15, 0, 10],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([15, 10, 0],"float16"), list[1,0,2,], )
paddle.transpose(Tensor([0, 10, 10],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([15, 0, 10],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([15, 10, 0],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([16, 0, 32, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([16, 128, 0, 128],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([16, 128, 32, 0],"float32"), list[0,1,3,2,], )
paddle.transpose(Tensor([16, 0, 32, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([16, 128, 0, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([16, 128, 32, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 16],"float64"), list[1,0,], )
paddle.transpose(Tensor([16, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([16, 0, 128, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([16, 32, 0, 128],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([16, 32, 128, 0],"float32"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 32, 64, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 0, 64, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 32, 0, 128],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([16, 32, 64, 0],"float32"), list[2,0,1,3,], )
paddle.transpose(Tensor([0, 32, 64],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([16, 0, 64],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([16, 32, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([17, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 17],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 1, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([2, 0, 32],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([2, 1, 0],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1],"int64"), list[1,0,], )
paddle.transpose(Tensor([2, 0],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 10],"complex128"), list[1,0,], )
paddle.transpose(Tensor([2, 0],"complex128"), list[1,0,], )
paddle.transpose(Tensor([2, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 16, 2, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 0, 2, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 16, 0, 8],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([2, 16, 2, 0],"float32"), perm=list[0,3,1,2,], )
paddle.transpose(Tensor([0, 2, 112, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 112, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 0, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 112, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 112, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 116, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 116, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 0, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 116, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 116, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 12, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 12, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 12, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 12, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 16, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 16, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 16, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 16, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 176, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 176, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 176, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 176, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 232, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 232, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 0, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 232, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 232, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 24, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 24, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 24, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 24, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 24, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 24, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 24, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 24, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 244, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 244, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 244, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 244, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 32, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 32, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 32, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 32, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 352, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 352, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 352, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 352, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 48, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 48, 14, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 48, 0, 14],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 48, 14, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 48, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 48, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 48, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 48, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 488, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 488, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 488, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 488, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 58, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 58, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 58, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 58, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 64, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 64, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 64, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 64, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 88, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 88, 28, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 88, 0, 28],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 88, 28, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([0, 2, 96, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0, 96, 7, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 96, 0, 7],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 2, 96, 7, 0],"float32"), perm=list[0,2,1,3,4,], )
paddle.transpose(Tensor([2, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 3, 100, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 100, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 100, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 100, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 100, 40],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 40],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 40],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 100, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 100, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 100, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 12, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 12, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 12, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 17, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 17, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 17, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 17, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 17, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 2, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 2, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 2, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 2, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 0, 5, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 2, 0, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 2, 5, 0],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 0, 2, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 0, 5, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 2, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 2, 5, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([2, 0, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([2, 3, 0, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([2, 3, 3, 0],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([0, 3, 32, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([2, 0, 32, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([2, 3, 0, 128],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([2, 3, 32, 0],"float16"), list[0,2,1,3,], )
paddle.transpose(Tensor([0, 3, 4, 100],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 4, 100],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 100],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 4, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 4, 17],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 4, 17],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 0, 17],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 4, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 0, 2, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 0, 3, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 0, 4, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 0, 2, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 0, 3, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 2, 0, 4],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 2, 3, 4, 2, 3, 0],"float32"), list[2,3,4,5,6,7,8,0,1,], )
paddle.transpose(Tensor([0, 3, 4, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 4, 2],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 4, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 4, 4],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 4, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 0, 4, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 0, 5, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 4, 0, 6, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 4, 5, 0, 1],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([2, 3, 4, 5, 6, 0],"float32"), list[4,2,3,1,0,5,], )
paddle.transpose(Tensor([0, 3, 4, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 0, 4, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 0, 5, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 4, 0, 6],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([2, 3, 4, 5, 0],"float32"), list[4,2,3,1,0,], )
paddle.transpose(Tensor([0, 3, 4, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 0, 5],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 0],"complex128"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([0, 3, 4, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 0, 4, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 0, 5],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([2, 3, 4, 0],"complex64"), perm=list[3,2,0,1,], )
paddle.transpose(Tensor([0, 3, 4, 5],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 0, 4, 5],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 3, 0, 5],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 3, 4, 0],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 3, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([2, 0, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([2, 3, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 3, 4],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([2, 0, 4],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([2, 3, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(Tensor([0, 3, 4],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([2, 0, 4],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([2, 3, 0],"float32"), perm=tuple(2,1,0,), )
paddle.transpose(Tensor([0, 3, 40, 100],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 40, 100],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 40, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 40, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 40, 12],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 40, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 40, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 40, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 40, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 5, 2, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 0, 2, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 5, 0, 4],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 5, 2, 0],"float16"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 0, 5, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 0, 2, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 5, 0, 4],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([2, 3, 5, 2, 0],"float32"), perm=list[0,1,3,2,4,], )
paddle.transpose(Tensor([0, 3, 6, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 6, 6],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 6, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 3, 8, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 0, 8, 8],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([2, 3, 8, 0],"float64"), list[0,1,3,2,], )
paddle.transpose(Tensor([0, 4, 6, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 0, 6, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 4, 0, 6, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 4, 6, 0, 6],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([2, 4, 6, 6, 0],"float64"), list[0,2,3,4,1,], )
paddle.transpose(Tensor([0, 4, 6, 6],"float64"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 0, 6, 6],"float64"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 4, 0, 6],"float64"), list[0,2,3,1,], )
paddle.transpose(Tensor([2, 4, 6, 0],"float64"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 4, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([2, 0, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([2, 4, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 5],"float32"), list[0,1,], )
paddle.transpose(Tensor([2, 0],"float32"), list[0,1,], )
paddle.transpose(Tensor([0, 5],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 6, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([2, 0, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([2, 6, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 6, 6, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 0, 6, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 6, 0, 4],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([2, 6, 6, 0],"float64"), list[0,3,1,2,], )
paddle.transpose(Tensor([0, 6, 6, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 0, 6, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 6, 0, 6, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 6, 6, 0, 4],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([2, 6, 6, 6, 0],"float64"), list[0,4,1,2,3,], )
paddle.transpose(Tensor([0, 8, 1, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 0, 1, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 8, 0, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 8, 1, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 2, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 0, 2, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 8, 0, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 8, 2, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 0, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([2, 8, 4, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 4],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([2, 0, 4],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([2, 8, 0],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 10, 1],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([20, 0, 1],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([20, 10, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 40],"float32"), list[1,0,], )
paddle.transpose(Tensor([20, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 40],"float64"), list[0,1,], )
paddle.transpose(Tensor([20, 0],"float64"), list[0,1,], )
paddle.transpose(Tensor([0, 21],"float64"), list[1,0,], )
paddle.transpose(Tensor([21, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([21, 0, 4],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([21, 8, 0],"int64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([220500, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([3, 0, 12],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 100, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100, 120],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([3, 0, 120],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([3, 100, 0],"float64"), list[1,2,0,], )
paddle.transpose(Tensor([3, 0, 2],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 4],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 40],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 6],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 8],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 12, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 17, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 2, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 2, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([3, 0, 3, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([3, 2, 0, 3],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([3, 2, 3, 0],"float32"), list[1,0,2,3,], )
paddle.transpose(Tensor([0, 2, 4],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([3, 0, 4],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([3, 2, 0],"float32"), perm=list[2,0,1,], )
paddle.transpose(Tensor([3, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 3, 40, 40],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([3, 0, 40, 40],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([3, 3, 0, 40],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([3, 3, 40, 0],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 3],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 4, 10],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 10],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([3, 4, 0],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 100],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 4, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 0, 17],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 40, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 6, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([3, 8, 0],"float64"), list[0,2,1,], )
paddle.transpose(Tensor([0, 100],"float32"), list[1,0,], )
paddle.transpose(Tensor([300, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 20],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([32, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 8, 4, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([32, 0, 4, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([32, 8, 0, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([32, 8, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([37574, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 100],"float64"), list[1,0,], )
paddle.transpose(Tensor([4, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 12, 16],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([4, 0, 16],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([4, 12, 0],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 12, 8],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([4, 0, 8],"float64"), list[1,0,2,], )
paddle.transpose(Tensor([0, 23, 16],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([4, 0, 16],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([4, 23, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([4, 0, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([4, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([40, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 20],"float32"), list[1,0,], )
paddle.transpose(Tensor([40, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 5],"float64"), list[1,0,], )
paddle.transpose(Tensor([5, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([5, 0, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([5, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([53566, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([57284, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 2, 140, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([58, 0, 140, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([58, 2, 0, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([58, 2, 140, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[0,1,2,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[0,2,1,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[1,2,0,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[2,0,1,], )
paddle.transpose(Tensor([0, 2, 3],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([6, 0, 3],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([6, 2, 0],"float32"), list[2,1,0,], )
paddle.transpose(Tensor([6, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([6, 0, 8],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([6, 8, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([61409, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([63090, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 16, 32, 128],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([64, 0, 32, 128],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([64, 16, 0, 128],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([64, 16, 32, 0],"float32"), list[0,2,3,1,], )
paddle.transpose(Tensor([0, 16, 32, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 0, 32, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 16, 0, 128],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([64, 16, 32, 0],"float32"), list[3,1,0,2,], )
paddle.transpose(Tensor([67820, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 1, 2, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 0, 2, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 1, 0, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 1, 2, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 1, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 0, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 1, 4, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 1, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([8, 0, 4],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([8, 1, 0],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1, 5],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([8, 0, 5],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 1, 6],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([8, 0, 6],"float32"), list[1,0,2,], )
paddle.transpose(Tensor([0, 11],"int64"), list[1,0,], )
paddle.transpose(Tensor([8, 0],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 12],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 13],"float32"), list[1,0,], )
paddle.transpose(Tensor([8, 0],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 13],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 2, 1, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 0, 1, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 2, 0, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 2, 1, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 2, 2, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 0, 2, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 2, 0, 16],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 2, 2, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 2, 4, 8],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([8, 2, 4, 0],"float32"), perm=list[1,0,], )
paddle.transpose(Tensor([0, 3, 4, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 0, 4, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 0, 4, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 0, 5, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 4, 0, 3],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([8, 3, 4, 4, 5, 0],"float32"), list[5,3,4,1,0,2,], )
paddle.transpose(Tensor([0, 4],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 4],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 5],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 6],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 6],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 7],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 7],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 8],"float32"), list[1,0,], )
paddle.transpose(Tensor([8, 0],"float64"), list[1,0,], )
paddle.transpose(Tensor([0, 8],"int64"), list[1,0,], )
paddle.transpose(Tensor([0, 9],"float32"), list[1,0,], )
paddle.transpose(Tensor([0, 9],"int64"), list[1,0,], )
paddle.transpose(Tensor([8000, 0],"float32"), perm=list[1,0,], )
paddle.transpose(x=Tensor([0, 2, 8, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 8, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 2, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 2, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 4, 8, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 4, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 4, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 8, 1, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 1, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 8, 0, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 8, 1, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 8, 1, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 1, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 8, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 8, 2, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 2, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 8, 2, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 8, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 0, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([1, 8, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 1, 8, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 8, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 1, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 1, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 2, 8, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 8, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 2, 0, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 2, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 4, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 4, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 1, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 8, 0, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 8, 1, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 1, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 8, 0, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 8, 2, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 2, 16],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 8, 2, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 0, 4, 8],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([2, 8, 4, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 4, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([3, 0, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([3, 4, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([0, 4, 8, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([32, 0, 8, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([32, 4, 0, 64],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([32, 4, 8, 0],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([0, 1, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([4, 0, 10],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([4, 1, 0],"float32"), perm=list[1,0,2,], )
paddle.transpose(x=Tensor([0, 140, 2, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([58, 0, 2, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([58, 140, 0, 1],"float32"), perm=list[0,2,1,3,], )
paddle.transpose(x=Tensor([58, 140, 2, 0],"float32"), perm=list[0,2,1,3,], )
paddle.trapezoid(Tensor([0],"float32"), dx=2.0, )
paddle.trapezoid(y=Tensor([0, 3],"float32"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float32"), x=Tensor([0, 3],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float32"), x=Tensor([2, 0],"float32"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float64"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=None, dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 3],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3],"float64"), x=Tensor([0, 3],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([2, 0],"float64"), x=Tensor([2, 0],"float64"), dx=None, axis=-1, )
paddle.trapezoid(y=Tensor([0, 3, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([3, 0, 4],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([3, 3, 0],"float32"), x=Tensor([3],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=Tensor([0],"float32"), dx=None, axis=1, )
paddle.trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([4, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 4],"float16"), x=Tensor([4, 0],"float16"), )
paddle.trapezoid(y=Tensor([0, 4],"float16"), x=Tensor([0, 4],"float16"), )
paddle.trapezoid(y=Tensor([4, 0],"float16"), x=Tensor([4, 0],"float16"), )
paddle.tril(Tensor([0, 1],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 0],"float32"), diagonal=0, )
paddle.tril(Tensor([0, 10],"bool"), )
paddle.tril(Tensor([10, 0],"bool"), )
paddle.tril(Tensor([0, 20, 1],"float32"), 0, )
paddle.tril(Tensor([10, 0, 1],"float32"), 0, )
paddle.tril(Tensor([10, 20, 0],"float32"), 0, )
paddle.tril(Tensor([0, 2048],"bool"), )
paddle.tril(Tensor([2048, 0],"bool"), )
paddle.tril(Tensor([0, 50],"bool"), )
paddle.tril(Tensor([50, 0],"bool"), )
paddle.tril(Tensor([0, 64],"float16"), )
paddle.tril(Tensor([64, 0],"float16"), )
paddle.tril(Tensor([0, 64],"float32"), )
paddle.tril(Tensor([64, 0],"float32"), )
paddle.triu(Tensor([0, 128, 32, 32],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 0, 32, 32],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 128, 0, 32],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 128, 32, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 20, 1],"float32"), 0, )
paddle.triu(Tensor([10, 0, 1],"float32"), 0, )
paddle.triu(Tensor([10, 20, 0],"float32"), 0, )
paddle.triu(Tensor([0, 16],"float32"), diagonal=1, )
paddle.triu(Tensor([11, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 0],"float32"), diagonal=1, )
paddle.triu(Tensor([0, 4],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 0],"float32"), diagonal=1, )
paddle.trunc(Tensor([0, 20, 1],"float32"), )
paddle.trunc(Tensor([10, 0, 1],"float32"), )
paddle.trunc(Tensor([10, 20, 0],"float32"), )
paddle.trunc(Tensor([0, 20],"float32"), )
paddle.trunc(Tensor([20, 0],"float32"), )
paddle.unbind(Tensor([0],"float32"), 0, )
paddle.unbind(Tensor([0, 2],"bool"), axis=0, )
paddle.unbind(Tensor([2, 0],"bool"), axis=0, )
paddle.unbind(Tensor([0, 3, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 0, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 3, 0, 8],"float32"), axis=0, )
paddle.unbind(Tensor([2, 3, 8, 0],"float32"), axis=0, )
paddle.unbind(Tensor([0, 3],"complex128"), 0, )
paddle.unbind(Tensor([2, 0],"complex128"), 0, )
paddle.unbind(Tensor([0, 3],"complex64"), 0, )
paddle.unbind(Tensor([2, 0],"complex64"), 0, )
paddle.unbind(Tensor([0, 3],"float32"), 0, )
paddle.unbind(Tensor([2, 0],"float32"), 0, )
paddle.unbind(Tensor([0, 9, 5],"float32"), axis=0, )
paddle.unbind(Tensor([3, 0, 5],"float32"), axis=0, )
paddle.unbind(Tensor([3, 9, 0],"float32"), axis=0, )
paddle.unbind(Tensor([0, 5, 6],"float32"), )
paddle.unbind(Tensor([4, 0, 6],"float32"), )
paddle.unbind(Tensor([4, 5, 0],"float32"), )
paddle.unflatten(Tensor([0, 4, 4, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 0, 4, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 4, 0, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(Tensor([3, 4, 4, 0],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(x=Tensor([0, 6, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([0],"int64"), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([0, 6, 16],"float64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"float64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"float64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"int16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"int16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"int16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"int32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"int32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"int32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([0, 6, 16],"int64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 0, 16],"int64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 0],"int64"), axis=0, shape=tuple(2,2,), )
paddle.unsqueeze(Tensor([0, 1],"float64"), axis=2, )
paddle.unsqueeze(Tensor([1, 0],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 128, 32],"float32"), 2, )
paddle.unsqueeze(Tensor([1, 0, 32],"float32"), 2, )
paddle.unsqueeze(Tensor([1, 128, 0],"float32"), 2, )
paddle.unsqueeze(Tensor([0, 2],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 3],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0],"float32"), 0, )
paddle.unsqueeze(Tensor([0],"float64"), axis=0, )
paddle.unsqueeze(Tensor([0],"float64"), axis=list[0,2,], )
paddle.unsqueeze(Tensor([0, 2],"float32"), -1, )
paddle.unsqueeze(Tensor([10, 0],"float32"), -1, )
paddle.unsqueeze(Tensor([0, 20, 1],"float32"), -1, )
paddle.unsqueeze(Tensor([10, 0, 1],"float32"), -1, )
paddle.unsqueeze(Tensor([10, 20, 0],"float32"), -1, )
paddle.unsqueeze(Tensor([0],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 4],"float64"), -1, )
paddle.unsqueeze(Tensor([12, 0],"float64"), -1, )
paddle.unsqueeze(Tensor([2, 0],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 2, 2],"int64"), axis=1, )
paddle.unsqueeze(Tensor([2, 0, 2],"int64"), axis=1, )
paddle.unsqueeze(Tensor([2, 2, 0],"int64"), axis=1, )
paddle.unsqueeze(Tensor([0, 2, 2],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([2, 0, 2],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([2, 2, 0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 3],"float32"), -1, )
paddle.unsqueeze(Tensor([2, 0],"float32"), -1, )
paddle.unsqueeze(Tensor([0, 4],"float32"), axis=-1, )
paddle.unsqueeze(Tensor([2, 0],"float32"), axis=-1, )
paddle.unsqueeze(Tensor([0, 4],"float64"), axis=-1, )
paddle.unsqueeze(Tensor([2, 0],"float64"), axis=-1, )
paddle.unsqueeze(Tensor([0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0],"float32"), axis=list[0,2,], )
paddle.unsqueeze(Tensor([0, 30, 40],"float32"), axis=list[1,2,], )
paddle.unsqueeze(Tensor([20, 0, 40],"float32"), axis=list[1,2,], )
paddle.unsqueeze(Tensor([20, 30, 0],"float32"), axis=list[1,2,], )
paddle.unsqueeze(Tensor([3, 0, 2],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([3, 2, 0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([3, 0],"float64"), axis=2, )
paddle.unsqueeze(Tensor([0, 3, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 3, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 0, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 0, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 3, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 40, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 0, 3],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 40, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 0, 40],"float32"), axis=1, )
paddle.unsqueeze(Tensor([3, 40, 0],"float32"), axis=1, )
paddle.unsqueeze(Tensor([0, 10],"float64"), list[2,], )
paddle.unsqueeze(Tensor([4, 0],"float64"), list[2,], )
paddle.unsqueeze(Tensor([0, 12],"float64"), -1, )
paddle.unsqueeze(Tensor([4, 0],"float64"), -1, )
paddle.unsqueeze(Tensor([0, 512, 512],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([4, 0, 512],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([4, 512, 0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 80],"float32"), 0, )
paddle.unsqueeze(Tensor([498, 0],"float32"), 0, )
paddle.unsqueeze(Tensor([0, 10],"float32"), axis=0, )
paddle.unsqueeze(Tensor([5, 0],"float32"), axis=0, )
paddle.unsqueeze(Tensor([0, 10],"float32"), Tensor([2],"int64"), )
paddle.unsqueeze(Tensor([5, 0],"float32"), Tensor([2],"int64"), )
paddle.unsqueeze(Tensor([5, 10],"float32"), Tensor([0],"int64"), )
paddle.unsqueeze(Tensor([0, 16],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([8, 0],"int64"), axis=-1, )
paddle.unsqueeze(Tensor([0, 32],"float64"), list[1,], )
paddle.unsqueeze(Tensor([8, 0],"float64"), list[1,], )
paddle.unsqueeze(Tensor([0, 4],"float32"), list[2,], )
paddle.unsqueeze(Tensor([8, 0],"float32"), list[2,], )
paddle.unsqueeze(Tensor([0, 4],"float64"), list[2,], )
paddle.unsqueeze(Tensor([8, 0],"float64"), list[2,], )
paddle.unsqueeze(Tensor([0, 8],"float32"), list[1,], )
paddle.unsqueeze(Tensor([8, 0],"float32"), list[1,], )
paddle.unsqueeze(Tensor([0],"int64"), list[1,], )
paddle.vander(Tensor([0],"complex128"), 0, False, )
paddle.vander(Tensor([0],"complex128"), 0, True, )
paddle.vander(Tensor([0],"complex128"), 1, False, )
paddle.vander(Tensor([0],"complex128"), 1, True, )
paddle.vander(Tensor([0],"complex128"), 2, False, )
paddle.vander(Tensor([0],"complex128"), 2, True, )
paddle.vander(Tensor([0],"complex128"), 3, False, )
paddle.vander(Tensor([0],"complex128"), 3, True, )
paddle.vander(Tensor([0],"complex128"), 4, False, )
paddle.vander(Tensor([0],"complex128"), 4, True, )
paddle.vander(Tensor([0],"float32"), 0, False, )
paddle.vander(Tensor([0],"float32"), 0, True, )
paddle.vander(Tensor([0],"float32"), 1, False, )
paddle.vander(Tensor([0],"float32"), 1, True, )
paddle.vander(Tensor([0],"float32"), 2, False, )
paddle.vander(Tensor([0],"float32"), 2, True, )
paddle.vander(Tensor([0],"float32"), 3, False, )
paddle.vander(Tensor([0],"float32"), 3, True, )
paddle.vander(Tensor([0],"float32"), 4, False, )
paddle.vander(Tensor([0],"float32"), 4, True, )
paddle.vander(Tensor([0],"float32"), 5, False, )
paddle.vander(Tensor([0],"float32"), 5, True, )
paddle.vander(Tensor([0],"float32"), 6, False, )
paddle.vander(Tensor([0],"float32"), 6, True, )
paddle.vander(Tensor([0],"float32"), 7, False, )
paddle.vander(Tensor([0],"float32"), 7, True, )
paddle.vander(Tensor([0],"float32"), 8, False, )
paddle.vander(Tensor([0],"float32"), 8, True, )
paddle.vander(Tensor([0],"float32"), None, False, )
paddle.var(Tensor([0, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), 2, True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), 2, True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([0, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 0, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 0, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([1, 3, 4, 0],"float64"), tuple(1,3,), True, False, )
paddle.var(Tensor([0, 256],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 0],"float32"), axis=-1, keepdim=True, )
paddle.var(Tensor([0, 256],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([16, 0],"float64"), axis=-1, keepdim=True, )
paddle.var(Tensor([0],"float32"), )
paddle.vsplit(Tensor([0, 4, 3],"int64"), 2, )
paddle.vsplit(Tensor([6, 0, 3],"int64"), 2, )
paddle.vsplit(Tensor([6, 4, 0],"int64"), 2, )
paddle.vsplit(Tensor([0, 4, 3],"int64"), 3, )
paddle.vsplit(Tensor([6, 0, 3],"int64"), 3, )
paddle.vsplit(Tensor([6, 4, 0],"int64"), 3, )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[-1,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 0, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 4, 0],"int64"), list[2,4,], )
paddle.vsplit(Tensor([0, 4, 3],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 0, 3],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 4, 0],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([0, 4],"bool"), 3, )
paddle.vsplit(Tensor([6, 0],"bool"), 3, )
paddle.vsplit(Tensor([0, 4],"float16"), 3, )
paddle.vsplit(Tensor([6, 0],"float16"), 3, )
paddle.vsplit(Tensor([0, 4],"float32"), 3, )
paddle.vsplit(Tensor([6, 0],"float32"), 3, )
paddle.vsplit(Tensor([0, 4],"float64"), 3, )
paddle.vsplit(Tensor([6, 0],"float64"), 3, )
paddle.vsplit(Tensor([0, 4],"int32"), 3, )
paddle.vsplit(Tensor([6, 0],"int32"), 3, )
paddle.vsplit(Tensor([0, 4],"int64"), 2, )
paddle.vsplit(Tensor([6, 0],"int64"), 2, )
paddle.vsplit(Tensor([0, 4],"int64"), 3, )
paddle.vsplit(Tensor([6, 0],"int64"), 3, )
paddle.vsplit(Tensor([0, 4],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 0],"int64"), list[-1,], )
paddle.vsplit(Tensor([0, 4],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 0],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([0, 4],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 0],"int64"), list[2,4,], )
paddle.vsplit(Tensor([0, 4],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 0],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([0, 4],"uint8"), 3, )
paddle.vsplit(Tensor([6, 0],"uint8"), 3, )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),Tensor([0, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),Tensor([1, 0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),Tensor([1, 1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),Tensor([1, 1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),Tensor([0, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),Tensor([1, 0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),Tensor([1, 1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),Tensor([0, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),Tensor([0],"float64"),Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([0],"float64"),Tensor([0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], )
paddle.vstack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([1, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),Tensor([0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),Tensor([3, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),Tensor([0, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),Tensor([3, 0, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),Tensor([3, 4, 0, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),Tensor([3, 4, 2, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),Tensor([0, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),Tensor([3, 0, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),Tensor([3, 4, 0],"float64"),], name=None, )
paddle.vstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.vstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], )
paddle.vstack(list[Tensor([0],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([0],"float64"),Tensor([5],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([0],"float64"),], name=None, )
paddle.zeros_like(Tensor([0, 128],"float32"), )
paddle.zeros_like(Tensor([1, 0],"float32"), )
paddle.zeros_like(Tensor([0],"bool"), )
paddle.zeros_like(Tensor([0],"float32"), )
paddle.zeros_like(Tensor([0, 2],"float32"), )
paddle.zeros_like(Tensor([10, 0],"float32"), )
paddle.zeros_like(Tensor([0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 8],"int64"), )
paddle.zeros_like(Tensor([13, 0],"int64"), )
paddle.zeros_like(Tensor([0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 100],"int64"), )
paddle.zeros_like(Tensor([2, 0],"int64"), )
paddle.zeros_like(Tensor([2, 0],"float32"), )
paddle.zeros_like(Tensor([0, 2],"int64"), )
paddle.zeros_like(Tensor([0, 3, 4, 5],"float32"), )
paddle.zeros_like(Tensor([2, 0, 4, 5],"float32"), )
paddle.zeros_like(Tensor([2, 3, 0, 5],"float32"), )
paddle.zeros_like(Tensor([2, 3, 4, 0],"float32"), )
paddle.zeros_like(Tensor([0, 3, 4, 5],"float64"), )
paddle.zeros_like(Tensor([2, 0, 4, 5],"float64"), )
paddle.zeros_like(Tensor([2, 3, 0, 5],"float64"), )
paddle.zeros_like(Tensor([2, 3, 4, 0],"float64"), )
paddle.zeros_like(Tensor([0, 3, 8, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([2, 0, 8, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([2, 3, 0, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([2, 3, 8, 0],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([0, 3],"float32"), )
paddle.zeros_like(Tensor([0, 4, 2],"float32"), )
paddle.zeros_like(Tensor([2, 0, 2],"float32"), )
paddle.zeros_like(Tensor([2, 4, 0],"float32"), )
paddle.zeros_like(Tensor([0, 4, 2],"float64"), )
paddle.zeros_like(Tensor([2, 0, 2],"float64"), )
paddle.zeros_like(Tensor([2, 4, 0],"float64"), )
paddle.zeros_like(Tensor([0, 4],"float32"), )
paddle.zeros_like(Tensor([0, 10],"int64"), )
paddle.zeros_like(Tensor([3, 0],"int64"), )
paddle.zeros_like(Tensor([3, 0],"float32"), )
paddle.zeros_like(Tensor([0, 28, 28],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([3, 0, 28],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([3, 28, 0],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([0, 3, 5],"float32"), )
paddle.zeros_like(Tensor([3, 0, 5],"float32"), )
paddle.zeros_like(Tensor([3, 3, 0],"float32"), )
paddle.zeros_like(Tensor([0, 3],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([3, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 4, 2],"int64"), )
paddle.zeros_like(Tensor([3, 0, 2],"int64"), )
paddle.zeros_like(Tensor([3, 4, 0],"int64"), )
paddle.zeros_like(Tensor([0, 4],"float64"), )
paddle.zeros_like(Tensor([3, 0],"float64"), )
paddle.zeros_like(Tensor([0, 4],"float64"), type(numpy.bool_), )
paddle.zeros_like(Tensor([3, 0],"float64"), type(numpy.bool_), )
paddle.zeros_like(Tensor([0, 4],"float64"), type(numpy.float32), )
paddle.zeros_like(Tensor([3, 0],"float64"), type(numpy.float32), )
paddle.zeros_like(Tensor([0, 4],"float64"), type(numpy.float64), )
paddle.zeros_like(Tensor([3, 0],"float64"), type(numpy.float64), )
paddle.zeros_like(Tensor([0, 4],"float64"), type(numpy.int32), )
paddle.zeros_like(Tensor([3, 0],"float64"), type(numpy.int32), )
paddle.zeros_like(Tensor([0, 4],"float64"), type(numpy.int64), )
paddle.zeros_like(Tensor([3, 0],"float64"), type(numpy.int64), )
paddle.zeros_like(Tensor([0, 4],"int64"), )
paddle.zeros_like(Tensor([0, 40],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([3, 0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 40],"float32"), )
paddle.zeros_like(Tensor([0, 40],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 5],"float32"), )
paddle.zeros_like(Tensor([0, 8, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([3, 0, 8],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([3, 8, 0],"float32"), Dtype(float32), )
paddle.zeros_like(Tensor([30, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 1],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([300, 0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([300, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 5, 6],"float32"), )
paddle.zeros_like(Tensor([4, 0, 6],"float32"), )
paddle.zeros_like(Tensor([4, 5, 0],"float32"), )
paddle.zeros_like(Tensor([5, 0],"float32"), )
paddle.zeros_like(Tensor([5, 0],"int64"), )
paddle.zeros_like(Tensor([0],"float64"), )
paddle.zeros_like(Tensor([50, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0],"int64"), "int64", )
paddle.zeros_like(Tensor([0, 8, 9, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 0, 9, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 0, 18],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 9, 0],"float16"), dtype=type(int), )
paddle.zeros_like(Tensor([0, 8, 9, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 0, 9, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 0, 18],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([6, 8, 9, 0],"float32"), dtype=type(int), )
paddle.zeros_like(Tensor([0],"float16"), )
paddle.zeros_like(Tensor([0],"float32"), dtype="int32", )
paddle.zeros_like(Tensor([0, 4],"bool"), )
paddle.zeros_like(Tensor([8, 0],"bool"), )
paddle.zeros_like(Tensor([8, 0],"int64"), )